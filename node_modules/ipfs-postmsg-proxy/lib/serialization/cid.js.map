{"version":3,"sources":["../../src/serialization/cid.js"],"names":["cidFromJson","obj","CID","version","codec","hash","cidToJson","cid","__ipfsPostMsgProxyType","multihash","isCid","isCID","isCidJson","preCidFromJson","index","args","preCidToJson","preArrayOfCidToJson","preArrayOfCidFromJson"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;AAEO,IAAMA,oCAAc,SAAdA,WAAc,CAACC,GAAD;AAAA,SAAS,IAAIC,cAAJ,CAAQD,IAAIE,OAAZ,EAAqBF,IAAIG,KAAzB,EAAgC,4BAAeH,IAAII,IAAnB,CAAhC,CAAT;AAAA,CAApB;;AAEA,IAAMC,gCAAY,SAAZA,SAAY,CAACC,GAAD;AAAA,SAAU;AACjCC,4BAAwB,KADS;AAEjCJ,WAAOG,IAAIH,KAFsB;AAGjCD,aAASI,IAAIJ,OAHoB;AAIjCE,UAAM,0BAAaE,IAAIE,SAAjB;AAJ2B,GAAV;AAAA,CAAlB;;AAOA,IAAMC,wBAAQR,eAAIS,KAAlB;AACA,IAAMC,gCAAY,SAAZA,SAAY,CAACX,GAAD;AAAA,SAASA,OAAOA,IAAIO,sBAAJ,KAA+B,KAA/C;AAAA,CAAlB;;AAEA,IAAMK,0CAAiB,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AACvC,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,UAAS;AAAA;;AAClB,QAAIH,UAAUG,KAAKD,KAAL,CAAV,CAAJ,EAA4B;AAC1BC,WAAKD,KAAL,IAAcd,YAAYe,KAAKD,KAAL,CAAZ,CAAd;AACD;AACD,WAAOC,IAAP;AACD,GALD;AAMD,CAPM;;AASA,IAAMC,sCAAe,SAAfA,YAAe,CAACF,KAAD,EAAW;AACrC,SAAO,YAAa;AAAA,uCAATC,IAAS;AAATA,UAAS;AAAA;;AAClB,QAAIL,MAAMK,KAAKD,KAAL,CAAN,CAAJ,EAAwB;AACtBC,WAAKD,KAAL,IAAcR,UAAUS,KAAKD,KAAL,CAAV,CAAd;AACD;AACD,WAAOC,IAAP;AACD,GALD;AAMD,CAPM;;AASA,IAAME,oDAAsB,SAAtBA,mBAAsB,CAACH,KAAD;AAAA,SAAW,gCAAWA,KAAX,EAAkBJ,KAAlB,EAAyBJ,SAAzB,CAAX;AAAA,CAA5B;AACA,IAAMY,wDAAwB,SAAxBA,qBAAwB,CAACJ,KAAD;AAAA,SAAW,gCAAWA,KAAX,EAAkBF,SAAlB,EAA6BZ,WAA7B,CAAX;AAAA,CAA9B","file":"cid.js","sourcesContent":["import CID from 'cids'\nimport { bufferFromJson, bufferToJson } from './buffer'\nimport { preArrayOf } from './utils/prepost-array-of'\n\nexport const cidFromJson = (obj) => new CID(obj.version, obj.codec, bufferFromJson(obj.hash))\n\nexport const cidToJson = (cid) => ({\n  __ipfsPostMsgProxyType: 'CID',\n  codec: cid.codec,\n  version: cid.version,\n  hash: bufferToJson(cid.multihash)\n})\n\nexport const isCid = CID.isCID\nexport const isCidJson = (obj) => obj && obj.__ipfsPostMsgProxyType === 'CID'\n\nexport const preCidFromJson = (index) => {\n  return (...args) => {\n    if (isCidJson(args[index])) {\n      args[index] = cidFromJson(args[index])\n    }\n    return args\n  }\n}\n\nexport const preCidToJson = (index) => {\n  return (...args) => {\n    if (isCid(args[index])) {\n      args[index] = cidToJson(args[index])\n    }\n    return args\n  }\n}\n\nexport const preArrayOfCidToJson = (index) => preArrayOf(index, isCid, cidToJson)\nexport const preArrayOfCidFromJson = (index) => preArrayOf(index, isCidJson, cidFromJson)\n"]}