{"version":3,"sources":["../../src/server/block.js"],"names":["getIpfs","opts","put","args","cid","pre","block","blockToJson","get","stat"],"mappings":";;;;;;kBAMe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,gBAAP,EAAyB,kBAC5B,+BAAkB,CAAlB,CAD4B,EAE5B,6BAAiB,CAAjB,CAF4B,EAG5B,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACX,UAAIA,KAAK,CAAL,KAAWA,KAAK,CAAL,EAAQC,GAAvB,EAA4B;AAC1BD,aAAK,CAAL,EAAQC,GAAR,GAAc,sBAAYD,KAAK,CAAL,EAAQC,GAApB,CAAd;AACD;;AAED,aAAOD,IAAP;AACD,KAT2B,EAU5BF,KAAKI,GAAL,CAAS,WAAT,CAV4B,EAW5B,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBJ,GAAhB,iCAAb;AAAA,KADF,EAEEK,kBAFF,CAX4B,CAAzB,EAeFN,IAfE,CADA;AAiBLO,SAAK,wBAAO,gBAAP,EAAyB,kBAC5B,+BAAkB,CAAlB,CAD4B,EAE5B,yBAAe,CAAf,CAF4B,EAG5BP,KAAKI,GAAL,CAAS,WAAT,CAH4B,EAI5B,mBACE;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBE,GAAhB,kCAAb;AAAA,KADF,EAEED,kBAFF,CAJ4B,CAAzB,EAQFN,IARE,CAjBA;AA0BLQ,UAAM,wBAAO,iBAAP,EAA0B,kBAC9B,+BAAkB,CAAlB,CAD8B,EAE9B,yBAAe,CAAf,CAF8B,EAG9BR,KAAKI,GAAL,CAAS,YAAT,CAH8B,EAI9B;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBG,IAAhB,kCAAb;AAAA,KAJ8B,CAA1B,EAKHR,IALG;AA1BD,GAAP;AAiCD,C;;AAxCD;;AACA;;AACA;;AACA;;AACA","file":"block.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre, post } from 'prepost'\nimport { blockToJson, preBlockFromJson } from '../serialization/block'\nimport { preCidFromJson, cidFromJson } from '../serialization/cid'\nimport { preBufferFromJson } from '../serialization/buffer'\n\nexport default function (getIpfs, opts) {\n  return {\n    put: expose('ipfs.block.put', pre(\n      preBufferFromJson(0),\n      preBlockFromJson(0),\n      (...args) => {\n        if (args[1] && args[1].cid) {\n          args[1].cid = cidFromJson(args[1].cid)\n        }\n\n        return args\n      },\n      opts.pre('block.put'),\n      post(\n        (...args) => getIpfs().block.put(...args),\n        blockToJson\n      )\n    ), opts),\n    get: expose('ipfs.block.get', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('block.get'),\n      post(\n        (...args) => getIpfs().block.get(...args),\n        blockToJson\n      )\n    ), opts),\n    stat: expose('ipfs.block.stat', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('block.stat'),\n      (...args) => getIpfs().block.stat(...args)\n    ), opts)\n  }\n}\n"]}