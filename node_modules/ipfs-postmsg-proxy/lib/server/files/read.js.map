{"version":3,"sources":["../../../src/server/files/read.js"],"names":["getIpfs","opts","read","pre","files","bufferToJson","readPullStream","res","Promise","resolve","readFnName","PMS","sink","Object","assign","post","data"],"mappings":";;;;;;kBAQe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,UAAM,wBAAO,iBAAP,EAA0B,kBAC9BD,KAAKE,GAAL,CAAS,YAAT,CAD8B,EAE9B,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBF,IAAhB,iCAAb;AAAA,KADF,EAEEG,oBAFF,CAF8B,CAA1B,EAMHJ,IANG,CADD;AAQLK,oBAAgB,wBAAO,2BAAP,EAAoC,kBAClDL,KAAKE,GAAL,CAAS,sBAAT,CADkD,EAElD,mBACE;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBE,cAAhB,kCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChC,YAAMC,aAAa,wBAAnB;;AAEA,kCACEH,GADF,EAEEI,4BAAIC,IAAJ,CAASF,UAAT,EAAqBG,OAAOC,MAAP,CAAc,EAAd,EAAkBb,IAAlB,EAAwB;AAC3Cc,cAD2C,gBACrCR,GADqC,EAChC;AACT,gBAAI,sBAASA,IAAIS,IAAb,CAAJ,EAAwB;AACtBT,kBAAIS,IAAJ,GAAW,0BAAaT,IAAIS,IAAjB,CAAX;AACD;;AAED,mBAAOT,GAAP;AACD;AAP0C,SAAxB,CAArB,CAFF;;AAaAE,gBAAQ,8BAAeC,UAAf,CAAR;AACD,OAjBQ,CAAT;AAAA,KAFF,CAFkD,CAApC,EAuBbT,IAvBa;AARX,GAAP;AAiCD,C;;AA1CD;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA","file":"read.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre, post } from 'prepost'\nimport shortid from 'shortid'\nimport pull from 'pull-stream'\nimport PMS from 'pull-postmsg-stream'\nimport { isBuffer, bufferToJson } from '../../serialization/buffer'\nimport { functionToJson } from '../../serialization/function'\n\nexport default function (getIpfs, opts) {\n  return {\n    read: expose('ipfs.files.read', pre(\n      opts.pre('files.read'),\n      post(\n        (...args) => getIpfs().files.read(...args),\n        bufferToJson\n      )\n    ), opts),\n    readPullStream: expose('ipfs.files.readPullStream', pre(\n      opts.pre('files.readPullStream'),\n      post(\n        (...args) => getIpfs().files.readPullStream(...args),\n        (res) => new Promise((resolve) => {\n          const readFnName = shortid()\n\n          pull(\n            res,\n            PMS.sink(readFnName, Object.assign({}, opts, {\n              post (res) {\n                if (isBuffer(res.data)) {\n                  res.data = bufferToJson(res.data)\n                }\n\n                return res\n              }\n            }))\n          )\n\n          resolve(functionToJson(readFnName))\n        })\n      )\n    ), opts)\n  }\n}\n"]}