{"version":3,"sources":["../../src/server/dht.js"],"names":["getIpfs","opts","put","pre","dht","get","findprovs","res","map","item","findpeer","provide","query"],"mappings":";;;;;;kBAMe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,cAAP,EAAuB,kBAC1BD,KAAKE,GAAL,CAAS,SAAT,CAD0B,EAE1B;AAAA;;AAAA,aAAa,0BAAUC,GAAV,EAAcF,GAAd,+BAAb;AAAA,KAF0B,CAAvB,EAGFD,IAHE,CADA;AAKLI,SAAK,wBAAO,cAAP,EAAuB,kBAC1BJ,KAAKE,GAAL,CAAS,SAAT,CAD0B,EAE1B;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcC,GAAd,gCAAb;AAAA,KAF0B,CAAvB,EAGFJ,IAHE,CALA;AASLK,eAAW,wBAAO,oBAAP,EAA6B,kBACtC,+BAAkB,CAAlB,CADsC,EAEtCL,KAAKE,GAAL,CAAS,eAAT,CAFsC,EAGtC,mBACE;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcE,SAAd,gCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAASA,IAAIC,GAAJ,CAAQ,UAACC,IAAD;AAAA,eAAU,sBAAWA,IAAX,IAAmB,0BAAeA,IAAf,CAAnB,GAA0CA,IAApD;AAAA,OAAR,CAAT;AAAA,KAFF,CAHsC,CAA7B,EAORR,IAPQ,CATN;AAiBLS,cAAU,wBAAO,mBAAP,EAA4B,kBACpC,6BAAkB,CAAlB,CADoC,EAEpCT,KAAKE,GAAL,CAAS,cAAT,CAFoC,EAGpC,mBACE;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcM,QAAd,gCAAb;AAAA,KADF,EAEE,UAACH,GAAD;AAAA,aAAS,sBAAWA,GAAX,IAAkB,0BAAeA,GAAf,CAAlB,GAAwCA,GAAjD;AAAA,KAFF,CAHoC,CAA5B,EAOPN,IAPO,CAjBL;AAyBLU,aAAS,wBAAO,kBAAP,EAA2B,kBAClC,+BAAkB,CAAlB,CADkC,EAElC,sCAAyB,CAAzB,CAFkC,EAGlC,yBAAe,CAAf,CAHkC,EAIlC,gCAAsB,CAAtB,CAJkC,EAKlCV,KAAKE,GAAL,CAAS,aAAT,CALkC,EAMlC,mBACE;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcO,OAAd,gCAAb;AAAA,KADF;AAEE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,aAAM,IAAN;AAAA,KAXF,CANkC,CAA3B,EAmBNV,IAnBM,CAzBJ;AA6CLW,WAAO,wBAAO,gBAAP,EAAyB,kBAC9B,6BAAkB,CAAlB,CAD8B,EAE9BX,KAAKE,GAAL,CAAS,WAAT,CAF8B,EAG9B,mBACE;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcQ,KAAd,gCAAb;AAAA,KADF,EAEE,UAACL,GAAD;AAAA,aAASA,IAAIC,GAAJ,CAAQ,UAACC,IAAD;AAAA,eAAU,sBAAWA,IAAX,IAAmB,0BAAeA,IAAf,CAAnB,GAA0CA,IAApD;AAAA,OAAR,CAAT;AAAA,KAFF,CAH8B,CAAzB,EAOJR,IAPI;AA7CF,GAAP;AAsDD,C;;AA7DD;;AACA;;AACA;;AACA;;AACA","file":"dht.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre, post } from 'prepost'\nimport { preCidFromJson, preArrayOfCidFromJson } from '../serialization/cid'\nimport { prePeerIdFromJson, peerInfoToJson, isPeerInfo } from '../serialization/peer'\nimport { preBufferFromJson, preArrayOfBufferFromJson } from '../serialization/buffer'\n\nexport default function (getIpfs, opts) {\n  return {\n    put: expose('ipfs.dht.put', pre(\n      opts.pre('dht.put'),\n      (...args) => getIpfs().dht.put(...args)\n    ), opts),\n    get: expose('ipfs.dht.get', pre(\n      opts.pre('dht.get'),\n      (...args) => getIpfs().dht.get(...args)\n    ), opts),\n    findprovs: expose('ipfs.dht.findprovs', pre(\n      preBufferFromJson(0),\n      opts.pre('dht.findprovs'),\n      post(\n        (...args) => getIpfs().dht.findprovs(...args),\n        (res) => res.map((item) => isPeerInfo(item) ? peerInfoToJson(item) : item)\n      )\n    ), opts),\n    findpeer: expose('ipfs.dht.findpeer', pre(\n      prePeerIdFromJson(0),\n      opts.pre('dht.findpeer'),\n      post(\n        (...args) => getIpfs().dht.findpeer(...args),\n        (res) => isPeerInfo(res) ? peerInfoToJson(res) : res\n      )\n    ), opts),\n    provide: expose('ipfs.dht.provide', pre(\n      preBufferFromJson(0),\n      preArrayOfBufferFromJson(0),\n      preCidFromJson(0),\n      preArrayOfCidFromJson(0),\n      opts.pre('dht.provide'),\n      post(\n        (...args) => getIpfs().dht.provide(...args),\n        // js-ipfs returns undefined\n        // js-ipfs-api -> go-ipfs returns the request stream, with no data\n        //\n        // https://ipfs.io/docs/api/#api-v0-dht-provide\n        // ^ Docs say some response should be sent, but nothing is returned in\n        // current implementations.\n        //\n        // Returning null here so structured clone doesn't error trying to clone\n        // a stream.\n        () => null\n      )\n    ), opts),\n    query: expose('ipfs.dht.query', pre(\n      prePeerIdFromJson(0),\n      opts.pre('dht.query'),\n      post(\n        (...args) => getIpfs().dht.query(...args),\n        (res) => res.map((item) => isPeerInfo(item) ? peerInfoToJson(item) : item)\n      )\n    ), opts)\n  }\n}\n"]}