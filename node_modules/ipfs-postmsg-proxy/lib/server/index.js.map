{"version":3,"sources":["../../src/server/index.js"],"names":["closeProxyServer","getIpfs","opts","pre","preObj","fnName","ipfs","bitswap","block","bootstrap","config","dag","dht","dns","files","id","key","name","object","pin","pubsub","repo","resolve","stats","stop","swarm","version","Object","assign","obj","Promise","all","keys","map","k","close"],"mappings":"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","file":"index.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre } from 'prepost'\nimport createBitswap from './bitswap'\nimport createBlock from './block'\nimport createBootstrap from './bootstrap'\nimport createConfig from './config'\nimport createDag from './dag'\nimport createDht from './dht'\nimport createFiles from './files'\nimport createKey from './key'\nimport createLs from './ls'\nimport createName from './name'\nimport createObject from './object'\nimport createPin from './pin'\nimport createPing from './ping'\nimport createPubsub from './pubsub'\nimport createRepo from './repo'\nimport createStats from './stats'\nimport createSwarm from './swarm'\n\nexport default (getIpfs, opts) => {\n  opts = opts || {}\n\n  if (typeof opts.pre !== 'function') {\n    const preObj = opts.pre || {}\n    opts.pre = (fnName) => preObj[fnName]\n  }\n\n  const ipfs = {\n    bitswap: createBitswap(getIpfs, opts),\n    block: createBlock(getIpfs, opts),\n    bootstrap: createBootstrap(getIpfs, opts),\n    config: createConfig(getIpfs, opts),\n    dag: createDag(getIpfs, opts),\n    dht: createDht(getIpfs, opts),\n    dns: expose('ipfs.dns', pre(\n      opts.pre('dns'),\n      (...args) => getIpfs().dns(...args)\n    ), opts),\n    files: createFiles(getIpfs, opts),\n    id: expose('ipfs.id', pre(\n      opts.pre('id'),\n      () => getIpfs().id()\n    ), opts),\n    key: createKey(getIpfs, opts),\n    name: createName(getIpfs, opts),\n    object: createObject(getIpfs, opts),\n    pin: createPin(getIpfs, opts),\n    pubsub: createPubsub(getIpfs, opts),\n    repo: createRepo(getIpfs, opts),\n    resolve: expose('ipfs.resolve', pre(\n      opts.pre('resolve'),\n      (...args) => getIpfs().resolve(...args)\n    ), opts),\n    stats: createStats(getIpfs, opts),\n    stop: expose('ipfs.stop', pre(\n      opts.pre('stop'),\n      () => getIpfs().stop()\n    ), opts),\n    swarm: createSwarm(getIpfs, opts),\n    version: expose('ipfs.version', pre(\n      opts.pre('version'),\n      () => getIpfs().version()\n    ), opts)\n  }\n\n  Object.assign(\n    ipfs,\n    createLs(getIpfs, opts),\n    createPing(getIpfs, opts)\n  )\n\n  return ipfs\n}\n\nexport function closeProxyServer (obj) {\n  return Promise.all(\n    Object.keys(obj).map((k) => {\n      if (obj[k].close) return Promise.resolve(obj[k].close())\n      return Promise.resolve(closeProxyServer(obj[k]))\n    })\n  )\n}\n"]}