{"version":3,"sources":["../../src/server/bitswap.js"],"names":["getIpfs","opts","ledger","bitswap","reprovide","stat","stats","blocksReceived","dataReceived","blocksSent","dataSent","dupBlksReceived","dupDataReceived","unwant","wantlist"],"mappings":";;;;;;kBAIe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,YAAQ,wBAAO,qBAAP,EAA8B;AAAA;;AAAA,aAAa,8BAAUC,OAAV,EAAkBD,MAAlB,mCAAb;AAAA,KAA9B,EAA8ED,IAA9E,CADH;AAELG,eAAW,wBAAO,wBAAP,EAAiC;AAAA;;AAAA,aAAa,+BAAUD,OAAV,EAAkBC,SAAlB,oCAAb;AAAA,KAAjC,EAAoFH,IAApF,CAFN;AAGLI,UAAM,wBAAO,mBAAP,EAA4B,mBAChC;AAAA;;AAAA,aAAa,+BAAUF,OAAV,EAAkBE,IAAlB,oCAAb;AAAA,KADgC,EAEhC,UAACC,KAAD,EAAW;AACT,UAAIA,KAAJ,EAAW;AACT,YAAI,gBAAMA,MAAMC,cAAZ,CAAJ,EAAiC;AAC/BD,gBAAMC,cAAN,GAAuB,oBAAUD,MAAMC,cAAhB,CAAvB;AACD;;AAED,YAAI,gBAAMD,MAAME,YAAZ,CAAJ,EAA+B;AAC7BF,gBAAME,YAAN,GAAqB,oBAAUF,MAAME,YAAhB,CAArB;AACD;;AAED,YAAI,gBAAMF,MAAMG,UAAZ,CAAJ,EAA6B;AAC3BH,gBAAMG,UAAN,GAAmB,oBAAUH,MAAMG,UAAhB,CAAnB;AACD;;AAED,YAAI,gBAAMH,MAAMI,QAAZ,CAAJ,EAA2B;AACzBJ,gBAAMI,QAAN,GAAiB,oBAAUJ,MAAMI,QAAhB,CAAjB;AACD;;AAED,YAAI,gBAAMJ,MAAMK,eAAZ,CAAJ,EAAkC;AAChCL,gBAAMK,eAAN,GAAwB,oBAAUL,MAAMK,eAAhB,CAAxB;AACD;;AAED,YAAI,gBAAML,MAAMM,eAAZ,CAAJ,EAAkC;AAChCN,gBAAMM,eAAN,GAAwB,oBAAUN,MAAMM,eAAhB,CAAxB;AACD;AACF;;AAED,aAAON,KAAP;AACD,KA9B+B,CAA5B,EA+BHL,IA/BG,CAHD;AAmCLY,YAAQ,wBAAO,qBAAP,EAA8B;AAAA;;AAAA,aAAa,+BAAUV,OAAV,EAAkBU,MAAlB,oCAAb;AAAA,KAA9B,EAA8EZ,IAA9E,CAnCH;AAoCLa,cAAU,wBAAO,uBAAP,EAAgC;AAAA;;AAAA,aAAa,+BAAUX,OAAV,EAAkBW,QAAlB,oCAAb;AAAA,KAAhC,EAAkFb,IAAlF;AApCL,GAAP;AAsCD,C;;AA3CD;;AACA;;AACA","file":"bitswap.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { post } from 'prepost'\nimport { isBig, bigToJson } from '../serialization/big'\n\nexport default function (getIpfs, opts) {\n  return {\n    ledger: expose('ipfs.bitswap.ledger', (...args) => getIpfs().bitswap.ledger(...args), opts),\n    reprovide: expose('ipfs.bitswap.reprovide', (...args) => getIpfs().bitswap.reprovide(...args), opts),\n    stat: expose('ipfs.bitswap.stat', post(\n      (...args) => getIpfs().bitswap.stat(...args),\n      (stats) => {\n        if (stats) {\n          if (isBig(stats.blocksReceived)) {\n            stats.blocksReceived = bigToJson(stats.blocksReceived)\n          }\n\n          if (isBig(stats.dataReceived)) {\n            stats.dataReceived = bigToJson(stats.dataReceived)\n          }\n\n          if (isBig(stats.blocksSent)) {\n            stats.blocksSent = bigToJson(stats.blocksSent)\n          }\n\n          if (isBig(stats.dataSent)) {\n            stats.dataSent = bigToJson(stats.dataSent)\n          }\n\n          if (isBig(stats.dupBlksReceived)) {\n            stats.dupBlksReceived = bigToJson(stats.dupBlksReceived)\n          }\n\n          if (isBig(stats.dupDataReceived)) {\n            stats.dupDataReceived = bigToJson(stats.dupDataReceived)\n          }\n        }\n\n        return stats\n      }\n    ), opts),\n    unwant: expose('ipfs.bitswap.unwant', (...args) => getIpfs().bitswap.unwant(...args), opts),\n    wantlist: expose('ipfs.bitswap.wantlist', (...args) => getIpfs().bitswap.wantlist(...args), opts)\n  }\n}\n"]}