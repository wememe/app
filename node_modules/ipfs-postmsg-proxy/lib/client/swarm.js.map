{"version":3,"sources":["../../src/client/swarm.js"],"names":["opts","peers","callbackify","variadic","res","Promise","all","map","item","addr","peer","then","peerInfo","peerId","resolve","addrs","peerInfoFromJson","localAddrs","multiaddrFromJson","connect","disconnect"],"mappings":";;;;;;kBAOe,UAAUA,IAAV,EAAgB;AAC7B,SAAO;AACLC,WAAOC,sBAAYC,QAAZ,CACL,mBACE,wBAAO,kBAAP,EAA2BH,IAA3B,CADF,EAEE,UAACI,GAAD;AAAA,aAASC,QAAQC,GAAR,CACPF,IAAIG,GAAJ,CAAQ,UAACC,IAAD,EAAU;AAChBA,aAAKC,IAAL,GAAY,kCAAkBD,KAAKC,IAAvB,CAAZ;;AAEA;AACA,YAAI,0BAAeD,KAAKE,IAApB,CAAJ,EAA+B;AAC7B,iBAAO,4BAAiBF,KAAKE,IAAtB,EACJC,IADI,CACC,UAACC,QAAD,EAAc;AAClBJ,iBAAKE,IAAL,GAAYE,QAAZ;AACA,mBAAOJ,IAAP;AACD,WAJI,CAAP;AAKD,SAND,MAMO,IAAI,wBAAaA,KAAKE,IAAlB,CAAJ,EAA6B;AAClC,iBAAO,0BAAeF,KAAKE,IAApB,EACJC,IADI,CACC,UAACE,MAAD,EAAY;AAChBL,iBAAKE,IAAL,GAAYG,MAAZ;AACA,mBAAOL,IAAP;AACD,WAJI,CAAP;AAKD;;AAED,eAAOH,QAAQS,OAAR,CAAgBN,IAAhB,CAAP;AACD,OAnBD,CADO,CAAT;AAAA,KAFF,CADK,CADF;AA4BLO,WAAO,2BACL,mBACE,wBAAO,kBAAP,EAA2Bf,IAA3B,CADF,EAEE,UAACI,GAAD;AAAA,aAASC,QAAQC,GAAR,CAAYF,IAAIG,GAAJ,CAAQS,sBAAR,CAAZ,CAAT;AAAA,KAFF,CADK,CA5BF;AAkCLC,gBAAY,2BACV,mBACE,wBAAO,uBAAP,EAAgCjB,IAAhC,CADF,EAEE,UAACI,GAAD;AAAA,aAASA,IAAIG,GAAJ,CAAQW,4BAAR,CAAT;AAAA,KAFF,CADU,CAlCP;AAuCLC,aAASjB,sBAAYC,QAAZ,CACP,kBACE,6BAAgB,CAAhB,CADF,EAEE,mCAAmB,CAAnB,CAFF,EAGE,wBAAO,oBAAP,EAA6BH,IAA7B,CAHF,CADO,CAvCJ;AA8CLoB,gBAAYlB,sBAAYC,QAAZ,CACV,kBACE,6BAAgB,CAAhB,CADF,EAEE,mCAAmB,CAAnB,CAFF,EAGE,wBAAO,uBAAP,EAAgCH,IAAhC,CAHF,CADU;AA9CP,GAAP;AAsDD,C;;AA9DD;;AACA;;;;AACA;;AACA;;AACA;;AACA","file":"swarm.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { pre, post } from 'prepost'\nimport { peerInfoFromJson, peerIdFromJson, isPeerInfoJson, isPeerIdJson } from '../serialization/peer'\nimport { preMultiaddrToJson, multiaddrFromJson } from '../serialization/multiaddr'\nimport { preBufferToJson } from '../serialization/buffer'\n\nexport default function (opts) {\n  return {\n    peers: callbackify.variadic(\n      post(\n        caller('ipfs.swarm.peers', opts),\n        (res) => Promise.all(\n          res.map((item) => {\n            item.addr = multiaddrFromJson(item.addr)\n\n            // https://github.com/ipfs/js-ipfs/issues/1248\n            if (isPeerInfoJson(item.peer)) {\n              return peerInfoFromJson(item.peer)\n                .then((peerInfo) => {\n                  item.peer = peerInfo\n                  return item\n                })\n            } else if (isPeerIdJson(item.peer)) {\n              return peerIdFromJson(item.peer)\n                .then((peerId) => {\n                  item.peer = peerId\n                  return item\n                })\n            }\n\n            return Promise.resolve(item)\n          })\n        )\n      )\n    ),\n    addrs: callbackify(\n      post(\n        caller('ipfs.swarm.addrs', opts),\n        (res) => Promise.all(res.map(peerInfoFromJson))\n      )\n    ),\n    localAddrs: callbackify(\n      post(\n        caller('ipfs.swarm.localAddrs', opts),\n        (res) => res.map(multiaddrFromJson)\n      )),\n    connect: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preMultiaddrToJson(0),\n        caller('ipfs.swarm.connect', opts)\n      )\n    ),\n    disconnect: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preMultiaddrToJson(0),\n        caller('ipfs.swarm.disconnect', opts)\n      )\n    )\n  }\n}\n"]}