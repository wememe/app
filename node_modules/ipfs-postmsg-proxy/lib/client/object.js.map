{"version":3,"sources":["../../src/client/object.js"],"names":["opts","new","callbackify","variadic","res","put","args","Data","Object","assign","get","data","bufferFromJson","links","map","dagLinkFromJson","stat","patch","addLink","dagNodeFromJson","rmLink","appendData","setData"],"mappings":"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","file":"object.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { pre, post } from 'prepost'\nimport { isDagNodeJson, preDagNodeToJson, dagNodeFromJson, preDagLinkToJson, dagLinkFromJson } from '../serialization/dag'\nimport { preCidToJson } from '../serialization/cid'\nimport { isBuffer, bufferFromJson, bufferToJson, preBufferToJson } from '../serialization/buffer'\n\nexport default function (opts) {\n  return {\n    new: callbackify.variadic(\n      post(\n        caller('ipfs.object.new', opts),\n        (res) => isDagNodeJson(res) ? dagNodeFromJson(res) : res\n      )\n    ),\n    put: callbackify.variadic(\n      pre(\n        preDagNodeToJson(0),\n        preBufferToJson(0),\n        (...args) => {\n          if (args[0] && isBuffer(args[0].Data)) {\n            args[0] = Object.assign({}, args[0], { Data: bufferToJson(args[0].Data) })\n          }\n\n          return args\n        },\n        post(\n          caller('ipfs.object.put', opts),\n          (res) => isDagNodeJson(res) ? dagNodeFromJson(res) : res\n        )\n      )\n    ),\n    get: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.object.get', opts),\n          (res) => isDagNodeJson(res) ? dagNodeFromJson(res) : res\n        )\n      )\n    ),\n    data: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.object.data', opts),\n          bufferFromJson\n        )\n      )\n    ),\n    links: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.object.links', opts),\n          (res) => res.map(dagLinkFromJson)\n        )\n      )\n    ),\n    stat: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        caller('ipfs.object.stat', opts)\n      )\n    ),\n    patch: {\n      addLink: callbackify.variadic(\n        pre(\n          preBufferToJson(0),\n          preCidToJson(0),\n          preDagLinkToJson(1),\n          post(\n            caller('ipfs.object.patch.addLink', opts),\n            dagNodeFromJson\n          )\n        )\n      ),\n      rmLink: callbackify.variadic(\n        pre(\n          preBufferToJson(0),\n          preCidToJson(0),\n          preDagLinkToJson(1),\n          post(\n            caller('ipfs.object.patch.rmLink', opts),\n            dagNodeFromJson\n          )\n        )\n      ),\n      appendData: callbackify.variadic(\n        pre(\n          preBufferToJson(0),\n          preCidToJson(0),\n          preBufferToJson(1),\n          post(\n            caller('ipfs.object.patch.appendData', opts),\n            dagNodeFromJson\n          )\n        )\n      ),\n      setData: callbackify.variadic(\n        pre(\n          preBufferToJson(0),\n          preCidToJson(0),\n          preBufferToJson(1),\n          post(\n            caller('ipfs.object.patch.setData', opts),\n            dagNodeFromJson\n          )\n        )\n      )\n    }\n  }\n}\n"]}