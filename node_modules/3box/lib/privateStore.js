"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get3 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var KeyValueStore = require('./keyValueStore');

var utils = require('./utils/index');

var ENC_BLOCK_SIZE = 24;

var PrivateStore =
/*#__PURE__*/
function (_KeyValueStore) {
  (0, _inherits2.default)(PrivateStore, _KeyValueStore);

  function PrivateStore(muportDID, orbitdb, name, ensureConnected) {
    var _this;

    (0, _classCallCheck2.default)(this, PrivateStore);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(PrivateStore).call(this, orbitdb, name, ensureConnected));
    _this.muportDID = muportDID;
    _this._salt = _this._generateSalt();
    return _this;
  }

  (0, _createClass2.default)(PrivateStore, [{
    key: "get",
    value: function () {
      var _get2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(key) {
        var encryptedEntry;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0, _get3.default)((0, _getPrototypeOf2.default)(PrivateStore.prototype), "get", this).call(this, this._genDbKey(key));

              case 2:
                encryptedEntry = _context.sent;
                return _context.abrupt("return", encryptedEntry ? this._decryptEntry(encryptedEntry) : null);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function get(_x) {
        return _get2.apply(this, arguments);
      };
    }()
  }, {
    key: "set",
    value: function () {
      var _set = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(key, value) {
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                value = this._encryptEntry(value);
                key = this._genDbKey(key);
                return _context2.abrupt("return", (0, _get3.default)((0, _getPrototypeOf2.default)(PrivateStore.prototype), "set", this).call(this, key, value));

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function set(_x2, _x3) {
        return _set.apply(this, arguments);
      };
    }()
  }, {
    key: "remove",
    value: function () {
      var _remove = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3(key) {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                key = this._genDbKey(key);
                return _context3.abrupt("return", (0, _get3.default)((0, _getPrototypeOf2.default)(PrivateStore.prototype), "remove", this).call(this, key));

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function remove(_x4) {
        return _remove.apply(this, arguments);
      };
    }()
    /**
     * Returns array of underlying log entries. In linearized order according to their Lamport clocks.
     * Useful for generating a complete history of all operations on store. Key is hashed, so key is
     * not available from the private store.
     *
     *  @example
     *  const log = store.log
     *  const entry = log[0]
     *  console.log(entry)
     *  // { op: 'PUT', key: ...., value: 'Botbot', timeStamp: '1538575416068' }
     *
     * @return    {Array<Object>}     Array of ordered log entry objects
     */

  }, {
    key: "_generateSalt",
    value: function _generateSalt() {
      var saltData = this.muportDID.keyring.signingKey.deriveChild(0)._hdkey._privateKey.toString('hex');

      return utils.sha256(saltData);
    }
  }, {
    key: "_genDbKey",
    value: function _genDbKey(key) {
      return utils.sha256Multihash(this._salt + key);
    }
  }, {
    key: "_encryptEntry",
    value: function _encryptEntry(entry) {
      if (typeof entry === 'undefined') throw new Error('Entry to encrypt cannot be undefined');
      return this.muportDID.symEncrypt(this._pad(JSON.stringify(entry)));
    }
  }, {
    key: "_decryptEntry",
    value: function _decryptEntry(_ref) {
      var ciphertext = _ref.ciphertext,
          nonce = _ref.nonce;
      return JSON.parse(this._unpad(this.muportDID.symDecrypt(ciphertext, nonce)));
    }
  }, {
    key: "_pad",
    value: function _pad(val) {
      var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;
      var blockDiff = (blockSize - val.length % blockSize) % blockSize;
      return "".concat(val).concat('\0'.repeat(blockDiff));
    }
  }, {
    key: "_unpad",
    value: function _unpad(padded) {
      return padded.replace(/\0+$/, '');
    }
  }, {
    key: "log",
    get: function get() {
      var _this2 = this;

      return (0, _get3.default)((0, _getPrototypeOf2.default)(PrivateStore.prototype), "log", this).map(function (obj) {
        return Object.assign(obj, {
          value: obj.value ? _this2._decryptEntry(obj.value) : null
        });
      });
    }
  }]);
  return PrivateStore;
}(KeyValueStore);

module.exports = PrivateStore;