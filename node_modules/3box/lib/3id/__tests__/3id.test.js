"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var ThreeId = require('../index');

jest.mock('../../utils/index', function () {
  var sha256 = require('js-sha256').sha256;

  return {
    openBoxConsent: jest.fn(
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", '0x8726348762348723487238476238746827364872634876234876234');

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }))),
    openSpaceConsent: jest.fn(
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", '0x8ab87482987498387634985734987b9834598734597887070702535');

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }))),
    sha256Multihash: jest.fn(function (str) {
      if (str === 'did:muport:Qmsdsdf87g329') return 'ab8c73d8f';
      return 'b932fe7ab';
    }),
    sha256: sha256
  };
});
var ADDR_1 = '0x12345';
var ADDR_2 = '0xabcde';
var ADDR_1_STATE_1 = '{"managementAddress":"0x12345","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{}}';
var ADDR_1_STATE_2 = '{"managementAddress":"0x12345","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{"space1":"0xedfac8a7bcc52f33b88cfb9f310bc533f77800183beecfa49dcdf8d3b4b906502ec46533d9d7fb12eced9b04e0bdebd1c26872cf5fa759331e4c2f97ab95f450","space2":"0xedfac8a7bcc52f33b88cfb9f310bc533f77800183beecfa49dcdf8d3b4b906502ec46533d9d7fb12eced9b04e0bdebd1c26872cf5fa759331e4c2f97ab95f450"}}';
var ADDR_2_STATE = '{"managementAddress":"0xabcde","seed":"0xbc95bb0aeb7e5c7a9519ef066d4b60a944373ba1163b0c962a043bebec1579ef33e0ef4f63c0888d7a8ec95df34ada58fb739b2a4d3b44362747e6b193db9af2","spaceSeeds":{}}';
var SPACE_1 = 'space1';
var SPACE_2 = 'space2';
var ETHEREUM = 'mockEthProvider';

var mockedUtils = require('../../utils/index');

var ipfsMock = {
  files: {
    add: function () {
      var _add = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee3() {
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", [{
                  hash: 'Qmasd08j34t'
                }]);

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function add() {
        return _add.apply(this, arguments);
      };
    }()
  }
};
describe('3id', function () {
  var threeId;
  beforeEach(function () {
    mockedUtils.openBoxConsent.mockClear();
    mockedUtils.openSpaceConsent.mockClear();
  });
  describe('getIdFromEthAddress', function () {
    it('should create a new identity on first call',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4() {
      var opts;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context4.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfsMock, opts);

            case 3:
              threeId = _context4.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_1);
              expect(threeId.getDid()).toEqual('did:muport:Qmasd08j34t');
              expect(opts.consentCallback).toHaveBeenCalledWith(true);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(1);

            case 8:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    })));
    it('should create a new identity for other eth addr',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      var opts;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context5.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_2, ETHEREUM, ipfsMock, opts);

            case 3:
              threeId = _context5.sent;
              expect(threeId.serializeState()).toEqual(ADDR_2_STATE);
              expect(opts.consentCallback).toHaveBeenCalledWith(true);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(1);

            case 7:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    })));
    it('should get identity from storage on subsequent calls to existing identity',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var opts;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              opts = {
                consentCallback: jest.fn()
              };
              _context6.next = 3;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfsMock, opts);

            case 3:
              threeId = _context6.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_1);
              expect(opts.consentCallback).toHaveBeenCalledWith(false);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);

            case 7:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    })));
  });
  describe('keyring logic', function () {
    it('should get main keyring using rootStore/public/private name',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee7() {
      var fingerprint, kr;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              fingerprint = threeId.muportFingerprint;
              kr = threeId.getKeyringBySpaceName(fingerprint + '.root');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);
              kr = threeId.getKeyringBySpaceName(fingerprint + '.public');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);
              kr = threeId.getKeyringBySpaceName(fingerprint + '.private');
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_1).seed);

            case 7:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    })));
    it('should init space keyrings correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee8() {
      var requiredConsent;
      return _regenerator.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return threeId.initKeyringByName(SPACE_1);

            case 2:
              requiredConsent = _context8.sent;
              expect(requiredConsent).toEqual(true);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(1);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledWith(ADDR_1, ETHEREUM, SPACE_1);
              _context8.next = 8;
              return threeId.initKeyringByName(SPACE_2);

            case 8:
              requiredConsent = _context8.sent;
              expect(requiredConsent).toEqual(true);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(2);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledWith(ADDR_1, ETHEREUM, SPACE_2);
              _context8.next = 14;
              return threeId.initKeyringByName(SPACE_2);

            case 14:
              requiredConsent = _context8.sent;
              expect(requiredConsent).toEqual(false);
              expect(mockedUtils.openSpaceConsent).toHaveBeenCalledTimes(2);

            case 17:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    })));
    it('should get space keyrings correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee9() {
      var kr;
      return _regenerator.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              kr = threeId.getKeyringBySpaceName("3box.space.".concat(SPACE_1, ".keyvalue"));
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_2).spaceSeeds[SPACE_1]);
              kr = threeId.getKeyringBySpaceName("3box.space.".concat(SPACE_2, ".keyvalue"));
              expect(kr._seed).toEqual(JSON.parse(ADDR_1_STATE_2).spaceSeeds[SPACE_2]);

            case 4:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    })));
    it('should get identity with spaces automatically initialized',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee10() {
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return ThreeId.getIdFromEthAddress(ADDR_1, ETHEREUM, ipfsMock);

            case 2:
              threeId = _context10.sent;
              expect(threeId.serializeState()).toEqual(ADDR_1_STATE_2);
              expect(mockedUtils.openBoxConsent).toHaveBeenCalledTimes(0);

            case 5:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    })));
  });
  describe('login/out logic', function () {
    it('should be logged in',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee11() {
      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              expect(ThreeId.isLoggedIn(ADDR_1)).toEqual(true);

            case 1:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    })));
    it('should log out correctly',
    /*#__PURE__*/
    (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee12() {
      return _regenerator.default.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              threeId.logout();
              expect(ThreeId.isLoggedIn(ADDR_1)).toEqual(false);

            case 2:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this);
    })));
  });
});