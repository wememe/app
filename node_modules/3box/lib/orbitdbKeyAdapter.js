"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var EC = require('elliptic').ec;

var ec = new EC('secp256k1');

var OrbitdbKeyStore =
/*#__PURE__*/
function () {
  function OrbitdbKeyStore(muport) {
    (0, _classCallCheck2.default)(this, OrbitdbKeyStore);
    this._muport = muport;
  }

  (0, _createClass2.default)(OrbitdbKeyStore, [{
    key: "createKey",
    value: function createKey() {
      return this.getKey();
    }
  }, {
    key: "getKey",
    value: function getKey() {
      return ec.keyFromPrivate(this._muport.keyring.signingKey._hdkey._privateKey);
    }
  }, {
    key: "generateKey",
    value: function generateKey() {
      return Promise.resolve(ec.genKeyPair());
    }
  }, {
    key: "exportPublicKey",
    value: function exportPublicKey(key) {
      return Promise.resolve(key.getPublic('hex'));
    }
  }, {
    key: "exportPrivateKey",
    value: function exportPrivateKey(key) {
      return Promise.resolve(key.getPrivate('hex'));
    }
  }, {
    key: "importPublicKey",
    value: function importPublicKey(key) {
      return Promise.resolve(ec.keyFromPublic(key, 'hex'));
    }
  }, {
    key: "importPrivateKey",
    value: function importPrivateKey(key) {
      return Promise.resolve(ec.keyFromPrivate(key, 'hex'));
    }
  }, {
    key: "sign",
    value: function sign(key, data) {
      var sig = ec.sign(data, key);
      return Promise.resolve(sig.toDER('hex'));
    }
  }, {
    key: "verify",
    value: function verify(signature, key, data) {
      var res = false;
      res = ec.verify(data, signature, key);
      return Promise.resolve(res);
    }
  }]);
  return OrbitdbKeyStore;
}();

module.exports = OrbitdbKeyStore;