"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');

var Multihash = require('multihashes');

var sha256 = require('js-sha256').sha256;

module.exports = {
  openBoxConsent: function openBoxConsent(fromAddress, ethereum) {
    var text = 'This app wants to view and update your 3Box profile.';
    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');
    var params = [msg, fromAddress];
    var method = 'personal_sign';
    return new Promise(function (resolve, reject) {
      ethereum.sendAsync({
        method: method,
        params: params,
        fromAddress: fromAddress
      }, function (err, result) {
        if (err) reject(err);
        if (result.error) reject(result.error);
        resolve(result.result);
      });
    });
  },
  getLinkConsent: function getLinkConsent(fromAddress, toDID, ethereum) {
    var text = 'Create a new 3Box profile' + '\n\n' + '- \n' + 'Your unique profile ID is ' + toDID;
    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');
    var params = [msg, fromAddress];
    var method = 'personal_sign';
    return new Promise(function (resolve, reject) {
      ethereum.sendAsync({
        method: method,
        params: params,
        fromAddress: fromAddress
      }, function (err, result) {
        if (err) reject(err);
        if (result.error) reject(result.error);
        var out = {
          msg: text,
          sig: result.result
        };
        resolve(out);
      });
    });
  },
  fetchJson: function () {
    var _fetchJson = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(url, body) {
      var opts;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (body) {
                opts = {
                  body: JSON.stringify(body),
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                };
              }

              _context.next = 3;
              return fetch(url, opts);

            case 3:
              return _context.abrupt("return", _context.sent.json());

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function fetchJson(_x, _x2) {
      return _fetchJson.apply(this, arguments);
    };
  }(),
  fetchText: function () {
    var _fetchText = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(url, opts) {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return fetch(url, opts);

            case 2:
              return _context2.abrupt("return", _context2.sent.text());

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function fetchText(_x3, _x4) {
      return _fetchText.apply(this, arguments);
    };
  }(),
  sha256Multihash: function sha256Multihash(str) {
    var digest = Buffer.from(sha256.digest(str));
    return Multihash.encode(digest, 'sha2-256').toString('hex');
  },
  sha256: sha256
};