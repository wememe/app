"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var graphQLRequest = require('graphql-request').request;

var utils = require('./utils/index');

var verifier = require('./utils/verifier');

var config = require('./config.js');

var GRAPHQL_SERVER_URL = config.graphql_server_url;
var PROFILE_SERVER_URL = config.profile_server_url;
var ADDRESS_SERVER_URL = config.address_server_url;

function getRootStoreAddress(_x) {
  return _getRootStoreAddress.apply(this, arguments);
}

function _getRootStoreAddress() {
  _getRootStoreAddress = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(identifier) {
    var serverUrl,
        res,
        _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            serverUrl = _args.length > 1 && _args[1] !== undefined ? _args[1] : ADDRESS_SERVER_URL;
            _context.next = 3;
            return utils.fetchJson(serverUrl + '/odbAddress/' + identifier);

          case 3:
            res = _context.sent;

            if (!(res.status === 'success')) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", res.data.rootStoreAddress);

          case 8:
            throw new Error(res.message);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _getRootStoreAddress.apply(this, arguments);
}

function getProfile(_x2) {
  return _getProfile.apply(this, arguments);
}

function _getProfile() {
  _getProfile = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(address) {
    var serverUrl,
        _args3 = arguments;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            serverUrl = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : PROFILE_SERVER_URL;
            return _context3.abrupt("return", new Promise(
            /*#__PURE__*/
            function () {
              var _ref = (0, _asyncToGenerator2.default)(
              /*#__PURE__*/
              _regenerator.default.mark(function _callee2(resolve, reject) {
                var res;
                return _regenerator.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return utils.fetchJson(serverUrl + '/profile?address=' + encodeURIComponent(address));

                      case 3:
                        res = _context2.sent;
                        resolve(res);
                        _context2.next = 10;
                        break;

                      case 7:
                        _context2.prev = 7;
                        _context2.t0 = _context2["catch"](0);
                        reject(_context2.t0);

                      case 10:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this, [[0, 7]]);
              }));

              return function (_x6, _x7) {
                return _ref.apply(this, arguments);
              };
            }()));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _getProfile.apply(this, arguments);
}

function getProfiles(_x3) {
  return _getProfiles.apply(this, arguments);
}

function _getProfiles() {
  _getProfiles = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(addressArray) {
    var opts,
        req,
        url,
        _args4 = arguments;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            opts = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
            opts = Object.assign({
              profileServer: PROFILE_SERVER_URL
            }, opts);
            req = {
              addressList: addressArray
            };
            url = "".concat(opts.profileServer, "/profileList");
            return _context4.abrupt("return", utils.fetchJson(url, req));

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _getProfiles.apply(this, arguments);
}

function profileGraphQL(_x4) {
  return _profileGraphQL.apply(this, arguments);
}

function _profileGraphQL() {
  _profileGraphQL = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee5(query) {
    var opts,
        _args5 = arguments;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            opts = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
            opts = Object.assign({
              graphqlServer: GRAPHQL_SERVER_URL
            }, opts);
            return _context5.abrupt("return", graphQLRequest(opts.graphqlServer, query));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _profileGraphQL.apply(this, arguments);
}

function getVerifiedAccounts(_x5) {
  return _getVerifiedAccounts.apply(this, arguments);
}

function _getVerifiedAccounts() {
  _getVerifiedAccounts = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee6(profile) {
    var verifs, did;
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            verifs = {};
            _context6.prev = 1;
            _context6.next = 4;
            return verifier.verifyDID(profile.proof_did);

          case 4:
            did = _context6.sent;

            if (!profile.proof_github) {
              _context6.next = 14;
              break;
            }

            _context6.prev = 6;
            _context6.next = 9;
            return verifier.verifyGithub(did, profile.proof_github);

          case 9:
            verifs.github = _context6.sent;
            _context6.next = 14;
            break;

          case 12:
            _context6.prev = 12;
            _context6.t0 = _context6["catch"](6);

          case 14:
            if (!profile.proof_twitter) {
              _context6.next = 23;
              break;
            }

            _context6.prev = 15;
            _context6.next = 18;
            return verifier.verifyTwitter(did, profile.proof_twitter);

          case 18:
            verifs.twitter = _context6.sent;
            _context6.next = 23;
            break;

          case 21:
            _context6.prev = 21;
            _context6.t1 = _context6["catch"](15);

          case 23:
            _context6.next = 27;
            break;

          case 25:
            _context6.prev = 25;
            _context6.t2 = _context6["catch"](1);

          case 27:
            return _context6.abrupt("return", verifs);

          case 28:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this, [[1, 25], [6, 12], [15, 21]]);
  }));
  return _getVerifiedAccounts.apply(this, arguments);
}

module.exports = {
  profileGraphQL: profileGraphQL,
  getProfile: getProfile,
  getRootStoreAddress: getRootStoreAddress,
  getProfiles: getProfiles,
  getVerifiedAccounts: getVerifiedAccounts
};