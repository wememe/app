{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar retry = require('async/retry');\n\nvar toUri = require('multiaddr-to-uri');\n\nvar debug = require('debug');\n\nvar CID = require('cids');\n\nvar preload = require('./runtime/preload-nodejs');\n\nvar log = debug('jsipfs:preload');\nlog.error = debug('jsipfs:preload:error');\n\nvar noop = function noop(err) {\n  if (err) log.error(err);\n};\n\nmodule.exports = function (self) {\n  var options = self._options.preload || {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n\n  if (!options.enabled || !options.addresses.length) {\n    var _api = function _api(_, callback) {\n      if (callback) {\n        setImmediate(function () {\n          return callback();\n        });\n      }\n    };\n\n    _api.start = function () {};\n\n    _api.stop = function () {};\n\n    return _api;\n  }\n\n  var stopped = true;\n  var requests = [];\n  var apiUris = options.addresses.map(apiAddrToUri);\n\n  var api = function api(cid, callback) {\n    callback = callback || noop;\n\n    if (typeof cid !== 'string') {\n      try {\n        cid = new CID(cid).toBaseEncodedString();\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(err);\n        });\n      }\n    }\n\n    var fallbackApiUris = Array.from(apiUris);\n    var request;\n    var now = Date.now();\n    retry({\n      times: fallbackApiUris.length\n    }, function (cb) {\n      if (stopped) return cb(new Error(\"preload aborted for \".concat(cid))); // Remove failed request from a previous attempt\n\n      requests = requests.filter(function (r) {\n        return r !== request;\n      });\n      var apiUri = fallbackApiUris.shift();\n      request = preload(\"\".concat(apiUri, \"/api/v0/refs?r=true&arg=\").concat(cid), cb);\n      requests = requests.concat(request);\n    }, function (err) {\n      requests = requests.filter(function (r) {\n        return r !== request;\n      });\n\n      if (err) {\n        return callback(err);\n      }\n\n      log(\"preloaded \".concat(cid, \" in \").concat(Date.now() - now, \"ms\"));\n      callback();\n    });\n  };\n\n  api.start = function () {\n    stopped = false;\n  };\n\n  api.stop = function () {\n    stopped = true;\n    log(\"canceling \".concat(requests.length, \" pending preload request(s)\"));\n    requests.forEach(function (r) {\n      return r.cancel();\n    });\n    requests = [];\n  };\n\n  return api;\n};\n\nfunction apiAddrToUri(addr) {\n  if (!(addr.endsWith('http') || addr.endsWith('https'))) {\n    addr = addr + '/http';\n  }\n\n  return toUri(addr);\n}","map":null,"metadata":{},"sourceType":"script"}