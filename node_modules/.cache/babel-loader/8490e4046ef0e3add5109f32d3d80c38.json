{"ast":null,"code":"/* Copyright (c) 2017 Rod Vagg, MIT License */\nfunction AbstractIterator(db) {\n  this.db = db;\n  this._ended = false;\n  this._nexting = false;\n}\n\nAbstractIterator.prototype.next = function (callback) {\n  var self = this;\n\n  if (typeof callback !== 'function') {\n    throw new Error('next() requires a callback argument');\n  }\n\n  if (self._ended) {\n    process.nextTick(callback, new Error('cannot call next() after end()'));\n    return self;\n  }\n\n  if (self._nexting) {\n    process.nextTick(callback, new Error('cannot call next() before previous next() has completed'));\n    return self;\n  }\n\n  self._nexting = true;\n\n  self._next(function () {\n    self._nexting = false;\n    callback.apply(null, arguments);\n  });\n\n  return self;\n};\n\nAbstractIterator.prototype._next = function (callback) {\n  process.nextTick(callback);\n};\n\nAbstractIterator.prototype.end = function (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('end() requires a callback argument');\n  }\n\n  if (this._ended) {\n    return process.nextTick(callback, new Error('end() already called on iterator'));\n  }\n\n  this._ended = true;\n\n  this._end(callback);\n};\n\nAbstractIterator.prototype._end = function (callback) {\n  process.nextTick(callback);\n};\n\nmodule.exports = AbstractIterator;","map":null,"metadata":{},"sourceType":"script"}