{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar SmartBuffer = require('smart-buffer').SmartBuffer;\n\nvar gitUtil = require('./util');\n\nexports = module.exports;\n\nexports.serialize = function (dagNode, callback) {\n  var entries = [];\n  Object.keys(dagNode).forEach(function (name) {\n    entries.push([name, dagNode[name]]);\n  });\n  entries.sort(function (a, b) {\n    return a[0] > b[0] ? 1 : -1;\n  });\n  var buf = new SmartBuffer();\n  entries.forEach(function (entry) {\n    buf.writeStringNT(entry[1].mode + ' ' + entry[0]);\n    buf.writeBuffer(gitUtil.cidToSha(entry[1].hash['/']));\n  });\n  var outBuf = new SmartBuffer();\n  outBuf.writeString('tree ');\n  outBuf.writeString(buf.length.toString());\n  outBuf.writeUInt8(0);\n  outBuf.writeBuffer(buf.toBuffer());\n  setImmediate(function () {\n    return callback(null, outBuf.toBuffer());\n  });\n};\n\nexports.deserialize = function (data, callback) {\n  var res = {};\n  var buf = SmartBuffer.fromBuffer(data, 'utf8');\n\n  for (;;) {\n    var modeName = buf.readStringNT();\n\n    if (modeName === '') {\n      break;\n    }\n\n    var hash = buf.readBuffer(gitUtil.SHA1_LENGTH);\n    var modNameMatched = modeName.match(/^(\\d+) (.+)$/);\n\n    if (!modNameMatched) {\n      setImmediate(function () {\n        return callback(new Error('invalid file mode/name'));\n      });\n    }\n\n    if (res[modNameMatched[2]]) {\n      setImmediate(function () {\n        return callback(new Error('duplicate file in tree'));\n      });\n    }\n\n    res[modNameMatched[2]] = {\n      mode: modNameMatched[1],\n      hash: {\n        '/': gitUtil.shaToCid(hash)\n      }\n    };\n  }\n\n  setImmediate(function () {\n    return callback(null, res);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}