{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport contractMap from 'eth-contract-metadata';\nimport abiDecoder from 'abi-decoder';\nimport { toChecksumAddress } from 'ethereumjs-util';\nimport * as routes from './routes';\nimport { store } from '../state/store';\nexport var normalizeURL = function normalizeURL(pathname) {\n  var lowercasePathname = pathname.toLowerCase();\n  var fuzzyLowercasePathname = lowercasePathname.charAt(lowercasePathname.length - 1) === '/' ? lowercasePathname.slice(0, -1) : lowercasePathname;\n  return fuzzyLowercasePathname;\n};\nexport var matchProtectedRoutes = function matchProtectedRoutes(normalizedPath) {\n  if (normalizedPath === routes.ACTIVITY || normalizedPath === routes.DETAILS || normalizedPath === routes.EDIT) {\n    return true;\n  }\n\n  return false;\n};\nexport var addhttp = function addhttp(url) {\n  var correctedURL;\n\n  if (!/^(?:f|ht)tps?\\:\\/\\//.test(url)) {\n    correctedURL = \"http://\".concat(url);\n  } else {\n    correctedURL = url;\n  }\n\n  return correctedURL;\n};\nexport function getContract(_x) {\n  return _getContract.apply(this, arguments);\n}\n\nfunction _getContract() {\n  _getContract = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(otherAddress) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"https://api.etherscan.io/api?module=contract&action=getabi&address=\".concat(otherAddress, \"&apikey=\").concat(process.env.ETHERSCAN_TOKEN));\n\n          case 2:\n            response = _context2.sent;\n\n            if (!(response.status !== 200)) {\n              _context2.next = 6;\n              break;\n            }\n\n            console.log(\"Looks like there was a problem. Status Code: \".concat(response.status));\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            _context2.next = 8;\n            return response.json();\n\n          case 8:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _getContract.apply(this, arguments);\n}\n\n;\nexport var imageElFor = function imageElFor(address) {\n  var contractMetaData = contractMap[toChecksumAddress(address)];\n\n  if (!contractMetaData || !('logo' in contractMetaData)) {\n    return false;\n  } // this isnt necessary\n\n\n  var fileName = contractMetaData.logo;\n  var path = \"/contractIcons/\".concat(fileName);\n  var contractImg = document.createElement('img');\n  contractImg.src = path;\n  contractImg.style.width = '100%';\n  return [contractImg, contractMetaData];\n};\nexport function getPublicProfile(_x2) {\n  return _getPublicProfile.apply(this, arguments);\n}\n\nfunction _getPublicProfile() {\n  _getPublicProfile = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(graphqlQueryObject) {\n    var profile;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return Box.profileGraphQL(graphqlQueryObject);\n\n          case 2:\n            profile = _context3.sent;\n            return _context3.abrupt(\"return\", profile);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _getPublicProfile.apply(this, arguments);\n}\n\n;\n\nvar fireDispatch = function fireDispatch(publicProfileAddress, feedByAddress) {\n  if (publicProfileAddress) {\n    store.dispatch({\n      type: 'GET_PUBLIC_PROFILE_ACTIVITY',\n      publicProfileActivity: feedByAddress,\n      ifFetchingActivity: false\n    });\n  } else {\n    store.dispatch({\n      type: 'UPDATE_ACTIVITY',\n      feedByAddress: feedByAddress,\n      ifFetchingActivity: false,\n      isLoggedIn: true\n    });\n  }\n};\n\nexport var updateFeed = function updateFeed(publicProfileAddress, feedByAddress, addressData, isContract) {\n  console.log('addressData', addressData);\n  var contractArray = [];\n  var counter = 0;\n  feedByAddress.map(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(txGroup, i) {\n      var otherAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              otherAddress = Object.keys(txGroup)[0];\n\n              if (isContract[otherAddress]) {\n                // then address is contract\n                abiDecoder.addABI(addressData[otherAddress].contractData);\n                txGroup[otherAddress].map(function (lineItem, index) {\n                  var methodCall = abiDecoder.decodeMethod(txGroup[otherAddress][index].input);\n                  lineItem.methodCall = methodCall && methodCall.name && (methodCall.name.charAt(0).toUpperCase() + methodCall.name.slice(1)).replace(/([A-Z])/g, ' $1').trim();\n                });\n                contractArray = imageElFor(otherAddress);\n                feedByAddress[i].metaData = {\n                  contractImg: contractArray.length > 0 && contractArray[0],\n                  contractDetails: contractArray.length > 0 && contractArray[1] // contractData,\n\n                };\n                counter += 1;\n                if (counter === feedByAddress.length) fireDispatch(publicProfileAddress, feedByAddress);\n              } else {\n                // look for 3box metadata\n                feedByAddress[i].metaData = {\n                  name: addressData && addressData[otherAddress] && addressData[otherAddress].name,\n                  image: addressData && addressData[otherAddress] && addressData[otherAddress].image\n                };\n                counter += 1;\n                console.log('counter profile', counter);\n                if (counter === feedByAddress.length) fireDispatch(publicProfileAddress, feedByAddress);\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/utils/funcs.js"],"names":["contractMap","abiDecoder","toChecksumAddress","routes","store","normalizeURL","pathname","lowercasePathname","toLowerCase","fuzzyLowercasePathname","charAt","length","slice","matchProtectedRoutes","normalizedPath","ACTIVITY","DETAILS","EDIT","addhttp","url","correctedURL","test","getContract","otherAddress","fetch","process","env","ETHERSCAN_TOKEN","response","status","console","log","json","data","imageElFor","address","contractMetaData","fileName","logo","path","contractImg","document","createElement","src","style","width","getPublicProfile","graphqlQueryObject","Box","profileGraphQL","profile","fireDispatch","publicProfileAddress","feedByAddress","dispatch","type","publicProfileActivity","ifFetchingActivity","isLoggedIn","updateFeed","addressData","isContract","contractArray","counter","map","txGroup","i","Object","keys","addABI","contractData","lineItem","index","methodCall","decodeMethod","input","name","toUpperCase","replace","trim","metaData","contractDetails","image"],"mappings":"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","sourcesContent":["import contractMap from 'eth-contract-metadata';\nimport abiDecoder from 'abi-decoder';\nimport {\n  toChecksumAddress,\n} from 'ethereumjs-util';\n\nimport * as routes from './routes';\nimport {\n  store\n} from '../state/store';\n\nexport const normalizeURL = (pathname) => {\n  const lowercasePathname = pathname.toLowerCase();\n  const fuzzyLowercasePathname = lowercasePathname.charAt(lowercasePathname.length - 1) === '/' ?\n    lowercasePathname.slice(0, -1) :\n    lowercasePathname;\n\n  return fuzzyLowercasePathname;\n};\n\nexport const matchProtectedRoutes = (normalizedPath) => {\n  if (normalizedPath === routes.ACTIVITY ||\n    normalizedPath === routes.DETAILS ||\n    normalizedPath === routes.EDIT) {\n    return true;\n  }\n  return false;\n};\n\nexport const addhttp = (url) => {\n  let correctedURL;\n  if (!/^(?:f|ht)tps?\\:\\/\\//.test(url)) {\n    correctedURL = `http://${url}`;\n  } else {\n    correctedURL = url;\n  }\n  return correctedURL;\n};\n\nexport async function getContract(otherAddress) {\n  // limit to five calls a second\n  const response = await fetch(`https://api.etherscan.io/api?module=contract&action=getabi&address=${otherAddress}&apikey=${process.env.ETHERSCAN_TOKEN}`);\n  if (response.status !== 200) {\n    console.log(`Looks like there was a problem. Status Code: ${response.status}`);\n    return;\n  }\n  const data = await response.json();\n  // only proceed once second promise is resolved\n  return data;\n};\n\nexport const imageElFor = (address) => {\n  const contractMetaData = contractMap[toChecksumAddress(address)];\n  if (!contractMetaData || (!('logo' in contractMetaData))) {\n    return false;\n  }\n  // this isnt necessary\n  const fileName = contractMetaData.logo;\n  const path = `/contractIcons/${fileName}`;\n  const contractImg = document.createElement('img');\n  contractImg.src = path;\n  contractImg.style.width = '100%';\n  return [contractImg, contractMetaData];\n};\n\nexport async function getPublicProfile(graphqlQueryObject) {\n  // let profile;\n  // try {\n  const profile = await Box.profileGraphQL(graphqlQueryObject); // eslint-disable-line no-undef\n  // } catch (err) {\n  //   // console.log(err);\n  // }\n  // return profile;\n  return profile;\n};\n\nconst fireDispatch = (publicProfileAddress, feedByAddress) => {\n  if (publicProfileAddress) {\n    store.dispatch({\n      type: 'GET_PUBLIC_PROFILE_ACTIVITY',\n      publicProfileActivity: feedByAddress,\n      ifFetchingActivity: false,\n    });\n  } else {\n    store.dispatch({\n      type: 'UPDATE_ACTIVITY',\n      feedByAddress,\n      ifFetchingActivity: false,\n      isLoggedIn: true,\n    });\n  }\n}\n\nexport const updateFeed = (publicProfileAddress, feedByAddress, addressData, isContract) => {\n  console.log('addressData', addressData);\n  let contractArray = [];\n  let counter = 0;\n\n  feedByAddress.map(async (txGroup, i) => {\n    const otherAddress = Object.keys(txGroup)[0];\n    if (isContract[otherAddress]) { // then address is contract\n      abiDecoder.addABI(addressData[otherAddress].contractData);\n      txGroup[otherAddress].map((lineItem, index) => {\n        const methodCall = abiDecoder.decodeMethod(txGroup[otherAddress][index].input);\n        lineItem.methodCall = methodCall && methodCall.name && (methodCall.name.charAt(0).toUpperCase() + methodCall.name.slice(1)).replace(/([A-Z])/g, ' $1').trim();\n      });\n      contractArray = imageElFor(otherAddress);\n      feedByAddress[i].metaData = {\n        contractImg: contractArray.length > 0 && contractArray[0],\n        contractDetails: contractArray.length > 0 && contractArray[1],\n        // contractData,\n      };\n      counter += 1;\n      if (counter === feedByAddress.length) fireDispatch(publicProfileAddress, feedByAddress);\n    } else { // look for 3box metadata\n      feedByAddress[i].metaData = {\n        name: addressData && addressData[otherAddress] && addressData[otherAddress].name,\n        image: addressData && addressData[otherAddress] && addressData[otherAddress].image,\n      };\n      counter += 1;\n      console.log('counter profile', counter);\n      if (counter === feedByAddress.length) fireDispatch(publicProfileAddress, feedByAddress);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}