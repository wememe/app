{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar verifier = require('./utils/verifier');\n\nvar Verified =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Please use **box.verified** to get the instance of this class\n   */\n  function Verified(box) {\n    (0, _classCallCheck2.default)(this, Verified);\n    this._box = box;\n    this._did = box._muportDID.getDid();\n  }\n\n  (0, _createClass2.default)(Verified, [{\n    key: \"_addVerifiedPublicAccount\",\n    value: function () {\n      var _addVerifiedPublicAccount2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(key, proof, verificationFunction) {\n        var account;\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return verificationFunction(this._did, proof);\n\n              case 2:\n                account = _context.sent;\n                _context.next = 5;\n                return this._box.public.set('proof_' + key, proof);\n\n              case 5:\n                return _context.abrupt(\"return\", account);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function _addVerifiedPublicAccount(_x, _x2, _x3) {\n        return _addVerifiedPublicAccount2.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"_getVerifiedPublicAccount\",\n    value: function () {\n      var _getVerifiedPublicAccount2 = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee2(key, verificationFunction) {\n        var proof;\n        return _regenerator.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._box.public.get('proof_' + key);\n\n              case 2:\n                proof = _context2.sent;\n                return _context2.abrupt(\"return\", verificationFunction(this._did, proof));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function _getVerifiedPublicAccount(_x4, _x5) {\n        return _getVerifiedPublicAccount2.apply(this, arguments);\n      };\n    }()\n    /**\n     * Returns the verified DID of the user\n     *\n     * @return    {String}                            The DID of the user\n     */\n\n  }, {\n    key: \"DID\",\n    value: function () {\n      var _DID = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee3() {\n        return _regenerator.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this._did);\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function DID() {\n        return _DID.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verifies that the user has a valid github account\n     * Throws an error otherwise.\n     *\n     * @return    {Object}                            Object containing username, and proof\n     */\n\n  }, {\n    key: \"github\",\n    value: function () {\n      var _github = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee4() {\n        return _regenerator.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this._getVerifiedPublicAccount('github', verifier.verifyGithub));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function github() {\n        return _github.apply(this, arguments);\n      };\n    }()\n    /**\n     * Adds a github verification to the users profile\n     * Throws an error if the verification fails.\n     *\n     * @param     {Object}            gistUrl         URL of the proof\n     * @return    {Object}                            Object containing username, and proof\n     */\n\n  }, {\n    key: \"addGithub\",\n    value: function () {\n      var _addGithub = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee5(gistUrl) {\n        return _regenerator.default.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this._addVerifiedPublicAccount('github', gistUrl, verifier.verifyGithub));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function addGithub(_x6) {\n        return _addGithub.apply(this, arguments);\n      };\n    }()\n    /**\n     * Verifies that the user has a valid twitter account\n     * Throws an error otherwise.\n     *\n     * @return    {Object}                            Object containing username, proof, and the verifier\n     */\n\n  }, {\n    key: \"twitter\",\n    value: function () {\n      var _twitter = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee6() {\n        return _regenerator.default.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this._getVerifiedPublicAccount('twitter', verifier.verifyTwitter));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function twitter() {\n        return _twitter.apply(this, arguments);\n      };\n    }()\n    /**\n     * Adds a twitter verification to the users profile\n     * Throws an error if the verification fails.\n     *\n     * @param     {String}            claim           A did-JWT claim ownership of a twitter username\n     * @return    {Object}                            Object containing username, proof, and the verifier\n     */\n\n  }, {\n    key: \"addTwitter\",\n    value: function () {\n      var _addTwitter = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee7(claim) {\n        return _regenerator.default.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this._addVerifiedPublicAccount('twitter', claim, verifier.verifyTwitter));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function addTwitter(_x7) {\n        return _addTwitter.apply(this, arguments);\n      };\n    }()\n  }]);\n  return Verified;\n}();\n\nmodule.exports = Verified;","map":null,"metadata":{},"sourceType":"script"}