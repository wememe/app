{"ast":null,"code":"'use strict';\n\nvar $ = require('../util/preconditions');\n\nvar buffer = require('buffer');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar G1_PREFIX_MASK = 0x02;\nvar G2_PREFIX_MASK = 0x0a;\n\nfunction CompressedG1(params) {\n  if (!(this instanceof CompressedG1)) {\n    return new CompressedG1(params);\n  }\n\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nCompressedG1.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var pt = new CompressedG1();\n  return pt._fromObject(obj);\n};\n\nCompressedG1.prototype._fromObject = function (params) {\n  this.y_lsb = params.y_lsb;\n  this.x = new buffer.Buffer(params.x, 'hex');\n  return this;\n};\n\nCompressedG1.prototype.toObject = CompressedG1.prototype.toJSON = function toObject() {\n  var obj = {\n    y_lsb: this.y_lsb,\n    x: this.x.toString('hex')\n  };\n  return obj;\n};\n\nCompressedG1.fromBufferReader = function (br) {\n  var pt = new CompressedG1();\n  var y_lsb = br.readUInt8();\n  pt.y_lsb = y_lsb & 1;\n  pt.x = br.read(32);\n  return pt;\n};\n\nCompressedG1.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n\n  writer.writeUInt8(G1_PREFIX_MASK | this.y_lsb);\n  writer.write(this.x);\n  return writer;\n};\n\nfunction CompressedG2(params) {\n  if (!(this instanceof CompressedG2)) {\n    return new CompressedG2(params);\n  }\n\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nCompressedG2.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var pt = new CompressedG2();\n  return pt._fromObject(obj);\n};\n\nCompressedG2.prototype._fromObject = function (params) {\n  this.y_gt = params.y_gt;\n  this.x = new buffer.Buffer(params.x, 'hex');\n  return this;\n};\n\nCompressedG2.prototype.toObject = CompressedG2.prototype.toJSON = function toObject() {\n  var obj = {\n    y_gt: this.y_gt,\n    x: this.x.toString('hex')\n  };\n  return obj;\n};\n\nCompressedG2.fromBufferReader = function (br) {\n  var pt = new CompressedG2();\n  var y_gt = br.readUInt8();\n  pt.y_gt = y_gt & 1;\n  pt.x = br.read(64);\n  return pt;\n};\n\nCompressedG2.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n\n  writer.writeUInt8(G2_PREFIX_MASK | this.y_gt);\n  writer.write(this.x);\n  return writer;\n};\n\nfunction ZCProof(params) {\n  if (!(this instanceof ZCProof)) {\n    return new ZCProof(params);\n  }\n\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nZCProof.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var proof = new ZCProof();\n  return proof._fromObject(obj);\n};\n\nZCProof.prototype._fromObject = function (params) {\n  this.g_A = CompressedG1.fromObject(params.g_A);\n  this.g_A_prime = CompressedG1.fromObject(params.g_A_prime);\n  this.g_B = CompressedG2.fromObject(params.g_B);\n  this.g_B_prime = CompressedG1.fromObject(params.g_B_prime);\n  this.g_C = CompressedG1.fromObject(params.g_C);\n  this.g_C_prime = CompressedG1.fromObject(params.g_C_prime);\n  this.g_K = CompressedG1.fromObject(params.g_K);\n  this.g_H = CompressedG1.fromObject(params.g_H);\n  return this;\n};\n\nZCProof.prototype.toObject = ZCProof.prototype.toJSON = function toObject() {\n  var obj = {\n    g_A: this.g_A.toObject(),\n    g_A_prime: this.g_A_prime.toObject(),\n    g_B: this.g_B.toObject(),\n    g_B_prime: this.g_B_prime.toObject(),\n    g_C: this.g_C.toObject(),\n    g_C_prime: this.g_C_prime.toObject(),\n    g_K: this.g_K.toObject(),\n    g_H: this.g_H.toObject()\n  };\n  return obj;\n};\n\nZCProof.fromBufferReader = function (br) {\n  var proof = new ZCProof();\n  proof.g_A = CompressedG1.fromBufferReader(br);\n  proof.g_A_prime = CompressedG1.fromBufferReader(br);\n  proof.g_B = CompressedG2.fromBufferReader(br);\n  proof.g_B_prime = CompressedG1.fromBufferReader(br);\n  proof.g_C = CompressedG1.fromBufferReader(br);\n  proof.g_C_prime = CompressedG1.fromBufferReader(br);\n  proof.g_K = CompressedG1.fromBufferReader(br);\n  proof.g_H = CompressedG1.fromBufferReader(br);\n  return proof;\n};\n\nZCProof.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n\n  this.g_A.toBufferWriter(writer);\n  this.g_A_prime.toBufferWriter(writer);\n  this.g_B.toBufferWriter(writer);\n  this.g_B_prime.toBufferWriter(writer);\n  this.g_C.toBufferWriter(writer);\n  this.g_C_prime.toBufferWriter(writer);\n  this.g_K.toBufferWriter(writer);\n  this.g_H.toBufferWriter(writer);\n  return writer;\n};\n\nmodule.exports = ZCProof;","map":null,"metadata":{},"sourceType":"script"}