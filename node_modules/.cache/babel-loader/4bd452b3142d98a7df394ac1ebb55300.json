{"ast":null,"code":"'use strict';\n\nvar AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nvar AbstractChainedBatch = require('abstract-leveldown').AbstractChainedBatch;\n\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator;\n\nvar inherits = require('inherits');\n\nvar xtend = require('xtend');\n\nvar Codec = require('level-codec');\n\nvar EncodingError = require('level-errors').EncodingError;\n\nmodule.exports = DB.default = DB;\n\nfunction DB(db, opts) {\n  if (!(this instanceof DB)) return new DB(db, opts);\n  AbstractLevelDOWN.call(this, '');\n  opts = opts || {};\n  if (typeof opts.keyEncoding === 'undefined') opts.keyEncoding = 'utf8';\n  if (typeof opts.valueEncoding === 'undefined') opts.valueEncoding = 'utf8';\n  this.db = db;\n  this.codec = new Codec(opts);\n}\n\ninherits(DB, AbstractLevelDOWN);\n\nDB.prototype._serializeKey = DB.prototype._serializeValue = function (datum) {\n  return datum;\n};\n\nDB.prototype._open = function (opts, cb) {\n  this.db.open(opts, cb);\n};\n\nDB.prototype._close = function (cb) {\n  this.db.close(cb);\n};\n\nDB.prototype._put = function (key, value, opts, cb) {\n  key = this.codec.encodeKey(key, opts);\n  value = this.codec.encodeValue(value, opts);\n  this.db.put(key, value, opts, cb);\n};\n\nDB.prototype._get = function (key, opts, cb) {\n  var self = this;\n  key = this.codec.encodeKey(key, opts);\n  opts.asBuffer = this.codec.valueAsBuffer(opts);\n  this.db.get(key, opts, function (err, value) {\n    if (err) return cb(err);\n\n    try {\n      value = self.codec.decodeValue(value, opts);\n    } catch (err) {\n      return cb(new EncodingError(err));\n    }\n\n    cb(null, value);\n  });\n};\n\nDB.prototype._del = function (key, opts, cb) {\n  key = this.codec.encodeKey(key, opts);\n  this.db.del(key, opts, cb);\n};\n\nDB.prototype._chainedBatch = function () {\n  return new Batch(this);\n};\n\nDB.prototype._batch = function (ops, opts, cb) {\n  ops = this.codec.encodeBatch(ops, opts);\n  this.db.batch(ops, opts, cb);\n};\n\nDB.prototype._iterator = function (opts) {\n  opts.keyAsBuffer = this.codec.keyAsBuffer(opts);\n  opts.valueAsBuffer = this.codec.valueAsBuffer(opts);\n  return new Iterator(this, opts);\n};\n\nDB.prototype._setupIteratorOptions = function (options) {\n  options = xtend(options);\n  options.reverse = !!options.reverse;\n  options.keys = options.keys !== false;\n  options.values = options.values !== false;\n  options.limit = 'limit' in options ? options.limit : -1;\n  options.keyAsBuffer = options.keyAsBuffer !== false;\n  options.valueAsBuffer = options.valueAsBuffer !== false;\n  return options;\n};\n\nDB.prototype.approximateSize = function (start, end, opts, cb) {\n  return this.db.approximateSize(start, end, opts, cb);\n};\n\nfunction Iterator(db, opts) {\n  AbstractIterator.call(this, db);\n  this.codec = db.codec;\n  this.keys = opts.keys;\n  this.values = opts.values;\n  this.opts = this.codec.encodeLtgt(opts);\n  this.it = db.db.iterator(this.opts);\n}\n\ninherits(Iterator, AbstractIterator);\n\nIterator.prototype._next = function (cb) {\n  var self = this;\n  this.it.next(function (err, key, value) {\n    if (err) return cb(err);\n\n    try {\n      if (self.keys && typeof key !== 'undefined') {\n        key = self.codec.decodeKey(key, self.opts);\n      } else {\n        key = undefined;\n      }\n\n      if (self.values && typeof value !== 'undefined') {\n        value = self.codec.decodeValue(value, self.opts);\n      } else {\n        value = undefined;\n      }\n    } catch (err) {\n      return cb(new EncodingError(err));\n    }\n\n    cb(null, key, value);\n  });\n};\n\nIterator.prototype._end = function (cb) {\n  this.it.end(cb);\n};\n\nfunction Batch(db, codec) {\n  AbstractChainedBatch.call(this, db);\n  this.codec = db.codec;\n  this.batch = db.db.batch();\n}\n\ninherits(Batch, AbstractChainedBatch);\n\nBatch.prototype._put = function (key, value) {\n  key = this.codec.encodeKey(key);\n  value = this.codec.encodeValue(value);\n  this.batch.put(key, value);\n};\n\nBatch.prototype._del = function (key) {\n  key = this.codec.encodeKey(key);\n  this.batch.del(key);\n};\n\nBatch.prototype._clear = function () {\n  this.batch.clear();\n};\n\nBatch.prototype._write = function (opts, cb) {\n  this.batch.write(opts, cb);\n};","map":null,"metadata":{},"sourceType":"script"}