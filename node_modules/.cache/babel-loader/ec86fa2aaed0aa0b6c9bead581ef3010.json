{"ast":null,"code":"'use strict';\n\nvar defaultConfig = require('../runtime/config-nodejs.js');\n\nvar isMultiaddr = require('mafmt').IPFS.matches;\n\nvar promisify = require('promisify-es6');\n\nfunction isValidMultiaddr(ma) {\n  try {\n    return isMultiaddr(ma);\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction invalidMultiaddrError(ma) {\n  return new Error(\"\".concat(ma, \" is not a valid Multiaddr\"));\n}\n\nmodule.exports = function bootstrap(self) {\n  return {\n    list: promisify(function (callback) {\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, {\n          Peers: config.Bootstrap\n        });\n      });\n    }),\n    add: promisify(function (multiaddr, args, callback) {\n      if (typeof args === 'function') {\n        callback = args;\n        args = {\n          default: false\n        };\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(function () {\n          return callback(invalidMultiaddrError(multiaddr));\n        });\n      }\n\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (args.default) {\n          config.Bootstrap = defaultConfig().Bootstrap;\n        } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n          config.Bootstrap.push(multiaddr);\n        }\n\n        self._repo.config.set(config, function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, {\n            Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n          });\n        });\n      });\n    }),\n    rm: promisify(function (multiaddr, args, callback) {\n      if (typeof args === 'function') {\n        callback = args;\n        args = {\n          all: false\n        };\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(function () {\n          return callback(invalidMultiaddrError(multiaddr));\n        });\n      }\n\n      self._repo.config.get(function (err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (args.all) {\n          config.Bootstrap = [];\n        } else {\n          config.Bootstrap = config.Bootstrap.filter(function (mh) {\n            return mh !== multiaddr;\n          });\n        }\n\n        self._repo.config.set(config, function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          var res = [];\n\n          if (!args.all && multiaddr) {\n            res.push(multiaddr);\n          }\n\n          callback(null, {\n            Peers: res\n          });\n        });\n      });\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}