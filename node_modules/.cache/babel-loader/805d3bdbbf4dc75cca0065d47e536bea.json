{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream');\n\nvar lp = require('pull-length-prefixed');\n\nvar lpOpts = {\n  fixed: true,\n  bytes: 4\n};\n\nexports.createBoxStream = function (cipher, mac) {\n  return pull(ensureBuffer(), pull.asyncMap(function (chunk, cb) {\n    cipher.encrypt(chunk, function (err, data) {\n      if (err) {\n        return cb(err);\n      }\n\n      mac.digest(data, function (err, digest) {\n        if (err) {\n          return cb(err);\n        }\n\n        cb(null, Buffer.concat([data, digest]));\n      });\n    });\n  }), lp.encode(lpOpts));\n};\n\nexports.createUnboxStream = function (decipher, mac) {\n  return pull(ensureBuffer(), lp.decode(lpOpts), pull.asyncMap(function (chunk, cb) {\n    var l = chunk.length;\n    var macSize = mac.length;\n\n    if (l < macSize) {\n      return cb(new Error(\"buffer (\".concat(l, \") shorter than MAC size (\").concat(macSize, \")\")));\n    }\n\n    var mark = l - macSize;\n    var data = chunk.slice(0, mark);\n    var macd = chunk.slice(mark);\n    mac.digest(data, function (err, expected) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (!macd.equals(expected)) {\n        return cb(new Error(\"MAC Invalid: \".concat(macd.toString('hex'), \" != \").concat(expected.toString('hex'))));\n      } // all good, decrypt\n\n\n      decipher.decrypt(data, function (err, decrypted) {\n        if (err) {\n          return cb(err);\n        }\n\n        cb(null, decrypted);\n      });\n    });\n  }));\n};\n\nfunction ensureBuffer() {\n  return pull.map(function (c) {\n    if (typeof c === 'string') {\n      return Buffer.from(c, 'utf-8');\n    }\n\n    return c;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}