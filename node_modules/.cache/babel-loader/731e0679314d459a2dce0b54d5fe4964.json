{"ast":null,"code":"'use strict';\n\nvar waterfall = require('async/waterfall');\n\nvar RepoErrors = require('ipfs-repo').errors; // Boot an IPFS node depending on the options set\n\n\nmodule.exports = function (self) {\n  self.log('booting');\n  var options = self._options;\n  var doInit = options.init;\n  var doStart = options.start; // Do the actual boot sequence\n\n  waterfall([// Checks if a repo exists, and if so opens it\n  // Will return callback with a bool indicating the existence\n  // of the repo\n  function (cb) {\n    // nothing to do\n    if (!self._repo.closed) {\n      return cb(null, true);\n    }\n\n    self._repo.open(function (err, res) {\n      if (isRepoUninitializedError(err)) return cb(null, false);\n      if (err) return cb(err);\n      cb(null, true);\n    });\n  }, function (repoOpened, cb) {\n    // Init with existing initialized, opened, repo\n    if (repoOpened) {\n      return self.init({\n        repo: self._repo\n      }, function (err) {\n        if (err) return cb(Object.assign(err, {\n          emitted: true\n        }));\n        cb();\n      });\n    }\n\n    if (doInit) {\n      var initOptions = Object.assign({\n        bits: 2048,\n        pass: self._options.pass\n      }, typeof options.init === 'object' ? options.init : {});\n      return self.init(initOptions, function (err) {\n        if (err) return cb(Object.assign(err, {\n          emitted: true\n        }));\n        cb();\n      });\n    }\n\n    cb();\n  }, function (cb) {\n    // No problem, we don't have to start the node\n    if (!doStart) {\n      return cb();\n    }\n\n    self.start(function (err) {\n      if (err) return cb(Object.assign(err, {\n        emitted: true\n      }));\n      cb();\n    });\n  }], function (err) {\n    if (err) {\n      if (!err.emitted) {\n        self.emit('error', err);\n      }\n\n      return;\n    }\n\n    self.log('booted');\n    self.emit('ready');\n  });\n};\n\nfunction isRepoUninitializedError(err) {\n  if (!err) {\n    return false;\n  } // If the error is that no repo exists,\n  // which happens when the version file is not found\n  // we just want to signal that no repo exist, not\n  // fail the whole process.\n  // Use standardized errors as much as possible\n\n\n  if (err.code === RepoErrors.ERR_REPO_NOT_INITIALIZED) {\n    return true;\n  } // TODO: As error codes continue to be standardized, this logic can be phase out;\n  // it is here to maintain compatibility\n\n\n  if (err.message.match(/not found/) || // indexeddb\n  err.message.match(/ENOENT/) || // fs\n  err.message.match(/No value/) // memory\n  ) {\n      return true;\n    }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}