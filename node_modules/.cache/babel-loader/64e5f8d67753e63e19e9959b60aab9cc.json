{"ast":null,"code":"/* @flow */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar Key = require('interface-datastore').Key;\n\nvar KeytransformDatastore = require('./keytransform');\n/* ::\nimport type {Callback, Datastore, Query, QueryResult} from 'interface-datastore'\n*/\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n *\n */\n\n\nvar NamespaceDatastore\n/* :: <Value> */\n=\n/*#__PURE__*/\nfunction (_KeytransformDatastor) {\n  _inherits(NamespaceDatastore, _KeytransformDatastor);\n\n  /* :: prefix: Key */\n  function NamespaceDatastore(child\n  /* : Datastore<Value> */\n  , prefix\n  /* : Key */\n  ) {\n    var _this;\n\n    _classCallCheck(this, NamespaceDatastore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NamespaceDatastore).call(this, child, {\n      convert: function convert(key\n      /* : Key */\n      )\n      /* : Key */\n      {\n        return prefix.child(key);\n      },\n      invert: function invert(key\n      /* : Key */\n      )\n      /* : Key */\n      {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(\"Expected prefix: (\".concat(prefix.toString(), \") in key: \").concat(key.toString()));\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    }));\n    _this.prefix = prefix;\n    return _this;\n  }\n\n  _createClass(NamespaceDatastore, [{\n    key: \"query\",\n    value: function query(q\n    /* : Query<Value> */\n    )\n    /* : QueryResult<Value> */\n    {\n      if (q.prefix && this.prefix.toString() !== '/') {\n        return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"query\", this).call(this, Object.assign({}, q, {\n          prefix: this.prefix.child(new Key(q.prefix)).toString()\n        }));\n      }\n\n      return _get(_getPrototypeOf(NamespaceDatastore.prototype), \"query\", this).call(this, q);\n    }\n  }]);\n\n  return NamespaceDatastore;\n}(KeytransformDatastore\n/* :: <Value> */\n);\n\nmodule.exports = NamespaceDatastore;","map":null,"metadata":{},"sourceType":"script"}