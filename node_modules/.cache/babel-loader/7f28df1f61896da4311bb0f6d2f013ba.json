{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar BlockService = require('ipfs-block-service');\n\nvar Ipld = require('ipld');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar crypto = require('libp2p-crypto');\n\nvar isIPFS = require('is-ipfs');\n\nvar multiaddr = require('multiaddr');\n\nvar multihash = require('multihashes');\n\nvar PeerBook = require('peer-book');\n\nvar multibase = require('multibase');\n\nvar CID = require('cids');\n\nvar debug = require('debug');\n\nvar extend = require('deep-extend');\n\nvar EventEmitter = require('events'); // All known IPLD formats\n\n\nvar ipldBitcoin = require('ipld-bitcoin');\n\nvar ipldDagCbor = require('ipld-dag-cbor');\n\nvar ipldDagPb = require('ipld-dag-pb');\n\nvar ipldEthAccountSnapshot = require('ipld-ethereum').ethAccountSnapshot;\n\nvar ipldEthBlock = require('ipld-ethereum').ethBlock;\n\nvar ipldEthBlockList = require('ipld-ethereum').ethBlockList;\n\nvar ipldEthStateTrie = require('ipld-ethereum').ethStateTrie;\n\nvar ipldEthStorageTrie = require('ipld-ethereum').ethStorageTrie;\n\nvar ipldEthTrie = require('ipld-ethereum').ethTxTrie;\n\nvar ipldEthTx = require('ipld-ethereum').ethTx;\n\nvar ipldGit = require('ipld-git');\n\nvar ipldRaw = require('ipld-raw');\n\nvar ipldZcash = require('ipld-zcash');\n\nvar config = require('./config');\n\nvar boot = require('./boot');\n\nvar components = require('./components');\n\nvar IPNS = require('./ipns'); // replaced by repo-browser when running in the browser\n\n\nvar defaultRepo = require('./runtime/repo-nodejs');\n\nvar preload = require('./preload');\n\nvar mfsPreload = require('./mfs-preload');\n\nvar IPFS =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(IPFS, _EventEmitter);\n\n  function IPFS(options) {\n    var _this;\n\n    _classCallCheck(this, IPFS);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IPFS).call(this));\n    _this._options = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: true,\n        addresses: ['/dnsaddr/node0.preload.ipfs.io/https', '/dnsaddr/node1.preload.ipfs.io/https']\n      }\n    };\n    options = config.validate(options || {});\n    extend(_this._options, options);\n\n    if (options.init === false) {\n      _this._options.init = false;\n    }\n\n    if (!(options.start === false)) {\n      _this._options.start = true;\n    }\n\n    if (typeof options.repo === 'string' || options.repo === undefined) {\n      _this._repo = defaultRepo(options.repo);\n    } else {\n      _this._repo = options.repo;\n    } // IPFS utils\n\n\n    _this.log = debug('jsipfs');\n    _this.log.err = debug('jsipfs:err'); // IPFS types\n\n    _this.types = {\n      Buffer: Buffer,\n      PeerId: PeerId,\n      PeerInfo: PeerInfo,\n      multiaddr: multiaddr,\n      multibase: multibase,\n      multihash: multihash,\n      CID: CID // IPFS Core Internals\n      // this._repo - assigned above\n\n    };\n    _this._peerInfoBook = new PeerBook();\n    _this._peerInfo = undefined;\n    _this._libp2pNode = undefined;\n    _this._bitswap = undefined;\n    _this._blockService = new BlockService(_this._repo);\n    _this._ipld = new Ipld({\n      blockService: _this._blockService,\n      formats: [ipldBitcoin, ipldDagCbor, ipldDagPb, ipldEthAccountSnapshot, ipldEthBlock, ipldEthBlockList, ipldEthStateTrie, ipldEthStorageTrie, ipldEthTrie, ipldEthTx, ipldGit, ipldRaw, ipldZcash]\n    });\n    _this._preload = preload(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._mfsPreload = mfsPreload(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._ipns = new IPNS(null, _assertThisInitialized(_assertThisInitialized(_this))); // IPFS Core exposed components\n    //   - for booting up a node\n\n    _this.init = components.init(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.preStart = components.preStart(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.start = components.start(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stop = components.stop(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shutdown = _this.stop;\n    _this.isOnline = components.isOnline(_assertThisInitialized(_assertThisInitialized(_this))); //   - interface-ipfs-core defined API\n\n    _this.version = components.version(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.id = components.id(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.repo = components.repo(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.bootstrap = components.bootstrap(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.config = components.config(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.block = components.block(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.object = components.object(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.dag = components.dag(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.libp2p = components.libp2p(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.swarm = components.swarm(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.files = components.files(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.name = components.name(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.bitswap = components.bitswap(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pin = components.pin(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.ping = components.ping(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pingPullStream = components.pingPullStream(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pingReadableStream = components.pingReadableStream(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.pubsub = components.pubsub(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.dht = components.dht(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.dns = components.dns(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.key = components.key(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stats = components.stats(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resolve = components.resolve(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    if (_this._options.EXPERIMENTAL.pubsub) {\n      _this.log('EXPERIMENTAL pubsub is enabled');\n    }\n\n    if (_this._options.EXPERIMENTAL.sharding) {\n      _this.log('EXPERIMENTAL sharding is enabled');\n    }\n\n    if (_this._options.EXPERIMENTAL.dht) {\n      _this.log('EXPERIMENTAL Kademlia DHT is enabled');\n    }\n\n    _this.state = require('./state')(_assertThisInitialized(_assertThisInitialized(_this))); // ipfs.ls\n\n    _this.ls = _this.files.lsImmutable;\n    _this.lsReadableStream = _this.files.lsReadableStreamImmutable;\n    _this.lsPullStream = _this.files.lsPullStreamImmutable; // ipfs.util\n\n    _this.util = {\n      crypto: crypto,\n      isIPFS: isIPFS // ipfs.files\n\n    };\n    var mfs = components.mfs(_assertThisInitialized(_assertThisInitialized(_this)));\n    Object.keys(mfs).forEach(function (key) {\n      _this.files[key] = mfs[key];\n    });\n    boot(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  return IPFS;\n}(EventEmitter);\n\nexports = module.exports = IPFS;\n\nexports.createNode = function (options) {\n  return new IPFS(options);\n};","map":null,"metadata":{},"sourceType":"script"}