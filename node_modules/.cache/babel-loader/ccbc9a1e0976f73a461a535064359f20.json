{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nvar address_1 = require(\"./address\");\n\nvar abi_coder_1 = require(\"./abi-coder\");\n\nvar bignumber_1 = require(\"./bignumber\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar properties_1 = require(\"./properties\");\n\nvar errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\nvar _Indexed =\n/** @class */\nfunction () {\n  function _Indexed(hash) {\n    properties_1.setType(this, 'Indexed');\n    properties_1.defineReadOnly(this, 'hash', hash);\n  }\n\n  return _Indexed;\n}();\n\nvar Description =\n/** @class */\nfunction () {\n  function Description(info) {\n    properties_1.setType(this, 'Description');\n\n    for (var key in info) {\n      properties_1.defineReadOnly(this, key, properties_1.deepCopy(info[key], true));\n    }\n\n    Object.freeze(this);\n  }\n\n  return Description;\n}();\n\nvar _DeployDescription =\n/** @class */\nfunction (_super) {\n  __extends(_DeployDescription, _super);\n\n  function _DeployDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  _DeployDescription.prototype.encode = function (bytecode, params) {\n    if (!bytes_1.isHexString(bytecode)) {\n      errors.throwError('invalid contract bytecode', errors.INVALID_ARGUMENT, {\n        arg: 'bytecode',\n        value: bytecode\n      });\n    }\n\n    errors.checkArgumentCount(params.length, this.inputs.length, ' in Interface constructor');\n\n    try {\n      return bytecode + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);\n    } catch (error) {\n      errors.throwError('invalid constructor argument', errors.INVALID_ARGUMENT, {\n        arg: error.arg,\n        reason: error.reason,\n        value: error.value\n      });\n    }\n\n    return null;\n  };\n\n  return _DeployDescription;\n}(Description);\n\nvar _FunctionDescription =\n/** @class */\nfunction (_super) {\n  __extends(_FunctionDescription, _super);\n\n  function _FunctionDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  _FunctionDescription.prototype.encode = function (params) {\n    errors.checkArgumentCount(params.length, this.inputs.length, ' in interface function ' + this.name);\n\n    try {\n      return this.sighash + abi_coder_1.defaultAbiCoder.encode(this.inputs, params).substring(2);\n    } catch (error) {\n      errors.throwError('invalid input argument', errors.INVALID_ARGUMENT, {\n        arg: error.arg,\n        reason: error.reason,\n        value: error.value\n      });\n    }\n\n    return null;\n  };\n\n  _FunctionDescription.prototype.decode = function (data) {\n    try {\n      return abi_coder_1.defaultAbiCoder.decode(this.outputs, bytes_1.arrayify(data));\n    } catch (error) {\n      errors.throwError('invalid data for function output', errors.INVALID_ARGUMENT, {\n        arg: 'data',\n        errorArg: error.arg,\n        errorValue: error.value,\n        value: data,\n        reason: error.reason\n      });\n    }\n  };\n\n  return _FunctionDescription;\n}(Description);\n\nvar Result =\n/** @class */\nfunction (_super) {\n  __extends(Result, _super);\n\n  function Result() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return Result;\n}(Description);\n\nvar _EventDescription =\n/** @class */\nfunction (_super) {\n  __extends(_EventDescription, _super);\n\n  function _EventDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  _EventDescription.prototype.encodeTopics = function (params) {\n    var _this = this;\n\n    if (params.length > this.inputs.length) {\n      errors.throwError('too many arguments for ' + this.name, errors.UNEXPECTED_ARGUMENT, {\n        maxCount: params.length,\n        expectedCount: this.inputs.length\n      });\n    }\n\n    var topics = [];\n\n    if (!this.anonymous) {\n      topics.push(this.topic);\n    }\n\n    params.forEach(function (arg, index) {\n      var param = _this.inputs[index];\n\n      if (!param.indexed) {\n        if (arg != null) {\n          errors.throwError('cannot filter non-indexed parameters; must be null', errors.INVALID_ARGUMENT, {\n            argument: param.name || index,\n            value: arg\n          });\n        }\n\n        return;\n      }\n\n      if (arg == null) {\n        topics.push(null);\n      } else if (param.type === 'string') {\n        topics.push(hash_1.id(arg));\n      } else if (param.type === 'bytes') {\n        topics.push(keccak256_1.keccak256(arg));\n      } else if (param.type.indexOf('[') !== -1 || param.type.substring(0, 5) === 'tuple') {\n        errors.throwError('filtering with tuples or arrays not implemented yet; bug us on GitHub', errors.NOT_IMPLEMENTED, {\n          operation: 'filter(array|tuple)'\n        });\n      } else {\n        if (param.type === 'address') {\n          address_1.getAddress(arg);\n        }\n\n        topics.push(bytes_1.hexZeroPad(bytes_1.hexlify(arg), 32).toLowerCase());\n      }\n    }); // Trim off trailing nulls\n\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n\n    return topics;\n  };\n\n  _EventDescription.prototype.decode = function (data, topics) {\n    // Strip the signature off of non-anonymous topics\n    if (topics != null && !this.anonymous) {\n      topics = topics.slice(1);\n    }\n\n    var inputIndexed = [];\n    var inputNonIndexed = [];\n    var inputDynamic = [];\n    this.inputs.forEach(function (param, index) {\n      if (param.indexed) {\n        if (param.type === 'string' || param.type === 'bytes' || param.type.indexOf('[') >= 0 || param.type.substring(0, 5) === 'tuple') {\n          inputIndexed.push({\n            type: 'bytes32',\n            name: param.name || ''\n          });\n          inputDynamic.push(true);\n        } else {\n          inputIndexed.push(param);\n          inputDynamic.push(false);\n        }\n      } else {\n        inputNonIndexed.push(param);\n        inputDynamic.push(false);\n      }\n    });\n\n    if (topics != null) {\n      var resultIndexed = abi_coder_1.defaultAbiCoder.decode(inputIndexed, bytes_1.concat(topics));\n    }\n\n    var resultNonIndexed = abi_coder_1.defaultAbiCoder.decode(inputNonIndexed, bytes_1.arrayify(data));\n    var result = {};\n    var nonIndexedIndex = 0,\n        indexedIndex = 0;\n    this.inputs.forEach(function (input, index) {\n      if (input.indexed) {\n        if (topics == null) {\n          result[index] = new _Indexed(null);\n        } else if (inputDynamic[index]) {\n          result[index] = new _Indexed(resultIndexed[indexedIndex++]);\n        } else {\n          result[index] = resultIndexed[indexedIndex++];\n        }\n      } else {\n        result[index] = resultNonIndexed[nonIndexedIndex++];\n      }\n\n      if (input.name) {\n        result[input.name] = result[index];\n      }\n    });\n    result.length = this.inputs.length;\n    return new Result(result);\n  };\n\n  return _EventDescription;\n}(Description);\n\nvar _TransactionDescription =\n/** @class */\nfunction (_super) {\n  __extends(_TransactionDescription, _super);\n\n  function _TransactionDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return _TransactionDescription;\n}(Description);\n\nvar _LogDescription =\n/** @class */\nfunction (_super) {\n  __extends(_LogDescription, _super);\n\n  function _LogDescription() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return _LogDescription;\n}(Description);\n\nfunction addMethod(method) {\n  switch (method.type) {\n    case 'constructor':\n      {\n        var description = new _DeployDescription({\n          inputs: method.inputs,\n          payable: method.payable == null || !!method.payable\n        });\n\n        if (!this.deployFunction) {\n          this.deployFunction = description;\n        }\n\n        break;\n      }\n\n    case 'function':\n      {\n        var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');\n        var sighash = hash_1.id(signature).substring(0, 10);\n        var description = new _FunctionDescription({\n          inputs: method.inputs,\n          outputs: method.outputs,\n          gas: method.gas,\n          payable: method.payable == null || !!method.payable,\n          type: method.constant ? 'call' : 'transaction',\n          name: method.name,\n          signature: signature,\n          sighash: sighash\n        }); // Expose the first (and hopefully unique named function)\n\n        if (method.name) {\n          if (this.functions[method.name] == null) {\n            properties_1.defineReadOnly(this.functions, method.name, description);\n          } else {\n            errors.warn('WARNING: Multiple definitions for ' + method.name);\n          }\n        } // Expose all methods by their signature, for overloaded functions\n\n\n        if (this.functions[description.signature] == null) {\n          properties_1.defineReadOnly(this.functions, description.signature, description);\n        }\n\n        break;\n      }\n\n    case 'event':\n      {\n        var signature = abi_coder_1.formatSignature(method).replace(/tuple/g, '');\n        var description = new _EventDescription({\n          name: method.name,\n          signature: signature,\n          inputs: method.inputs,\n          topic: hash_1.id(signature),\n          anonymous: !!method.anonymous\n        }); // Expose the first (and hopefully unique) event name\n\n        if (method.name && this.events[method.name] == null) {\n          properties_1.defineReadOnly(this.events, method.name, description);\n        } // Expose all events by their signature, for overloaded functions\n\n\n        if (this.events[description.signature] == null) {\n          properties_1.defineReadOnly(this.events, description.signature, description);\n        }\n\n        break;\n      }\n\n    case 'fallback':\n      // Nothing to do for fallback\n      break;\n\n    default:\n      errors.warn('WARNING: unsupported ABI type - ' + method.type);\n      break;\n  }\n}\n\nvar Interface =\n/** @class */\nfunction () {\n  function Interface(abi) {\n    errors.checkNew(this, Interface);\n\n    if (typeof abi === 'string') {\n      try {\n        abi = JSON.parse(abi);\n      } catch (error) {\n        errors.throwError('could not parse ABI JSON', errors.INVALID_ARGUMENT, {\n          arg: 'abi',\n          errorMessage: error.message,\n          value: abi\n        });\n      }\n\n      if (!Array.isArray(abi)) {\n        errors.throwError('invalid abi', errors.INVALID_ARGUMENT, {\n          arg: 'abi',\n          value: abi\n        });\n        return null;\n      }\n    }\n\n    properties_1.defineReadOnly(this, 'functions', {});\n    properties_1.defineReadOnly(this, 'events', {}); // Convert any supported ABI format into a standard ABI format\n\n    var _abi = [];\n    abi.forEach(function (fragment) {\n      if (typeof fragment === 'string') {\n        fragment = abi_coder_1.parseSignature(fragment);\n      } // @TODO: We should probable do some validation; create abiCoder.formatSignature for checking\n\n\n      _abi.push(fragment);\n    });\n    properties_1.defineReadOnly(this, 'abi', properties_1.deepCopy(_abi, true));\n\n    _abi.forEach(addMethod, this); // If there wasn't a constructor, create the default constructor\n\n\n    if (!this.deployFunction) {\n      addMethod.call(this, {\n        type: 'constructor',\n        inputs: []\n      });\n    }\n\n    properties_1.setType(this, 'Interface');\n  }\n\n  Interface.prototype.parseTransaction = function (tx) {\n    var sighash = tx.data.substring(0, 10).toLowerCase();\n\n    for (var name in this.functions) {\n      if (name.indexOf('(') === -1) {\n        continue;\n      }\n\n      var func = this.functions[name];\n\n      if (func.sighash === sighash) {\n        var result = abi_coder_1.defaultAbiCoder.decode(func.inputs, '0x' + tx.data.substring(10));\n        return new _TransactionDescription({\n          args: result,\n          decode: func.decode,\n          name: func.name,\n          signature: func.signature,\n          sighash: func.sighash,\n          value: bignumber_1.bigNumberify(tx.value || '0')\n        });\n      }\n    }\n\n    return null;\n  };\n\n  Interface.prototype.parseLog = function (log) {\n    for (var name in this.events) {\n      if (name.indexOf('(') === -1) {\n        continue;\n      }\n\n      var event = this.events[name];\n\n      if (event.anonymous) {\n        continue;\n      }\n\n      if (event.topic !== log.topics[0]) {\n        continue;\n      } // @TODO: If anonymous, and the only method, and the input count matches, should we parse and return it?\n\n\n      return new _LogDescription({\n        decode: event.decode,\n        name: event.name,\n        signature: event.signature,\n        topic: event.topic,\n        values: event.decode(log.data, log.topics)\n      });\n    }\n\n    return null;\n  };\n\n  Interface.isInterface = function (value) {\n    return properties_1.isType(value, 'Interface');\n  };\n\n  Interface.isIndexed = function (value) {\n    return properties_1.isType(value, 'Indexed');\n  };\n\n  return Interface;\n}();\n\nexports.Interface = Interface;","map":null,"metadata":{},"sourceType":"script"}