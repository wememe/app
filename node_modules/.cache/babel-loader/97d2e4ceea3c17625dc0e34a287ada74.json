{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/ActivityTiles.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from './FeedTile';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar ActivityTiles = function ActivityTiles(_ref) {\n  var verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      currentAddress = _ref.currentAddress,\n      name = _ref.name,\n      feedAddress = _ref.feedAddress;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, Object.values(feedAddress)[0].map(function (item, index) {\n    return function () {\n      if (item.dataType === 'Internal') {\n        return React.createElement(FeedTileInternal, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Token') {\n        return React.createElement(FeedTileToken, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Txs') {\n        return React.createElement(FeedTileTXS, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Public') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          verifiedTwitter: verifiedTwitter,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Private') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        });\n      }\n    };\n  }));\n};\n\nActivityTiles.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string\n};\nActivityTiles.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    currentAddress: state.threeBox.currentAddress,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    name: state.threeBox.name,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(ActivityTiles);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/ActivityTiles.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","ActivityTiles","verifiedGithub","verifiedTwitter","currentAddress","name","feedAddress","Object","values","map","item","index","dataType","metaData","parseInt","propTypes","feedByAddress","array","ifFetchingActivity","bool","string","publicProfileAddress","publicProfileActivity","location","object","publicName","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from './FeedTile';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst ActivityTiles = ({\n  verifiedGithub,\n  verifiedTwitter,\n  currentAddress,\n  name,\n  feedAddress\n}) => (\n    <React.Fragment>\n      {\n        Object.values(feedAddress)[0].map((item, index) => (\n          (() => {\n            if (item.dataType === 'Internal') {\n              return (\n                <FeedTileInternal\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0} />\n              );\n            }\n            if (item.dataType === 'Token') {\n              return (\n                <FeedTileToken\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Txs') {\n              return (\n                <FeedTileTXS\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Public') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  verifiedGithub={verifiedGithub}\n                  verifiedTwitter={verifiedTwitter}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Private') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n          })\n        ))\n      }\n\n    </React.Fragment>\n  );\n\nActivityTiles.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string,\n};\n\nActivityTiles.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  currentAddress: state.threeBox.currentAddress,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  name: state.threeBox.name,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(ActivityTiles);\n"]},"metadata":{},"sourceType":"module"}