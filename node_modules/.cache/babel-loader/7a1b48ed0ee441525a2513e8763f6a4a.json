{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar dagPb = require('ipld-dag-pb');\n\nvar DAGNode = dagPb.DAGNode,\n    DAGLink = dagPb.DAGLink;\n\nvar waterfall = require('async/waterfall');\n\nvar addLink = function addLink(ipfs, options, callback) {\n  options = Object.assign({}, {\n    parent: undefined,\n    child: undefined,\n    name: '',\n    flush: true\n  }, options);\n\n  if (!options.parent) {\n    return callback(new Error('No parent passed to addLink'));\n  }\n\n  if (!options.child) {\n    return callback(new Error('No child passed to addLink'));\n  }\n\n  waterfall([function (done) {\n    if (options.name) {\n      // Remove the old link if necessary\n      return DAGNode.rmLink(options.parent, options.name, done);\n    }\n\n    done(null, options.parent);\n  }, function (parent, done) {\n    // Add the new link to the parent\n    DAGNode.addLink(parent, new DAGLink(options.name, options.child.size, options.child.hash || options.child.multihash), done);\n  }, function (parent, done) {\n    if (!options.flush) {\n      return done(null, parent);\n    } // Persist the new parent DAGNode\n\n\n    ipfs.dag.put(parent, {\n      cid: new CID(parent.hash || parent.multihash)\n    }, function (error) {\n      return done(error, parent);\n    });\n  }], callback);\n};\n\nmodule.exports = addLink;","map":null,"metadata":{},"sourceType":"script"}