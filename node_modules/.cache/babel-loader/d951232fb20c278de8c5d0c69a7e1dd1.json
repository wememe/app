{"ast":null,"code":"'use strict';\n\nvar Provider = require('./provider');\n\nvar JsonRpcProvider = require('./json-rpc-provider');\n\nvar utils = function () {\n  return {\n    defineProperty: require('../utils/properties').defineProperty\n  };\n}();\n\nvar errors = require('../utils/errors');\n\nfunction InfuraProvider(network, apiAccessToken) {\n  errors.checkNew(this, InfuraProvider);\n  network = Provider.getNetwork(network);\n  var host = null;\n\n  switch (network.name) {\n    case 'homestead':\n      host = 'mainnet.infura.io';\n      break;\n\n    case 'ropsten':\n      host = 'ropsten.infura.io';\n      break;\n\n    case 'rinkeby':\n      host = 'rinkeby.infura.io';\n      break;\n\n    case 'kovan':\n      host = 'kovan.infura.io';\n      break;\n\n    default:\n      throw new Error('unsupported network');\n  }\n\n  var url = 'https://' + host + '/' + (apiAccessToken || '');\n  JsonRpcProvider.call(this, url, network);\n  utils.defineProperty(this, 'apiAccessToken', apiAccessToken || null);\n}\n\nJsonRpcProvider.inherits(InfuraProvider);\nutils.defineProperty(InfuraProvider.prototype, '_startPending', function () {\n  console.log('WARNING: INFURA does not support pending filters');\n});\nutils.defineProperty(InfuraProvider.prototype, '_stopPending', function () {});\nutils.defineProperty(InfuraProvider.prototype, 'getSigner', function (address) {\n  errors.throwError('INFURA does not support signing', errors.UNSUPPORTED_OPERATION, {\n    operation: 'getSigner'\n  });\n});\nutils.defineProperty(InfuraProvider.prototype, 'listAccounts', function () {\n  return Promise.resolve([]);\n});\nmodule.exports = InfuraProvider;","map":null,"metadata":{},"sourceType":"script"}