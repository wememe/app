{"ast":null,"code":"'use strict';\n\nvar Key = require('interface-datastore').Key;\n\nvar queue = require('async/queue');\n\nvar waterfall = require('async/waterfall');\n\nvar _get = require('lodash.get');\n\nvar _set = require('lodash.set');\n\nvar _has = require('lodash.has');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar configKey = new Key('config');\n\nmodule.exports = function (store) {\n  var setQueue = queue(_doSet, 1);\n  var configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {String} key - the config key to get\n     * @param {function(Error, Object)} callback\n     * @returns {void}\n     */\n    get: function get(key, callback) {\n      if (typeof key === 'function') {\n        callback = key;\n        key = undefined;\n      }\n\n      if (!key) {\n        key = undefined;\n      }\n\n      store.get(configKey, function (err, encodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        var config;\n\n        try {\n          config = JSON.parse(encodedValue.toString());\n        } catch (err) {\n          return callback(err);\n        }\n\n        if (key !== undefined && !_has(config, key)) {\n          return callback(new Error('Key ' + key + ' does not exist in config'));\n        }\n\n        var value = key !== undefined ? _get(config, key) : config;\n        callback(null, value);\n      });\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {String} key - the config key to be written\n     * @param {Object} value - the config value to be written\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set: function set(key, value, callback) {\n      if (typeof value === 'function') {\n        callback = value;\n        value = key;\n        key = undefined;\n      } else if (!key || typeof key !== 'string') {\n        return callback(new Error('Invalid key type'));\n      }\n\n      if (value === undefined || Buffer.isBuffer(value)) {\n        return callback(new Error('Invalid value type'));\n      }\n\n      setQueue.push({\n        key: key,\n        value: value\n      }, callback);\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists: function exists(callback) {\n      store.has(configKey, callback);\n    }\n  };\n  return configStore;\n\n  function _doSet(m, callback) {\n    var key = m.key;\n    var value = m.value;\n\n    if (key) {\n      waterfall([function (cb) {\n        return configStore.get(cb);\n      }, function (config, cb) {\n        return cb(null, _set(config, key, value));\n      }, _saveAll], callback);\n    } else {\n      _saveAll(value, callback);\n    }\n  }\n\n  function _saveAll(config, callback) {\n    var buf = Buffer.from(JSON.stringify(config, null, 2));\n    store.put(configKey, buf, callback);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}