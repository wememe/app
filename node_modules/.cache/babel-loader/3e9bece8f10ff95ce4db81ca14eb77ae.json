{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_1 = require(\"./bignumber\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar utf8_1 = require(\"./utf8\");\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar sha2_1 = require(\"./sha2\");\n\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = '0000000000000000000000000000000000000000000000000000000000000000';\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case 'address':\n      if (isArray) {\n        return bytes_1.padZeros(value, 32);\n      }\n\n      return bytes_1.arrayify(value);\n\n    case 'string':\n      return utf8_1.toUtf8Bytes(value);\n\n    case 'bytes':\n      return bytes_1.arrayify(value);\n\n    case 'bool':\n      value = value ? '0x01' : '0x00';\n\n      if (isArray) {\n        return bytes_1.padZeros(value, 32);\n      }\n\n      return bytes_1.arrayify(value);\n  }\n\n  var match = type.match(regexNumber);\n\n  if (match) {\n    //var signed = (match[1] === 'int')\n    var size = parseInt(match[2] || \"256\");\n\n    if (size % 8 != 0 || size === 0 || size > 256) {\n      throw new Error('invalid number type - ' + type);\n    }\n\n    if (isArray) {\n      size = 256;\n    }\n\n    value = bignumber_1.bigNumberify(value).toTwos(size);\n    return bytes_1.padZeros(value, size / 8);\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    var size = parseInt(match[1]);\n\n    if (String(size) != match[1] || size === 0 || size > 32) {\n      throw new Error('invalid number type - ' + type);\n    }\n\n    if (bytes_1.arrayify(value).byteLength !== size) {\n      throw new Error('invalid value for ' + type);\n    }\n\n    if (isArray) {\n      return bytes_1.arrayify((value + Zeros).substring(0, 66));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    var baseType = match[1];\n    var count = parseInt(match[2] || String(value.length));\n\n    if (count != value.length) {\n      throw new Error('invalid value for ' + type);\n    }\n\n    var result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return bytes_1.concat(result);\n  }\n\n  throw new Error('unknown type - ' + type);\n} // @TODO: Array Enum\n\n\nfunction pack(types, values) {\n  if (types.length != values.length) {\n    throw new Error('type/value count mismatch');\n  }\n\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return bytes_1.hexlify(bytes_1.concat(tight));\n}\n\nexports.pack = pack;\n\nfunction keccak256(types, values) {\n  return keccak256_1.keccak256(pack(types, values));\n}\n\nexports.keccak256 = keccak256;\n\nfunction sha256(types, values) {\n  return sha2_1.sha256(pack(types, values));\n}\n\nexports.sha256 = sha256;","map":null,"metadata":{},"sourceType":"script"}