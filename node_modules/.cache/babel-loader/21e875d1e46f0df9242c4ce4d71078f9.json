{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from '../FeedTile';\nimport networkArray from '../../utils/networkArray';\nimport Loading from \"../../assets/Loading.svg\";\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar Activity = function Activity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      feedByAddress = _ref.feedByAddress,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      publicProfileActivity = _ref.publicProfileActivity,\n      isPublicProfilePage = _ref.isPublicProfilePage;\n  return React.createElement(\"div\", {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"header\",\n    id: \"feed__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(\"div\", {\n    className: \"feed__activity__address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, ifFetchingActivity && !isPublicProfilePage && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Loading,\n    alt: \"loading\",\n    id: \"activityLoad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })), !isPublicProfilePage && feedByAddress.length > 0 ? feedByAddress.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"feed__activity__context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? React.createElement(\"div\", {\n      className: \"logo__icon feed__activity__context__network\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"3\")) : React.createElement(\"div\", {\n      className: \"feed__activity__context__network \".concat(networkArray[Math.floor(Math.random() * networkArray.length)]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"0x\"), React.createElement(\"div\", {\n      className: \"feed__activity__address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"3Box\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Activity\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0]), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Ethereum Address\")))), Object.values(feedAddress)[0].map(function (item, index) {\n      return function () {\n        if (item.dataType === 'Internal') return React.createElement(FeedTileInternal, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        });\n        if (item.dataType === 'Token') return React.createElement(FeedTileToken, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        });\n        if (item.dataType === 'Txs') return React.createElement(FeedTileTXS, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n        if (item.dataType === 'Public') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          verifiedTwitter: verifiedTwitter,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        });\n        if (item.dataType === 'Private') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        });\n      }();\n    }));\n  }) : !ifFetchingActivity && !publicProfileActivity.length && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"No activity at this address yet\")), isPublicProfilePage && publicProfileActivity.length > 0 ? publicProfileActivity.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"feed__activity__context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? React.createElement(\"div\", {\n      className: \"logo__icon feed__activity__context__network\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"3\")) : React.createElement(\"div\", {\n      className: \"feed__activity__context__network \".concat(networkArray[Math.floor(Math.random() * networkArray.length)]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"0x\"), React.createElement(\"div\", {\n      className: \"feed__activity__address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"3Box\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Activity\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0]), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Ethereum Address\")))), Object.values(feedAddress)[0].map(function (item, index) {\n      return function () {\n        if (item.dataType === 'Internal') return React.createElement(FeedTileInternal, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        });\n        if (item.dataType === 'Token') return React.createElement(FeedTileToken, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        });\n        if (item.dataType === 'Txs') return React.createElement(FeedTileTXS, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        });\n        if (item.dataType === 'Public') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139\n          },\n          __self: this\n        });\n        if (item.dataType === 'Private') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        });\n      }();\n    }));\n  }) : !ifFetchingActivity && publicProfileActivity.length > 0 && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"No activity at this address yet\"))), React.createElement(\"div\", {\n    className: \"feed__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"logo__icon--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"3\"))));\n};\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  isPublicProfilePage: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  publicProfile: PropTypes.object,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object\n};\nActivity.defaultProps = {\n  feedByAddress: [],\n  ifFetchingActivity: false,\n  isPublicProfilePage: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfile: {},\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfile: state.threeBox.publicProfile,\n    publicProfileActivity: state.threeBox.publicProfileActivity\n  };\n};\n\nexport default connect(mapState)(Activity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","networkArray","Activity","ifFetchingActivity","feedByAddress","verifiedGithub","verifiedTwitter","publicProfileActivity","isPublicProfilePage","Loading","length","map","feedAddress","i","Object","keys","Math","floor","random","values","item","index","dataType","parseInt","propTypes","array","bool","string","publicProfile","object","location","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from '../FeedTile';\n\nimport networkArray from '../../utils/networkArray';\nimport Loading from '../../assets/Loading.svg';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst Activity = ({\n  ifFetchingActivity,\n  feedByAddress,\n  verifiedGithub,\n  verifiedTwitter,\n  publicProfileActivity,\n  isPublicProfilePage,\n}) => (\n    <div id=\"feed\">\n      <p className=\"header\" id=\"feed__header\">Activity</p>\n      <div className=\"feed__activity__address\">\n        {(ifFetchingActivity && !isPublicProfilePage)\n          && (\n            <div className=\"feed__activity__load\">\n              <img src={Loading} alt=\"loading\" id=\"activityLoad\" />\n            </div>\n          )\n        }\n        {(!isPublicProfilePage && feedByAddress.length > 0)\n          ? feedByAddress.map((feedAddress, i) => (\n            <div key={i} className=\"feed__activity__tile\">\n              <div className=\"feed__activity__context\">\n                {Object.keys(feedAddress)[0] === 'threeBox' ? (\n                  <div className=\"logo__icon feed__activity__context__network\">\n                    <h2>3</h2>\n                  </div>\n                )\n                  : (\n                    <div className={`feed__activity__context__network ${networkArray[Math.floor(Math.random() * networkArray.length)]}`}>\n                      0x\n                    </div>)\n                }\n                <div className=\"feed__activity__address\">\n                  {Object.keys(feedAddress)[0] === 'threeBox'\n                    ? (\n                      <div>\n                        <h4>\n                          3Box\n                        </h4>\n                        <p>\n                          Activity\n                        </p>\n                      </div>\n                    )\n                    : (\n                      <div>\n                        <h4>\n                          {Object.keys(feedAddress)[0]}\n                        </h4>\n                        <p>\n                          Ethereum Address\n                        </p>\n                      </div>\n                    )}\n                </div>\n              </div>\n              {\n                Object.values(feedAddress)[0].map((item, index) => (\n                  (() => {\n                    if (item.dataType === 'Internal') return <FeedTileInternal item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Token') return <FeedTileToken item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Txs') return <FeedTileTXS item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Public') return <FeedTileActivity item={item} key={index} verifiedGithub={verifiedGithub} verifiedTwitter={verifiedTwitter} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Private') return <FeedTileActivity item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                  })()\n                ))\n              }\n            </div>\n          ))\n          : (!ifFetchingActivity && !publicProfileActivity.length)\n          && (\n            <div className=\"feed__activity__load\">\n              <p>No activity at this address yet</p>\n            </div>\n          )\n        }\n\n        {(isPublicProfilePage && publicProfileActivity.length > 0)\n          ? publicProfileActivity.map((feedAddress, i) => (\n            <div key={i} className=\"feed__activity__tile\">\n              <div className=\"feed__activity__context\">\n                {Object.keys(feedAddress)[0] === 'threeBox' ? (\n                  <div className=\"logo__icon feed__activity__context__network\">\n                    <h2>3</h2>\n                  </div>\n                )\n                  : (\n                    <div className={`feed__activity__context__network ${networkArray[Math.floor(Math.random() * networkArray.length)]}`}>\n                      0x\n                  </div>)\n                }\n                <div className=\"feed__activity__address\">\n                  {Object.keys(feedAddress)[0] === 'threeBox'\n                    ? (\n                      <div>\n                        <h4>\n                          3Box\n                      </h4>\n                        <p>\n                          Activity\n                      </p>\n                      </div>\n                    )\n                    : (\n                      <div>\n                        <h4>\n                          {Object.keys(feedAddress)[0]}\n                        </h4>\n                        <p>\n                          Ethereum Address\n                      </p>\n                      </div>\n                    )}\n                </div>\n              </div>\n              {\n                Object.values(feedAddress)[0].map((item, index) => (\n                  (() => {\n                    if (item.dataType === 'Internal') return <FeedTileInternal item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Token') return <FeedTileToken item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Txs') return <FeedTileTXS item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Public') return <FeedTileActivity item={item} key={index} verifiedGithub={verifiedGithub} isEven={parseInt(index, 10) % 2 === 0} />;\n                    if (item.dataType === 'Private') return <FeedTileActivity item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                  })()\n                ))\n              }\n            </div>\n          ))\n          : (!ifFetchingActivity && publicProfileActivity.length > 0)\n          && (\n            <div className=\"feed__activity__load\">\n              <p>No activity at this address yet</p>\n            </div>\n          )\n        }\n\n      </div>\n      <div className=\"feed__footer\">\n        <div className=\"logo__icon--footer\">\n          <h2>3</h2>\n        </div>\n      </div>\n    </div>\n  );\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  isPublicProfilePage: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  publicProfile: PropTypes.object,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n};\n\nActivity.defaultProps = {\n  feedByAddress: [],\n  ifFetchingActivity: false,\n  isPublicProfilePage: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfile: {},\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfile: state.threeBox.publicProfile,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n});\n\nexport default connect(mapState)(Activity);\n"]},"metadata":{},"sourceType":"module"}