{"ast":null,"code":"'use strict';\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require('babel-runtime/core-js/json/stringify');\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar ipfsLookup = function () {\n  var _ref = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee(hash, conf) {\n    var url;\n    return _regenerator2.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            conf = conf || IPFS_CONF;\n            url = conf.protocol + '://' + conf.host + '/ipfs/' + hash;\n            return _context.abrupt('return', request(url));\n\n          case 3:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function ipfsLookup(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar ethrLookup = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee2(managementKey) {\n    var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROVIDER_URL;\n    var eth, logDecoder, address, hexHash, previousChange, event;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            eth = new _ethjsQuery2.default(new _ethjsProviderHttp2.default(rpcUrl));\n            logDecoder = _ethjsAbi2.default.logDecoder(_ethrDidRegistry2.default.abi, false);\n            address = managementKey.length === 42 ? managementKey.slice(2).toLowerCase() : toEthereumAddress(managementKey);\n            hexHash = void 0;\n            _context2.next = 6;\n            return lastChange(address, rpcUrl);\n\n          case 6:\n            previousChange = _context2.sent;\n\n          case 7:\n            if (!previousChange) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.t0 = logDecoder;\n            _context2.next = 11;\n            return eth.getLogs({\n              address: _ethrDidRegistry2.default.networks[1].address,\n              topics: [ATTRIBUTE_CHANGED_FILTER, '0x000000000000000000000000' + address],\n              fromBlock: previousChange,\n              toBlock: previousChange\n            });\n\n          case 11:\n            _context2.t1 = _context2.sent;\n            event = (0, _context2.t0)(_context2.t1)[0];\n            previousChange = event.previousChange.isZero() ? null : event.previousChange;\n\n            if (!event.name.startsWith(CLAIM_KEY)) {\n              _context2.next = 17;\n              break;\n            }\n\n            hexHash = event.value;\n            return _context2.abrupt('break', 19);\n\n          case 17:\n            _context2.next = 7;\n            break;\n\n          case 19:\n            return _context2.abrupt('return', hexHash ? hexToIpfsHash(hexHash) : null);\n\n          case 20:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function ethrLookup(_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar lastChange = function () {\n  var _ref3 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee3(address) {\n    var rpcUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PROVIDER_URL;\n    var methodAbi, callData, lastChanged;\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            address = '0x' + address;\n            methodAbi = _ethrDidRegistry2.default.abi.filter(function (x) {\n              return x.name === \"changed\";\n            })[0];\n            callData = _ethjsAbi2.default.encodeMethod(methodAbi, [address]);\n            _context3.next = 5;\n            return request(rpcUrl, (0, _stringify2.default)({\n              method: 'eth_call',\n              params: [{\n                to: _ethrDidRegistry2.default.networks[1].address,\n                data: callData\n              }, 'latest'],\n              id: 1,\n              jsonrpc: '2.0'\n            }));\n\n          case 5:\n            lastChanged = _context3.sent.result;\n            return _context3.abrupt('return', lastChanged !== ZERO_HEX ? lastChanged : null);\n\n          case 7:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function lastChange(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar _bs = require('bs58');\n\nvar _bs2 = _interopRequireDefault(_bs);\n\nvar _elliptic = require('elliptic');\n\nvar _jsSha = require('js-sha3');\n\nvar _ethrDidRegistry = require('ethr-did-registry');\n\nvar _ethrDidRegistry2 = _interopRequireDefault(_ethrDidRegistry);\n\nvar _ethjsProviderHttp = require('ethjs-provider-http');\n\nvar _ethjsProviderHttp2 = _interopRequireDefault(_ethjsProviderHttp);\n\nvar _ethjsQuery = require('ethjs-query');\n\nvar _ethjsQuery2 = _interopRequireDefault(_ethjsQuery);\n\nvar _ethjsAbi = require('ethjs-abi');\n\nvar _ethjsAbi2 = _interopRequireDefault(_ethjsAbi);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest;\nvar secp256k1 = new _elliptic.ec('secp256k1');\nvar PROVIDER_URL = 'https://mainnet.infura.io';\nvar IPFS_CONF = {\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n};\nvar ATTRIBUTE_CHANGED_FILTER = '0x18ab6b2ae3d64306c00ce663125f2bd680e441a098de1635bd7ad8b0d44965e4';\nvar ZERO_HEX = '0x0000000000000000000000000000000000000000000000000000000000000000';\nvar CLAIM_KEY = '0x' + Buffer.from('muPortDocument', 'utf8').toString('hex');\n\nvar hexToIpfsHash = function hexToIpfsHash(hexHash) {\n  return _bs2.default.encode(Buffer.from(hexHash.slice(2), 'hex'));\n};\n\nfunction request(url, payload) {\n  var request = new XMLHttpRequest();\n  return new _promise2.default(function (resolve, reject) {\n    request.onreadystatechange = function () {\n      if (request.readyState === 4 && request.timeout !== 1) {\n        if (request.status !== 200) {\n          reject('[muport-did-resolver] status ' + request.status + ': ' + request.responseText);\n        } else {\n          try {\n            resolve(JSON.parse(request.responseText));\n          } catch (jsonError) {\n            reject('[muport-did-resolver] while parsing data: \\'' + String(request.responseText) + '\\', error: ' + String(jsonError));\n          }\n        }\n      }\n    };\n\n    if (payload) {\n      request.open('POST', url);\n      request.setRequestHeader('Content-Type', 'application/json');\n    } else {\n      request.open('GET', url);\n    }\n\n    request.setRequestHeader('accept', 'application/json');\n    request.send(payload);\n  });\n}\n\nvar keccak = function keccak(data) {\n  return Buffer.from(_jsSha.keccak_256.buffer(data));\n};\n\nvar decompressPubKey = function decompressPubKey(key) {\n  return secp256k1.keyFromPublic(key, 'hex').pub.encode('hex');\n};\n\nvar toEthereumAddress = function toEthereumAddress(pubkey) {\n  return keccak(Buffer.from(decompressPubKey(pubkey).slice(2), 'hex')).slice(-20).toString('hex');\n};\n\nmodule.exports = {\n  ethrLookup: ethrLookup,\n  ipfsLookup: ipfsLookup\n};","map":null,"metadata":{},"sourceType":"script"}