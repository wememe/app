{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar assert = require('assert');\n\nvar fsm = require('fsm');\n\nmodule.exports = fsmEvent; // create an fsmEvent instance\n// obj -> fn\n\nfunction fsmEvent(start, events) {\n  if (typeof start === 'object') {\n    events = start;\n    start = 'START';\n  }\n\n  assert.equal(typeof start, 'string');\n  assert.equal(typeof events, 'object');\n  assert.ok(events[start], 'invalid starting state ' + start);\n  assert.ok(fsm.validate(events));\n  var emitter = new EventEmitter();\n  emit._graph = fsm.reachable(events);\n  emit._emitter = emitter;\n  emit._events = events;\n  emit._state = start;\n  emit.emit = emit;\n  emit.on = on;\n  return emit; // set a state listener\n  // str, fn -> null\n\n  function on(event, cb) {\n    emitter.on(event, cb);\n  } // change the state\n  // str -> null\n\n\n  function emit(str) {\n    var nwState = emit._events[emit._state][str];\n\n    if (!reach(emit._state, nwState, emit._graph)) {\n      var err = 'invalid transition: ' + emit._state + ' -> ' + str;\n      return emitter.emit('error', err);\n    }\n\n    var leaveEv = emit._state + ':leave';\n    var enterEv = nwState + ':enter';\n    if (!emit._state) return enter();\n    return leave();\n\n    function leave() {\n      if (!emitter._events[leaveEv]) enter();else emitter.emit(leaveEv, enter);\n    }\n\n    function enter() {\n      if (!emitter._events[enterEv]) done();else emitter.emit(enterEv, done);\n    }\n\n    function done() {\n      emit._state = nwState;\n      emitter.emit(nwState);\n      emitter.emit('done');\n    }\n  }\n} // check if state can reach in reach\n// str, str, obj -> bool\n\n\nfunction reach(curr, next, reachable) {\n  if (!next) return false;\n  if (!curr) return true;\n  var here = reachable[curr];\n  if (!here || !here[next]) return false;\n  return here[next].length === 1;\n}","map":null,"metadata":{},"sourceType":"script"}