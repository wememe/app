{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/MyProfile/ActivityTiles.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from '../FeedTile';\nimport '../../styles/Feed.css';\nimport '../../../views/styles/Profile.css';\nimport '../../styles/NetworkArray.css';\n\nvar ActivityTiles = function ActivityTiles(_ref) {\n  var verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      currentAddress = _ref.currentAddress,\n      name = _ref.name,\n      feedAddress = _ref.feedAddress;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, Object.values(feedAddress)[0].map(function (item, index) {\n    return function () {\n      if (item.dataType === 'Internal') {\n        return React.createElement(FeedTileInternal, {\n          currentAddress: currentAddress,\n          metaDataName: feedAddress.metaData && (feedAddress.metaData.name || feedAddress.metaData.contractDetails && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()),\n          contractImg: feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src,\n          isFromProfile: item.from.toLowerCase() === currentAddress.toLowerCase(),\n          name: name,\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Token') {\n        return React.createElement(FeedTileToken, {\n          currentAddress: currentAddress,\n          metaDataName: feedAddress.metaData && (feedAddress.metaData.name || feedAddress.metaData.contractDetails && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()),\n          item: item,\n          key: index,\n          isFromProfile: item.from.toLowerCase() === currentAddress.toLowerCase(),\n          contractImg: feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Txs') {\n        return React.createElement(FeedTileTXS, {\n          currentAddress: currentAddress,\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && (feedAddress.metaData.name || feedAddress.metaData.contractDetails && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()),\n          isFromProfile: item.from.toLowerCase() === currentAddress.toLowerCase(),\n          contractImg: feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Public') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          verifiedTwitter: verifiedTwitter,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Private') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        });\n      }\n    }();\n  }));\n};\n\nActivityTiles.propTypes = {\n  feedAddress: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string\n};\nActivityTiles.defaultProps = {\n  feedAddress: {},\n  name: '',\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  currentAddress: ''\n};\n\nvar mapState = function mapState(state) {\n  return {\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    currentAddress: state.threeBox.currentAddress,\n    name: state.threeBox.name\n  };\n};\n\nexport default connect(mapState)(ActivityTiles);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/MyProfile/ActivityTiles.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","ActivityTiles","verifiedGithub","verifiedTwitter","currentAddress","name","feedAddress","Object","values","map","item","index","dataType","metaData","contractDetails","charAt","toUpperCase","slice","replace","trim","contractImg","src","from","toLowerCase","parseInt","propTypes","object","string","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from '../FeedTile';\nimport '../../styles/Feed.css';\nimport '../../../views/styles/Profile.css';\nimport '../../styles/NetworkArray.css';\n\nconst ActivityTiles = ({\n  verifiedGithub,\n  verifiedTwitter,\n  currentAddress,\n  name,\n  feedAddress,\n}) => (\n    <React.Fragment>\n      {\n        Object.values(feedAddress)[0].map((item, index) => (\n          (() => {\n            if (item.dataType === 'Internal') {\n              return (\n                <FeedTileInternal\n                  currentAddress={currentAddress}\n                  metaDataName={feedAddress.metaData\n                    && (feedAddress.metaData.name\n                      || (feedAddress.metaData.contractDetails\n                        && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()))}\n                  contractImg={feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src}\n                  isFromProfile={item.from.toLowerCase() === currentAddress.toLowerCase()}\n                  name={name}\n                  item={item}\n                  key={index}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n\n            if (item.dataType === 'Token') {\n              return (\n                <FeedTileToken\n                  currentAddress={currentAddress}\n                  metaDataName={feedAddress.metaData\n                    && (feedAddress.metaData.name\n                      || (feedAddress.metaData.contractDetails\n                        && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()))}\n                  item={item}\n                  key={index}\n                  isFromProfile={item.from.toLowerCase() === currentAddress.toLowerCase()}\n                  contractImg={feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n\n            if (item.dataType === 'Txs') {\n              return (\n                <FeedTileTXS\n                  currentAddress={currentAddress}\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData\n                    && (feedAddress.metaData.name\n                      || (feedAddress.metaData.contractDetails\n                        && (feedAddress.metaData.contractDetails.name.charAt(0).toUpperCase() + feedAddress.metaData.contractDetails.name.slice(1)).replace(/([A-Z])/g, ' $1').trim()))}\n                  isFromProfile={item.from.toLowerCase() === currentAddress.toLowerCase()}\n                  contractImg={feedAddress.metaData && feedAddress.metaData.contractImg && feedAddress.metaData.contractImg.src}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n\n            if (item.dataType === 'Public') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  verifiedGithub={verifiedGithub}\n                  verifiedTwitter={verifiedTwitter}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n\n            if (item.dataType === 'Private') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n          })()\n        ))\n      }\n\n    </React.Fragment>\n  );\n\nActivityTiles.propTypes = {\n  feedAddress: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n};\n\nActivityTiles.defaultProps = {\n  feedAddress: {},\n  name: '',\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  currentAddress: '',\n};\n\nconst mapState = state => ({\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  currentAddress: state.threeBox.currentAddress,\n  name: state.threeBox.name,\n});\n\nexport default connect(mapState)(ActivityTiles);\n"]},"metadata":{},"sourceType":"module"}