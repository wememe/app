{"ast":null,"code":"'use strict';\n\nvar waterfall = require('async/waterfall');\n\nvar log = require('debug')('ipfs:mfs:mkdir');\n\nvar _require = require('./utils'),\n    updateMfsRoot = _require.updateMfsRoot,\n    updateTree = _require.updateTree,\n    traverseTo = _require.traverseTo,\n    FILE_SEPARATOR = _require.FILE_SEPARATOR;\n\nvar defaultOptions = {\n  parents: false,\n  hash: undefined,\n  cidVersion: 0\n};\n\nmodule.exports = function (ipfs) {\n  return function mfsMkdir(path, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = Object.assign({}, defaultOptions, options);\n    options.parents = options.p || options.parents;\n    options.cidVersion = options.cidVersion || 0;\n\n    if (!path) {\n      return callback(new Error('no path given to Mkdir'));\n    }\n\n    path = path.trim();\n\n    if (path === FILE_SEPARATOR) {\n      return callback(options.parents ? null : new Error(\"cannot create directory '\".concat(FILE_SEPARATOR, \"': Already exists\")));\n    }\n\n    log(\"Creating \".concat(path));\n    waterfall([function (cb) {\n      traverseTo(ipfs, path, {\n        parents: false,\n        createLastComponent: false\n      }, function (error) {\n        if (!error) {\n          log(\"\".concat(path, \" already exists\"));\n          return cb(new Error('file already exists'));\n        }\n\n        if (error.message.includes('does not exist')) {\n          log(\"\".concat(path, \" does not exist\"));\n          return cb();\n        }\n\n        return cb(error);\n      });\n    }, function (cb) {\n      return traverseTo(ipfs, path, {\n        parents: options.parents,\n        flush: options.flush,\n        createLastComponent: true\n      }, cb);\n    }, function (result, cb) {\n      return updateTree(ipfs, result, cb);\n    }, function (newRoot, next) {\n      return updateMfsRoot(ipfs, newRoot.node.multihash, next);\n    }], function (error) {\n      if (error && error.message.includes('file already exists') && options.parents) {\n        // when the directory already exists and we are creating intermediate\n        // directories, do not error out (consistent with mkdir -p)\n        error = null;\n      }\n\n      callback(error);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}