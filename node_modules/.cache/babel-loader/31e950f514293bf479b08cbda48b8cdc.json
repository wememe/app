{"ast":null,"code":"'use strict';\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n/**\n * Helper method to check the data type of peer and convert it to PeerInfo\n *\n * @param {PeerInfo|Multiaddr|PeerId} peer\n * @param {PeerBook} peerBook\n * @throws {InvalidPeerType}\n * @returns {PeerInfo}\n */\n\n\nfunction getPeerInfo(peer, peerBook) {\n  var peerInfo; // Already a PeerInfo instance\n\n  if (PeerInfo.isPeerInfo(peer)) {\n    return peer;\n  } // Attempt to convert from Multiaddr instance (not string)\n\n\n  if (multiaddr.isMultiaddr(peer)) {\n    var peerIdB58Str = peer.getPeerId();\n\n    try {\n      peerInfo = peerBook.get(peerIdB58Str);\n    } catch (err) {\n      peerInfo = new PeerInfo(PeerId.createFromB58String(peerIdB58Str));\n    }\n\n    peerInfo.multiaddrs.add(peer);\n    return peerInfo;\n  } // Attempt to convert from PeerId\n\n\n  if (PeerId.isPeerId(peer)) {\n    var _peerIdB58Str = peer.toB58String();\n\n    try {\n      return peerBook.get(_peerIdB58Str);\n    } catch (err) {\n      throw new Error('Couldnt get PeerInfo');\n    }\n  }\n\n  throw new Error('peer type not recognized');\n}\n\nmodule.exports = getPeerInfo;","map":null,"metadata":{},"sourceType":"script"}