{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/FeedTile.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { timeSince } from '../../utils/time';\nimport PrivateActivity from \"../../assets/PrivateActivity.svg\";\nimport Globe from \"../../assets/Globe.svg\";\nimport Save from \"../../assets/Save.svg\";\nimport Delete from \"../../assets/Delete.svg\";\nimport Internal from \"../../assets/Internal.svg\";\nimport EthereumLine from \"../../assets/EthereumLine.svg\";\nimport Send from \"../../assets/Send.svg\";\nimport Receive from \"../../assets/Receive.svg\";\nimport Tokens from \"../../assets/Tokens.svg\";\nimport '../styles/Feed.css';\nexport var FeedTileActivity = function FeedTileActivity(_ref) {\n  var item = _ref.item,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: item.op === 'PUT' ? Save : Delete,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \" You \\n        \".concat(item.op === 'PUT' ? 'updated your' : 'removed your', \"\\n        \").concat(item.dataType === 'Private' ? 'private data' : item.key === 'proof_github' ? 'Github username' : item.key === 'proof_twitter' ? 'Twitter username' : item.key && item.key.replace(/([A-Z])/g, ' $1').trim().toLowerCase() // : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n  // : item.key\n  , \" \"), item.op === 'PUT' ? 'to' : ''), React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, item.op === 'PUT' && (item.key === 'image' || item.key === 'coverPhoto' ? \"\" : item.dataType === 'Private' ? '*****' : item.key === 'emoji' ? React.createElement(\"span\", {\n    className: \"feed__activity__address__amount__emoji\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value) : item.key === 'proof_github' ? verifiedGithub : item.key === 'proof_twitter' ? verifiedTwitter : typeof item.value === 'object' ? \"\".concat(item.value ? Object.keys(item.value)[0] : '-----') : item.value))), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), (item.key === 'image' || item.key === 'coverPhoto') && item.value && item.value.length > 0 && item.value[0].contentUrl && React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(item.value[0].contentUrl['/']),\n    className: \"feed__activity__image clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }));\n};\nFeedTileActivity.propTypes = {\n  item: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string\n};\nFeedTileActivity.defaultProps = {\n  item: {},\n  verifiedGithub: '',\n  verifiedTwitter: ''\n};\nexport var FeedTileInternal = function FeedTileInternal(_ref2) {\n  var item = _ref2.item,\n      currentAddress = _ref2.currentAddress,\n      name = _ref2.name;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Internal,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"You sent\" : \"sent you\"), React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    title: item.tokenName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, item.tokenName ? item.tokenName : 'Token'), React.createElement(\"p\", {\n    className: \"feed__activity__address__amount\",\n    title: (Number(item.value) / 1000000000000000000).toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" \").concat(item.tokenSymbol ? item.tokenSymbol : 'Tokens')), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? item.to.toLowerCase() : name)), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }))));\n};\nFeedTileInternal.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string\n};\nFeedTileInternal.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: ''\n};\nexport var FeedTileToken = function FeedTileToken(_ref3) {\n  var item = _ref3.item,\n      currentAddress = _ref3.currentAddress,\n      name = _ref3.name;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Tokens,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"You sent\" : \"sent you\"), React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    title: item.tokenName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, item.tokenName ? item.tokenName : 'Token'), React.createElement(\"p\", {\n    className: \"feed__activity__address__amount\",\n    title: (Number(item.value) / 1000000000000000000).toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" \").concat(item.tokenSymbol ? item.tokenSymbol : 'Tokens')), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? item.to.toLowerCase() : name)), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }))));\n};\nFeedTileToken.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string\n};\nFeedTileToken.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: ''\n};\nexport var FeedTileTXS = function FeedTileTXS(_ref4) {\n  var item = _ref4.item,\n      currentAddress = _ref4.currentAddress,\n      name = _ref4.name;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: EthereumLine,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"You sent\" : \"sent you\"), React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    title: \"\".concat((Number(item.value) / 1000000000000000000).toString(), \" ETH\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" ETH\")), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? item.to.toLowerCase() : name)), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }))));\n};\nFeedTileTXS.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string\n};\nFeedTileTXS.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: ''\n}; // ACTIVITY\n// export const FeedTileActivity = ({ item, isEven, verifiedGithub, verifiedTwitter }) => (\n//   <div className={`feed__activity ${isEven ? 'darkFeed' : 'lightFeed'}`}>\n//     <div className=\"feed__activity__address__dataType\">\n//       {item.dataType === 'Private'\n//         ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\" />\n//         : <img src={Globe} alt=\"Transaction Icon\" className=\" />\n//       }\n//     </div>\n//     <div className=\"feed__activity__address__toFrom saveDelete\">\n//       <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n//       <p>\n//         {item.op === 'PUT' ? 'Save' : 'Delete'}\n//       </p>\n//     </div>\n//     <p className=\"feed__activity__address__function\">\n//       {item.dataType === 'Private'\n//         ? 'Private'\n//         : item.key === 'proof_github'\n//           ? 'Github'\n//           : item.key === 'proof_twitter'\n//             ? 'Twitter'\n//             : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n//       }\n//     </p>\n//     <p className=\"feed__activity__address__amount\">\n//       {item.key === 'image' || item.key === 'coverPhoto'\n//         ? (item.value && item.value.length > 0 && item.value[0].contentUrl)\n//         && <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n//         // ? <img src={Image} alt=\"Transaction Icon\" className=\" />\n//         : item.dataType === 'Private'\n//           ? '*****'\n//           : item.key === 'emoji'\n//             ? (\n//               <span className=\"feed__activity__address__amount__emoji\">\n//                 {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n//               </span>\n//             )\n//             : item.key === 'proof_github'\n//               ? verifiedGithub\n//               : item.key === 'proof_twitter'\n//                 ? verifiedTwitter\n//                 : typeof item.value === 'object'\n//                   ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n//                   : item.value}\n//     </p>\n//     <p className=\"feed__activity__address__time\">\n//       {timeSince(item.timeStamp * 1000)}\n//     </p>\n//   </div>\n// );\n// TOKEN\n\n{}\n/* <div className=\"feed__activity\">\n{item.from === currentAddress\n ? (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Send} alt=\"Transaction Icon\" />\n     <p>\n       Send\n     </p>\n   </div>\n )\n : (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Receive} alt=\"Transaction Icon\" />\n     <p>\n       Receive\n     </p>\n   </div>\n )\n}\n<p className=\"feed__activity__address__function\" title={item.tokenName}>\n {item.tokenName ? item.tokenName : 'Token'}\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n</p>\n<div className=\"feed__activity__metaData\">\n <p className=\"feed__activity__address__time\">\n   {timeSince(item.timeStamp * 1000)}\n </p>\n <img className=\"feed__activity__address__dataType\" src={Tokens} alt=\"Token Icon\" />\n</div>\n</div> */\n// TXS\n\n{}\n/* <div className=\"feed__activity\">\n{item.from === currentAddress\n ? (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Send} alt=\"Transaction Icon\" />\n     <p>\n       Send\n     </p>\n   </div>\n )\n : (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Receive} alt=\"Transaction Icon\" />\n     <p>\n       Receive\n     </p>\n   </div>\n )\n}\n<p className=\"feed__activity__address__function\">\n Ethereum\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n</p>\n<div className=\"feed__activity__metaData\">\n <p className=\"feed__activity__address__time\">\n   {timeSince(item.timeStamp * 1000)}\n </p>\n <img src={EthereumLine} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType--ethereum feed__activity__address__dataType\" />\n</div>\n</div> */\n// Internal\n\n{\n  /* <div className=\"feed__activity\">\n     {item.from === currentAddress\n       ? (\n         <div className=\"feed__activity__address__toFrom\">\n           <img src={Send} alt=\"Transaction Icon\" />\n           <p>\n             Send\n           </p>\n         </div>\n       )\n       : (\n         <div className=\"feed__activity__address__toFrom\">\n           <img src={Receive} alt=\"Transaction Icon\" />\n           <p>\n             Receive\n           </p>\n         </div>\n       )\n     }\n     <p className=\"feed__activity__address__function\">\n       {item.type && item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n     </p>\n     <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n       {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n     </p>\n      <div className=\"feed__activity__metaData\">\n       <p className=\"feed__activity__address__time\">\n         {timeSince(item.timeStamp * 1000)}\n       </p>\n       <img src={Internal} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n     </div>\n   </div> */\n}","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/FeedTile.jsx"],"names":["React","PropTypes","timeSince","FeedTileActivity","item","verifiedGithub","verifiedTwitter","op","Save","Delete","dataType","key","replace","trim","toLowerCase","value","Object","keys","timeStamp","PrivateActivity","Globe","length","contentUrl","propTypes","object","string","defaultProps","FeedTileInternal","currentAddress","name","Internal","from","tokenName","Number","toString","substring","tokenSymbol","to","FeedTileToken","Tokens","FeedTileTXS","EthereumLine"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { timeSince } from '../../utils/time';\nimport PrivateActivity from '../../assets/PrivateActivity.svg';\nimport Globe from '../../assets/Globe.svg';\nimport Save from '../../assets/Save.svg';\nimport Delete from '../../assets/Delete.svg';\n\nimport Internal from '../../assets/Internal.svg';\nimport EthereumLine from '../../assets/EthereumLine.svg';\nimport Send from '../../assets/Send.svg';\nimport Receive from '../../assets/Receive.svg';\nimport Tokens from '../../assets/Tokens.svg';\n\nimport '../styles/Feed.css';\n\nexport const FeedTileActivity = ({ item, verifiedGithub, verifiedTwitter }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {` You \n        ${item.op === 'PUT' ? 'updated your' : 'removed your'}\n        ${item.dataType === 'Private'\n              ? 'private data'\n              : item.key === 'proof_github'\n                ? 'Github username'\n                : item.key === 'proof_twitter'\n                  ? 'Twitter username'\n                  : item.key && (item.key).replace(/([A-Z])/g, ' $1').trim().toLowerCase()\n            // : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n            // : item.key\n            } `}\n          {item.op === 'PUT' ? 'to' : ''}\n        </p>\n        <p className=\"feed__activity__info__token\">\n          {item.op === 'PUT' && (\n            (item.key === 'image' || item.key === 'coverPhoto')\n              ? \"\"\n              : item.dataType === 'Private'\n                ? '*****'\n                : item.key === 'emoji'\n                  ? (\n                    <span className=\"feed__activity__address__amount__emoji\">\n                      {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n                    </span>\n                  )\n                  : item.key === 'proof_github'\n                    ? verifiedGithub\n                    : item.key === 'proof_twitter'\n                      ? verifiedTwitter\n                      : typeof item.value === 'object'\n                        ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n                        : item.value)}\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n\n\n\n    {((item.key === 'image' || item.key === 'coverPhoto')\n      && item.value\n      && item.value.length > 0\n      && item.value[0].contentUrl)\n      && (\n        <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n      )\n    }\n  </div>\n);\n\nFeedTileActivity.propTypes = {\n  item: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n};\n\nFeedTileActivity.defaultProps = {\n  item: {},\n  verifiedGithub: '',\n  verifiedTwitter: '',\n};\n\nexport const FeedTileInternal = ({ item, currentAddress, name }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={Internal} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? \"You sent\"\n            : \"sent you\"\n          }\n        </p>\n        <p className=\"feed__activity__info__token\" title={item.tokenName}>\n          {item.tokenName ? item.tokenName : 'Token'}\n        </p>\n        <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? item.to.toLowerCase()\n            : name\n          }\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileInternal.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n};\n\nFeedTileInternal.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: '',\n};\n\nexport const FeedTileToken = ({ item, currentAddress, name }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={Tokens} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? \"You sent\"\n            : \"sent you\"\n          }\n        </p>\n        <p className=\"feed__activity__info__token\" title={item.tokenName}>\n          {item.tokenName ? item.tokenName : 'Token'}\n        </p>\n        <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? item.to.toLowerCase()\n            : name\n          }\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileToken.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n};\n\nFeedTileToken.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: '',\n};\n\nexport const FeedTileTXS = ({ item, currentAddress, name }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={EthereumLine} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? \"You sent\"\n            : \"sent you\"\n          }\n        </p>\n        <p className=\"feed__activity__info__token\" title={`${(Number(item.value) / 1000000000000000000).toString()} ETH`}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? item.to.toLowerCase()\n            : name\n          }\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileTXS.propTypes = {\n  item: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n};\n\nFeedTileTXS.defaultProps = {\n  item: {},\n  currentAddress: '',\n  name: '',\n};\n\n\n\n\n// ACTIVITY\n// export const FeedTileActivity = ({ item, isEven, verifiedGithub, verifiedTwitter }) => (\n//   <div className={`feed__activity ${isEven ? 'darkFeed' : 'lightFeed'}`}>\n//     <div className=\"feed__activity__address__dataType\">\n//       {item.dataType === 'Private'\n//         ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\" />\n//         : <img src={Globe} alt=\"Transaction Icon\" className=\" />\n//       }\n//     </div>\n//     <div className=\"feed__activity__address__toFrom saveDelete\">\n//       <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n//       <p>\n//         {item.op === 'PUT' ? 'Save' : 'Delete'}\n//       </p>\n//     </div>\n//     <p className=\"feed__activity__address__function\">\n//       {item.dataType === 'Private'\n//         ? 'Private'\n//         : item.key === 'proof_github'\n//           ? 'Github'\n//           : item.key === 'proof_twitter'\n//             ? 'Twitter'\n//             : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n//       }\n//     </p>\n//     <p className=\"feed__activity__address__amount\">\n//       {item.key === 'image' || item.key === 'coverPhoto'\n//         ? (item.value && item.value.length > 0 && item.value[0].contentUrl)\n//         && <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n//         // ? <img src={Image} alt=\"Transaction Icon\" className=\" />\n//         : item.dataType === 'Private'\n//           ? '*****'\n//           : item.key === 'emoji'\n//             ? (\n//               <span className=\"feed__activity__address__amount__emoji\">\n//                 {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n//               </span>\n//             )\n//             : item.key === 'proof_github'\n//               ? verifiedGithub\n//               : item.key === 'proof_twitter'\n//                 ? verifiedTwitter\n//                 : typeof item.value === 'object'\n//                   ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n//                   : item.value}\n//     </p>\n//     <p className=\"feed__activity__address__time\">\n//       {timeSince(item.timeStamp * 1000)}\n//     </p>\n//   </div>\n// );\n\n\n\n// TOKEN\n{/* <div className=\"feed__activity\">\n{item.from === currentAddress\n  ? (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Send} alt=\"Transaction Icon\" />\n      <p>\n        Send\n      </p>\n    </div>\n  )\n  : (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Receive} alt=\"Transaction Icon\" />\n      <p>\n        Receive\n      </p>\n    </div>\n  )\n}\n<p className=\"feed__activity__address__function\" title={item.tokenName}>\n  {item.tokenName ? item.tokenName : 'Token'}\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n  {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n</p>\n\n<div className=\"feed__activity__metaData\">\n  <p className=\"feed__activity__address__time\">\n    {timeSince(item.timeStamp * 1000)}\n  </p>\n  <img className=\"feed__activity__address__dataType\" src={Tokens} alt=\"Token Icon\" />\n</div>\n</div> */}\n\n\n// TXS\n{/* <div className=\"feed__activity\">\n{item.from === currentAddress\n  ? (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Send} alt=\"Transaction Icon\" />\n      <p>\n        Send\n      </p>\n    </div>\n  )\n  : (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Receive} alt=\"Transaction Icon\" />\n      <p>\n        Receive\n      </p>\n    </div>\n  )\n}\n<p className=\"feed__activity__address__function\">\n  Ethereum\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n  {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n</p>\n<div className=\"feed__activity__metaData\">\n  <p className=\"feed__activity__address__time\">\n    {timeSince(item.timeStamp * 1000)}\n  </p>\n  <img src={EthereumLine} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType--ethereum feed__activity__address__dataType\" />\n</div>\n</div> */}\n\n// Internal\n{/* <div className=\"feed__activity\">\n    {item.from === currentAddress\n      ? (\n        <div className=\"feed__activity__address__toFrom\">\n          <img src={Send} alt=\"Transaction Icon\" />\n          <p>\n            Send\n          </p>\n        </div>\n      )\n      : (\n        <div className=\"feed__activity__address__toFrom\">\n          <img src={Receive} alt=\"Transaction Icon\" />\n          <p>\n            Receive\n          </p>\n        </div>\n      )\n    }\n    <p className=\"feed__activity__address__function\">\n      {item.type && item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n    </p>\n    <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n      {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n    </p>\n\n    <div className=\"feed__activity__metaData\">\n      <p className=\"feed__activity__address__time\">\n        {timeSince(item.timeStamp * 1000)}\n      </p>\n      <img src={Internal} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n    </div>\n  </div> */}"]},"metadata":{},"sourceType":"module"}