{"ast":null,"code":"'use strict';\n\nvar unmarshal = require('ipfs-unixfs').unmarshal;\n\nvar _require = require('./utils'),\n    traverseTo = _require.traverseTo,\n    formatCid = _require.formatCid;\n\nvar waterfall = require('async/waterfall');\n\nvar log = require('debug')('ipfs:mfs:stat');\n\nvar defaultOptions = {\n  hash: false,\n  size: false,\n  withLocal: false,\n  cidBase: 'base58btc'\n};\n\nmodule.exports = function (ipfs) {\n  return function mfsStat(path, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = Object.assign({}, defaultOptions, options);\n    log(\"Fetching stats for \".concat(path));\n    waterfall([function (done) {\n      return traverseTo(ipfs, path, {\n        withCreateHint: false\n      }, done);\n    }, function (_ref, done) {\n      var node = _ref.node;\n\n      if (options.hash) {\n        return done(null, {\n          hash: formatCid(node.multihash, options.cidBase)\n        });\n      } else if (options.size) {\n        return done(null, {\n          size: node.size\n        });\n      }\n\n      var meta = unmarshal(node.data);\n      var blocks = node.links.length;\n\n      if (meta.type === 'file') {\n        blocks = meta.blockSizes.length;\n      }\n\n      done(null, {\n        hash: formatCid(node.multihash, options.cidBase),\n        size: meta.fileSize() || 0,\n        cumulativeSize: node.size,\n        blocks: blocks,\n        type: meta.type,\n        local: undefined,\n        sizeLocal: undefined,\n        withLocality: false\n      });\n    }], callback);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}