{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:websocket-star');\n\nvar multiaddr = require('multiaddr');\n\nvar EE = require('events').EventEmitter;\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar Connection = require('interface-connection').Connection;\n\nvar setImmediate = require('async/setImmediate');\n\nvar utils = require('./utils');\n\nvar Listener = require('./listener');\n\nvar cleanUrlSIO = utils.cleanUrlSIO;\n\nvar mafmt = require('mafmt');\n\nvar withIs = require('class-is');\n\nvar WebsocketStar =\n/*#__PURE__*/\nfunction () {\n  /**\n    * WebsocketStar Transport\n    * @class\n    * @param {Object} options - Options for the listener\n    * @param {PeerId} options.id - Id for the crypto challenge\n    */\n  function WebsocketStar(options) {\n    _classCallCheck(this, WebsocketStar);\n\n    options = options || {};\n    this.id = options.id;\n    this.flag = options.allowJoinWithDisabledChallenge; // let's just refer to it as \"flag\"\n\n    this.discovery = new EE();\n    this.discovery.tag = 'websocketStar';\n\n    this.discovery.start = function (callback) {\n      setImmediate(callback);\n    };\n\n    this.discovery.stop = function (callback) {\n      setImmediate(callback);\n    };\n\n    this.listeners_list = {};\n    this._peerDiscovered = this._peerDiscovered.bind(this);\n  }\n  /**\n    * Sets the id after transport creation (aka the lazy way)\n    * @param {PeerId} id\n    * @returns {undefined}\n    */\n\n\n  _createClass(WebsocketStar, [{\n    key: \"lazySetId\",\n    value: function lazySetId(id) {\n      if (!id) return;\n      this.id = id;\n      this.canCrypto = true;\n    }\n    /**\n      * Dials a peer\n      * @param {Multiaddr} ma - Multiaddr to dial to\n      * @param {Object} options\n      * @param {function} callback\n      * @returns {Connection}\n      */\n\n  }, {\n    key: \"dial\",\n    value: function dial(ma, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      var url;\n\n      try {\n        url = cleanUrlSIO(ma);\n      } catch (err) {\n        return callback(err); // early\n      }\n\n      var listener = this.listeners_list[url];\n\n      if (!listener) {\n        callback(new Error('No listener for this server'));\n        return new Connection();\n      }\n\n      return listener.dial(ma, options, callback);\n    }\n    /**\n      * Creates a listener\n      * @param {Object} options\n      * @param {function} handler\n      * @returns {Listener}\n      */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      var listener = new Listener({\n        id: this.id,\n        handler: handler,\n        listeners: this.listeners_list,\n        flag: this.flag\n      });\n      listener.on('peer', this._peerDiscovered);\n      return listener;\n    }\n    /**\n      * Filters multiaddrs\n      * @param {Multiaddr[]} multiaddrs\n      * @returns {boolean}\n      */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      if (!Array.isArray(multiaddrs)) {\n        multiaddrs = [multiaddrs];\n      }\n\n      return multiaddrs.filter(function (ma) {\n        return mafmt.WebSocketStar.matches(ma);\n      });\n    }\n    /**\n      * Used to fire peer events on the discovery part\n      * @param {Multiaddr} maStr\n      * @fires Discovery#peer\n      * @returns {undefined}\n      * @private\n      */\n\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(maStr) {\n      log('Peer Discovered:', maStr);\n      var peerIdStr = maStr.split('/ipfs/').pop();\n      var peerId = PeerId.createFromB58String(peerIdStr);\n      var peerInfo = new PeerInfo(peerId);\n      peerInfo.multiaddrs.add(multiaddr(maStr));\n      this.discovery.emit('peer', peerInfo);\n    }\n  }]);\n\n  return WebsocketStar;\n}();\n\nmodule.exports = withIs(WebsocketStar, {\n  className: 'WebsocketStar',\n  symbolName: '@libp2p/js-libp2p-websocket-star/websocketstar'\n});","map":null,"metadata":{},"sourceType":"script"}