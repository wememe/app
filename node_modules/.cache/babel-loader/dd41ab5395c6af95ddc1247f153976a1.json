{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/ActivityTiles.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from './FeedTile';\nimport ActivityHeader from './ActivityHeader';\nimport Loading from \"../../assets/Loading.svg\";\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar Activity = function Activity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      feedByAddress = _ref.feedByAddress,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      publicProfileActivity = _ref.publicProfileActivity,\n      currentAddress = _ref.currentAddress,\n      name = _ref.name;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, Object.values(feedAddress)[0].map(function (item, index) {\n    return function () {\n      if (item.dataType === 'Internal') {\n        return React.createElement(FeedTileInternal, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Token') {\n        return React.createElement(FeedTileToken, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Txs') {\n        return React.createElement(FeedTileTXS, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Public') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          verifiedTwitter: verifiedTwitter,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        });\n      }\n\n      if (item.dataType === 'Private') {\n        return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        });\n      }\n    };\n  }));\n};\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string\n};\nActivity.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    currentAddress: state.threeBox.currentAddress,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    name: state.threeBox.name,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(Activity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/ActivityTiles.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","ActivityHeader","Activity","ifFetchingActivity","feedByAddress","verifiedGithub","verifiedTwitter","publicProfileActivity","currentAddress","name","Object","values","feedAddress","map","item","index","dataType","metaData","parseInt","propTypes","array","bool","string","publicProfileAddress","location","object","publicName","defaultProps","mapState","state","threeBox"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,WADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,gBAJF,QAKO,YALP;AAMA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,OAAO,oBAAP;AACA,OAAO,gCAAP;AACA,OAAO,4BAAP;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,MACfC,kBADe,QACfA,kBADe;AAAA,MAEfC,aAFe,QAEfA,aAFe;AAAA,MAGfC,cAHe,QAGfA,cAHe;AAAA,MAIfC,eAJe,QAIfA,eAJe;AAAA,MAKfC,qBALe,QAKfA,qBALe;AAAA,MAMfC,cANe,QAMfA,cANe;AAAA,MAOfC,IAPe,QAOfA,IAPe;AAAA,SASb,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIC,MAAM,CAACC,MAAP,CAAcC,WAAd,EAA2B,CAA3B,EAA8BC,GAA9B,CAAkC,UAACC,IAAD,EAAOC,KAAP;AAAA,WAC/B,YAAM;AACL,UAAID,IAAI,CAACE,QAAL,KAAkB,UAAtB,EAAkC;AAChC,eACE,oBAAC,gBAAD;AACE,UAAA,IAAI,EAAEF,IADR;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,YAAY,EAAEH,WAAW,CAACK,QAAZ,IAAwBL,WAAW,CAACK,QAAZ,CAAqBR,IAH7D;AAIE,UAAA,cAAc,EAAED,cAJlB;AAKE,UAAA,IAAI,EAAEC,IALR;AAME,UAAA,MAAM,EAAES,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAAtB,KAA4B,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AACD,UAAID,IAAI,CAACE,QAAL,KAAkB,OAAtB,EAA+B;AAC7B,eACE,oBAAC,aAAD;AACE,UAAA,IAAI,EAAEF,IADR;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,YAAY,EAAEH,WAAW,CAACK,QAAZ,IAAwBL,WAAW,CAACK,QAAZ,CAAqBR,IAH7D;AAIE,UAAA,cAAc,EAAED,cAJlB;AAKE,UAAA,IAAI,EAAEC,IALR;AAME,UAAA,MAAM,EAAES,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAAtB,KAA4B,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AACD,UAAID,IAAI,CAACE,QAAL,KAAkB,KAAtB,EAA6B;AAC3B,eACE,oBAAC,WAAD;AACE,UAAA,IAAI,EAAEF,IADR;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,YAAY,EAAEH,WAAW,CAACK,QAAZ,IAAwBL,WAAW,CAACK,QAAZ,CAAqBR,IAH7D;AAIE,UAAA,cAAc,EAAED,cAJlB;AAKE,UAAA,IAAI,EAAEC,IALR;AAME,UAAA,MAAM,EAAES,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAAtB,KAA4B,CANtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;AACD,UAAID,IAAI,CAACE,QAAL,KAAkB,QAAtB,EAAgC;AAC9B,eACE,oBAAC,gBAAD;AACE,UAAA,IAAI,EAAEF,IADR;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,cAAc,EAAEV,cAHlB;AAIE,UAAA,eAAe,EAAEC,eAJnB;AAKE,UAAA,MAAM,EAAEY,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAAtB,KAA4B,CALtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AACD,UAAID,IAAI,CAACE,QAAL,KAAkB,SAAtB,EAAiC;AAC/B,eACE,oBAAC,gBAAD;AACE,UAAA,IAAI,EAAEF,IADR;AAEE,UAAA,GAAG,EAAEC,KAFP;AAGE,UAAA,MAAM,EAAEG,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAR,GAAsB,CAAtB,KAA4B,CAHtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;AACF,KArD+B;AAAA,GAAlC,CAFJ,CATa;AAAA,CAAjB;;AAuEAb,QAAQ,CAACiB,SAAT,GAAqB;AACnBf,EAAAA,aAAa,EAAET,SAAS,CAACyB,KADN;AAEnBjB,EAAAA,kBAAkB,EAAER,SAAS,CAAC0B,IAFX;AAGnBhB,EAAAA,cAAc,EAAEV,SAAS,CAAC2B,MAHP;AAInBhB,EAAAA,eAAe,EAAEX,SAAS,CAAC2B,MAJR;AAKnBd,EAAAA,cAAc,EAAEb,SAAS,CAAC2B,MALP;AAMnBb,EAAAA,IAAI,EAAEd,SAAS,CAAC2B,MANG;AAOnBC,EAAAA,oBAAoB,EAAE5B,SAAS,CAAC2B,MAPb;AAQnBf,EAAAA,qBAAqB,EAAEZ,SAAS,CAACyB,KARd;AASnBI,EAAAA,QAAQ,EAAE7B,SAAS,CAAC8B,MATD;AAUnBC,EAAAA,UAAU,EAAE/B,SAAS,CAAC2B;AAVH,CAArB;AAaApB,QAAQ,CAACyB,YAAT,GAAwB;AACtBvB,EAAAA,aAAa,EAAE,EADO;AAEtBK,EAAAA,IAAI,EAAE,EAFgB;AAGtBN,EAAAA,kBAAkB,EAAE,KAHE;AAItBE,EAAAA,cAAc,EAAE,EAJM;AAKtBC,EAAAA,eAAe,EAAE,EALK;AAMtBiB,EAAAA,oBAAoB,EAAE,EANA;AAOtBf,EAAAA,cAAc,EAAE,EAPM;AAQtBkB,EAAAA,UAAU,EAAE,EARU;AAStBnB,EAAAA,qBAAqB,EAAE,EATD;AAUtBiB,EAAAA,QAAQ,EAAE;AAVY,CAAxB;;AAaA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK;AAAA,SAAK;AACzBzB,IAAAA,aAAa,EAAEyB,KAAK,CAACC,QAAN,CAAe1B,aADL;AAEzBD,IAAAA,kBAAkB,EAAE0B,KAAK,CAACC,QAAN,CAAe3B,kBAFV;AAGzBE,IAAAA,cAAc,EAAEwB,KAAK,CAACC,QAAN,CAAezB,cAHN;AAIzBC,IAAAA,eAAe,EAAEuB,KAAK,CAACC,QAAN,CAAexB,eAJP;AAKzBC,IAAAA,qBAAqB,EAAEsB,KAAK,CAACC,QAAN,CAAevB,qBALb;AAMzBC,IAAAA,cAAc,EAAEqB,KAAK,CAACC,QAAN,CAAetB,cANN;AAOzBe,IAAAA,oBAAoB,EAAEM,KAAK,CAACC,QAAN,CAAeP,oBAPZ;AAQzBd,IAAAA,IAAI,EAAEoB,KAAK,CAACC,QAAN,CAAerB,IARI;AASzBiB,IAAAA,UAAU,EAAEG,KAAK,CAACC,QAAN,CAAeJ;AATF,GAAL;AAAA,CAAtB;;AAYA,eAAe9B,OAAO,CAACgC,QAAD,CAAP,CAAkB1B,QAAlB,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from './FeedTile';\nimport ActivityHeader from './ActivityHeader';\nimport Loading from '../../assets/Loading.svg';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst Activity = ({\n  ifFetchingActivity,\n  feedByAddress,\n  verifiedGithub,\n  verifiedTwitter,\n  publicProfileActivity,\n  currentAddress,\n  name,\n}) => (\n    <React.Fragment>\n      {\n        Object.values(feedAddress)[0].map((item, index) => (\n          (() => {\n            if (item.dataType === 'Internal') {\n              return (\n                <FeedTileInternal\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0} />\n              );\n            }\n            if (item.dataType === 'Token') {\n              return (\n                <FeedTileToken\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Txs') {\n              return (\n                <FeedTileTXS\n                  item={item}\n                  key={index}\n                  metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                  currentAddress={currentAddress}\n                  name={name}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Public') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  verifiedGithub={verifiedGithub}\n                  verifiedTwitter={verifiedTwitter}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n            if (item.dataType === 'Private') {\n              return (\n                <FeedTileActivity\n                  item={item}\n                  key={index}\n                  isEven={parseInt(index, 10) % 2 === 0}\n                />);\n            }\n          })\n        ))\n      }\n\n    </React.Fragment>\n  );\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string,\n};\n\nActivity.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  currentAddress: state.threeBox.currentAddress,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  name: state.threeBox.name,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(Activity);\n"]},"metadata":{},"sourceType":"module"}