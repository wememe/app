{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');\n\nvar Multihash = require('multihashes');\n\nvar sha256 = require('js-sha256').sha256;\n\nmodule.exports = {\n  openBoxConsent: function openBoxConsent(fromAddress, ethereum) {\n    var text = 'This app wants to view and update your 3Box profile.';\n    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n    var params = [msg, fromAddress];\n    var method = 'personal_sign';\n    return new Promise(function (resolve, reject) {\n      ethereum.sendAsync({\n        method: method,\n        params: params,\n        fromAddress: fromAddress\n      }, function (err, result) {\n        if (err) reject(err);\n        if (result.error) reject(result.error);\n        resolve(result.result);\n      });\n    });\n  },\n  getLinkConsent: function getLinkConsent(fromAddress, toDID, ethereum) {\n    var text = 'Create a new 3Box profile' + '\\n\\n' + '- \\n' + 'Your unique profile ID is ' + toDID;\n    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n    var params = [msg, fromAddress];\n    var method = 'personal_sign';\n    return new Promise(function (resolve, reject) {\n      ethereum.sendAsync({\n        method: method,\n        params: params,\n        fromAddress: fromAddress\n      }, function (err, result) {\n        if (err) reject(err);\n        if (result.error) reject(result.error);\n        var out = {\n          msg: text,\n          sig: result.result\n        };\n        resolve(out);\n      });\n    });\n  },\n  fetchJson: function () {\n    var _fetchJson = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee(url, body) {\n      var opts;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (body) {\n                opts = {\n                  body: JSON.stringify(body),\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                };\n              }\n\n              _context.next = 3;\n              return fetch(url, opts);\n\n            case 3:\n              return _context.abrupt(\"return\", _context.sent.json());\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function fetchJson(_x, _x2) {\n      return _fetchJson.apply(this, arguments);\n    };\n  }(),\n  fetchText: function () {\n    var _fetchText = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee2(url, opts) {\n      return _regenerator.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch(url, opts);\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent.text());\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function fetchText(_x3, _x4) {\n      return _fetchText.apply(this, arguments);\n    };\n  }(),\n  sha256Multihash: function sha256Multihash(str) {\n    var digest = Buffer.from(sha256.digest(str));\n    return Multihash.encode(digest, 'sha2-256').toString('hex');\n  },\n  sha256: sha256\n};","map":null,"metadata":{},"sourceType":"script"}