{"ast":null,"code":"'use strict';\n\nvar waterfall = require('async/waterfall');\n\nvar DirSharded = require('./dir-sharded');\n\nmodule.exports = flatToShard;\n\nfunction flatToShard(child, dir, threshold, options, callback) {\n  maybeFlatToShardOne(dir, threshold, options, function (err, newDir) {\n    if (err) {\n      callback(err);\n      return; // early\n    }\n\n    var parent = newDir.parent;\n\n    if (parent) {\n      waterfall([function (callback) {\n        if (newDir !== dir) {\n          if (child) {\n            child.parent = newDir;\n          }\n\n          parent.put(newDir.parentKey, newDir, callback);\n        } else {\n          callback();\n        }\n      }, function (callback) {\n        if (parent) {\n          flatToShard(newDir, parent, threshold, options, callback);\n        } else {\n          callback(null, newDir);\n        }\n      }], callback);\n    } else {\n      // no parent, we're done climbing tree\n      callback(null, newDir);\n    }\n  });\n}\n\nfunction maybeFlatToShardOne(dir, threshold, options, callback) {\n  if (dir.flat && dir.directChildrenCount() >= threshold) {\n    definitelyShardOne(dir, options, callback);\n  } else {\n    callback(null, dir);\n  }\n}\n\nfunction definitelyShardOne(oldDir, options, callback) {\n  var newDir = DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false\n  }, options);\n  oldDir.eachChildSeries(function (key, value, callback) {\n    newDir.put(key, value, callback);\n  }, function (err) {\n    if (err) {\n      callback(err);\n    } else {\n      callback(err, newDir);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}