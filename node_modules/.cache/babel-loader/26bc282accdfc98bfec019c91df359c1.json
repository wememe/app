{"ast":null,"code":"/**\n  ### `source(socket)`\n\n  Create a pull-stream `Source` that will read data from the `socket`.\n\n  <<< examples/read.js\n\n**/\nvar Buffer = require('safe-buffer').Buffer; // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = function (socket, cb) {\n  var buffer = [];\n  var receiver;\n  var ended;\n  var started = false;\n  socket.addEventListener('message', function (evt) {\n    var data = evt.data;\n\n    if (isArrayBuffer(data)) {\n      data = Buffer.from(data);\n    }\n\n    if (receiver) {\n      return receiver(null, data);\n    }\n\n    buffer.push(data);\n  });\n  socket.addEventListener('close', function (evt) {\n    if (ended) return;\n\n    if (receiver) {\n      receiver(ended = true);\n    }\n  });\n  socket.addEventListener('error', function (evt) {\n    if (ended) return;\n    ended = evt;\n\n    if (!started) {\n      started = true;\n      cb && cb(evt);\n    }\n\n    if (receiver) {\n      receiver(ended);\n    }\n  });\n  socket.addEventListener('open', function (evt) {\n    if (started || ended) return;\n    started = true;\n  });\n\n  function read(abort, cb) {\n    receiver = null; //if stream has already ended.\n\n    if (ended) return cb(ended); // if ended, abort\n    else if (abort) {\n        //this will callback when socket closes\n        receiver = cb;\n        socket.close();\n      } // return data, if any\n      else if (buffer.length > 0) cb(null, buffer.shift()); // wait for more data (or end)\n        else receiver = cb;\n  }\n\n  ;\n  return read;\n};","map":null,"metadata":{},"sourceType":"script"}