{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/x509');\n\nvar forge = require('node-forge/lib/forge');\n\nvar pki = forge.pki;\nexports = module.exports;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Buffer contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n *\n * @param {KeyInfo} key - The id and name of the key\n * @param {RsaPrivateKey} privateKey - The naked key\n * @param {function(Error, Certificate)} callback\n * @returns {undefined}\n */\n\nexports.certificateForKey = function (key, privateKey, callback) {\n  var publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);\n  var cert = pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = '01';\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);\n  var attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }]); // self-sign certificate\n\n  cert.sign(privateKey);\n  return callback(null, cert);\n};","map":null,"metadata":{},"sourceType":"script"}