{"ast":null,"code":"'use strict';\n\nvar SmartBuffer = require('smart-buffer').SmartBuffer;\n\nvar multihashes = require('multihashes/src/constants');\n\nvar multicodecs = require('multicodec/src/base-table');\n\nvar multihash = require('multihashes');\n\nvar CID = require('cids');\n\nexports = module.exports;\nexports.SHA1_LENGTH = multihashes.defaultLengths[multihashes.names.sha1];\n\nexports.find = function (buf, byte) {\n  for (var i = 0; i < buf.length; i++) {\n    if (buf[i] === byte) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nexports.parsePersonLine = function (line) {\n  var matched = line.match(/^(([^<]+)\\s)?\\s?<([^>]+)>\\s?(\\d+\\s[+\\-\\d]+)?$/);\n\n  if (matched === null) {\n    return null;\n  }\n\n  return {\n    name: matched[2],\n    email: matched[3],\n    date: matched[4]\n  };\n};\n\nexports.serializePersonLine = function (node) {\n  var parts = [];\n\n  if (node.name) {\n    parts.push(node.name);\n  }\n\n  parts.push('<' + node.email + '>');\n\n  if (node.date) {\n    parts.push(node.date);\n  }\n\n  return parts.join(' ');\n};\n\nexports.shaToCid = function (buf) {\n  var mhashBuf = new SmartBuffer();\n  mhashBuf.writeUInt8(1);\n  mhashBuf.writeBuffer(multicodecs['git-raw']);\n  mhashBuf.writeUInt8(multihashes.names.sha1);\n  mhashBuf.writeUInt8(exports.SHA1_LENGTH);\n  mhashBuf.writeBuffer(buf);\n  return mhashBuf.toBuffer();\n};\n\nexports.cidToSha = function (cidBuf) {\n  var mh = multihash.decode(new CID(cidBuf).multihash);\n\n  if (mh.name !== 'sha1') {\n    return null;\n  }\n\n  return mh.digest;\n};","map":null,"metadata":{},"sourceType":"script"}