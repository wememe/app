{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar values = require('lodash/values');\n\nvar OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nmodule.exports = function swarm(self) {\n  return {\n    peers: promisify(function (opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n\n      opts = opts || {};\n\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR));\n      }\n\n      var verbose = opts.v || opts.verbose; // TODO: return latency and streams when verbose is set\n      // we currently don't have this information\n\n      var peers = [];\n      values(self._peerInfoBook.getAll()).forEach(function (peer) {\n        var connectedAddr = peer.isConnected();\n\n        if (!connectedAddr) {\n          return;\n        }\n\n        var tupple = {\n          addr: connectedAddr,\n          peer: peer.id\n        };\n\n        if (verbose) {\n          tupple.latency = 'unknown';\n        }\n\n        peers.push(tupple);\n      });\n      callback(null, peers);\n    }),\n    // all the addrs we know\n    addrs: promisify(function (callback) {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR));\n      }\n\n      var peers = values(self._peerInfoBook.getAll());\n      callback(null, peers);\n    }),\n    localAddrs: promisify(function (callback) {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR));\n      }\n\n      callback(null, self._libp2pNode.peerInfo.multiaddrs.toArray());\n    }),\n    connect: promisify(function (maddr, callback) {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR));\n      }\n\n      self._libp2pNode.dial(maddr, callback);\n    }),\n    disconnect: promisify(function (maddr, callback) {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR));\n      }\n\n      self._libp2pNode.hangUp(maddr, callback);\n    }),\n    filters: promisify(function (callback) {\n      return callback(new Error('Not implemented'));\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}