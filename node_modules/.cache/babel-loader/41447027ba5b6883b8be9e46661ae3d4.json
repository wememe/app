{"ast":null,"code":"'use strict';\n\nvar series = require('async/series');\n\nvar propose = require('./propose');\n\nvar exchange = require('./exchange');\n\nvar finish = require('./finish'); // Performs initial communication over insecure channel to share keys, IDs,\n// and initiate communication, assigning all necessary params.\n\n\nmodule.exports = function handshake(state, callback) {\n  series([function (cb) {\n    return propose(state, cb);\n  }, function (cb) {\n    return exchange(state, cb);\n  }, function (cb) {\n    return finish(state, cb);\n  }], function (err) {\n    state.cleanSecrets();\n\n    if (err) {\n      if (err === true) {\n        err = new Error('Stream ended prematurely');\n      }\n\n      state.shake.abort(err);\n    } // signal when the handshake is finished so that plumbing can happen\n\n\n    callback(err);\n  });\n  return state.stream;\n};","map":null,"metadata":{},"sourceType":"script"}