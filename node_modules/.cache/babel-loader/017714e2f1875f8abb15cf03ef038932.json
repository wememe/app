{"ast":null,"code":"'use strict'; // socket.io-pull-stream\n\nvar Queue = require('data-queue');\n\nvar uuid = require('uuid');\n\nvar pull = require('pull-stream');\n\nvar sioname = function sioname(type, name) {\n  return 'socket.io-pull-stream.' + type + (name ? '.' + name : '');\n};\n\nvar debug = require('debug');\n\nvar _log = debug('socket.io-pull-stream');\n\nfunction doCodec(codec, data) {\n  if (data == null) return data;\n\n  try {\n    return codec(data);\n  } catch (e) {\n    console.error('Codec Error');\n    console.error(e);\n    return false;\n  }\n}\n\nvar codecs = {\n  hex: {\n    encode: function encode(v) {\n      return v.toString('hex');\n    },\n    decode: function decode(v) {\n      return Buffer.from(v, 'hex');\n    }\n  },\n  plain: {\n    encode: function encode(v) {\n      return v;\n    },\n    decode: function decode(v) {\n      return v;\n    }\n  },\n  buffer: {\n    // always do Buffer.from because browsers\n    encode: function encode(v) {\n      return Buffer.from(v);\n    },\n    decode: function decode(v) {\n      return Buffer.from(v);\n    }\n  }\n};\n\nfunction getCodec(c) {\n  if (!c) c = 'plain';\n  if (typeof c === 'object') return c;\n  var co = codecs[c];\n  if (!co) throw new Error('Invalid codec ' + c);\n  return co;\n}\n\nfunction SIOSource(sio, id, opt) {\n  var q = Queue();\n  var log = sio.sioplog.bind(sio.sioplog, 'source(' + id + ')');\n  var codec = getCodec(opt.codec).decode;\n  log('create source');\n  sio.emit(sioname('accept', id));\n\n  function unlisten() {\n    sio.removeAllListeners(sioname('error', id));\n    sio.removeAllListeners(sioname('queue', id));\n  }\n\n  sio.on(sioname('error', id), function (err) {\n    if (err === true) log('finish');else log('error');\n    unlisten();\n    q.append({\n      end: err\n    });\n  });\n  sio.on(sioname('queue', id), function (data) {\n    log('queue data');\n    q.append({\n      data: doCodec(codec, data)\n    });\n  });\n  sio.once('disconnect', function () {\n    unlisten();\n    q.append({\n      end: true\n    });\n  });\n  return function (end, cb) {\n    log('reading');\n    if (end) return cb(end);\n    q.get(function (err, data) {\n      if (err) return cb(err);\n\n      if (data.end) {\n        q.error(data.end);\n        return cb(data.end);\n      }\n\n      return cb(null, data.data);\n    });\n  };\n}\n\nfunction SIOSink(sio, id, opt) {\n  var q = Queue();\n  var log = sio.sioplog.bind(sio.sioplog, '  sink(' + id + ')');\n  var codec = getCodec(opt.codec).encode;\n  var ended;\n  log('create sink');\n  sio.once(sioname('accept', id), function () {\n    log('start transmission');\n\n    function loop() {\n      q.get(function (_, val) {\n        var _ref = val || {},\n            data = _ref.data,\n            err = _ref.err;\n\n        if (_) err = _;\n        log('send', err && err === true ? 'finish' : err ? 'error' : data ? 'data' : '<invalid>');\n        if (err && !_) q.error(err);\n        if (err) return sio.emit(sioname('error', id), err);\n        if (data) sio.emit(sioname('queue', id), doCodec(codec, data));\n        loop();\n      });\n    }\n\n    loop();\n  });\n\n  function doErr(end) {\n    q.append({\n      err: end\n    });\n    ended = end;\n  }\n\n  sio.once('disconnect', function () {\n    return doErr(true);\n  });\n  return function (read) {\n    read(null, function next(end, data) {\n      if (end) return doErr(end);\n      if (ended) return read(ended, next);\n      q.append({\n        data: data\n      });\n      read(null, next);\n    });\n  };\n}\n\nmodule.exports = function SIOPullStream(sio, opt) {\n  if (sio.createSink) return;\n  sio.sioplog = sio.id ? _log.bind(_log, '[' + sio.id + ']') : _log;\n\n  sio.createSink = function (id, _) {\n    if (!id) id = uuid();\n    var sink = SIOSink(sio, id, opt || _);\n    sink.id = id;\n    return sink;\n  };\n\n  sio.createSource = function (id, _) {\n    var source = SIOSource(sio, id, opt || _);\n    source.id = id;\n    return source;\n  };\n\n  sio.createProxy = function (id, tsio, _) {\n    pull(sio.createSource(id, _), tsio.createSink(id, _));\n  };\n};","map":null,"metadata":{},"sourceType":"script"}