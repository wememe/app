{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar Big = require('big.js');\n\nvar Pushable = require('pull-pushable');\n\nvar human = require('human-to-milliseconds');\n\nvar toStream = require('pull-stream-to-stream');\n\nvar errCode = require('err-code');\n\nfunction bandwidthStats(self, opts) {\n  return new Promise(function (resolve, reject) {\n    var stats;\n\n    if (opts.peer) {\n      stats = self._libp2pNode.stats.forPeer(opts.peer);\n    } else if (opts.proto) {\n      stats = self._libp2pNode.stats.forProtocol(opts.proto);\n    } else {\n      stats = self._libp2pNode.stats.global;\n    }\n\n    if (!stats) {\n      resolve({\n        totalIn: new Big(0),\n        totalOut: new Big(0),\n        rateIn: new Big(0),\n        rateOut: new Big(0)\n      });\n      return;\n    }\n\n    resolve({\n      totalIn: stats.snapshot.dataReceived,\n      totalOut: stats.snapshot.dataSent,\n      rateIn: new Big(stats.movingAverages.dataReceived['60000'].movingAverage() / 60),\n      rateOut: new Big(stats.movingAverages.dataSent['60000'].movingAverage() / 60)\n    });\n  });\n}\n\nmodule.exports = function stats(self) {\n  var _bwPullStream = function _bwPullStream(opts) {\n    opts = opts || {};\n    var interval = null;\n    var stream = Pushable(true, function () {\n      if (interval) {\n        clearInterval(interval);\n      }\n    });\n\n    if (opts.poll) {\n      human(opts.interval || '1s', function (err, value) {\n        if (err) {\n          return stream.end(errCode(err, 'ERR_INVALID_POLL_INTERVAL'));\n        }\n\n        interval = setInterval(function () {\n          bandwidthStats(self, opts).then(function (stats) {\n            return stream.push(stats);\n          }).catch(function (err) {\n            return stream.end(err);\n          });\n        }, value);\n      });\n    } else {\n      bandwidthStats(self, opts).then(function (stats) {\n        stream.push(stats);\n        stream.end();\n      }).catch(function (err) {\n        return stream.end(err);\n      });\n    }\n\n    return stream.source;\n  };\n\n  return {\n    bitswap: require('./bitswap')(self).stat,\n    repo: require('./repo')(self).stat,\n    bw: promisify(function (opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n\n      opts = opts || {};\n      bandwidthStats(self, opts).then(function (stats) {\n        return callback(null, stats);\n      }).catch(function (err) {\n        return callback(err);\n      });\n    }),\n    bwReadableStream: function bwReadableStream(opts) {\n      return toStream.source(_bwPullStream(opts));\n    },\n    bwPullStream: _bwPullStream\n  };\n};","map":null,"metadata":{},"sourceType":"script"}