{"ast":null,"code":"var RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\nvar RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV';\nvar CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\n\nmodule.exports = function base32Encode(buffer, variant, options) {\n  options = options || {};\n  var alphabet, defaultPadding;\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648;\n      defaultPadding = true;\n      break;\n\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX;\n      defaultPadding = true;\n      break;\n\n    case 'Crockford':\n      alphabet = CROCKFORD;\n      defaultPadding = false;\n      break;\n\n    default:\n      throw new Error('Unknown base32 variant: ' + variant);\n  }\n\n  var padding = options.padding !== undefined ? options.padding : defaultPadding;\n  var length = buffer.byteLength;\n  var view = new Uint8Array(buffer);\n  var bits = 0;\n  var value = 0;\n  var output = '';\n\n  for (var i = 0; i < length; i++) {\n    value = value << 8 | view[i];\n    bits += 8;\n\n    while (bits >= 5) {\n      output += alphabet[value >>> bits - 5 & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[value << 5 - bits & 31];\n  }\n\n  if (padding) {\n    while (output.length % 8 !== 0) {\n      output += '=';\n    }\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}