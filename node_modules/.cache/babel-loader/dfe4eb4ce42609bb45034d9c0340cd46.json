{"ast":null,"code":"'use strict';\n\nvar Provider = require('./provider.js');\n\nvar utils = function () {\n  var convert = require('../utils/convert.js');\n\n  return {\n    defineProperty: require('../utils/properties.js').defineProperty,\n    hexlify: convert.hexlify,\n    hexStripZeros: convert.hexStripZeros\n  };\n}();\n\nfunction getTransactionString(transaction) {\n  var result = [];\n\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    var value = utils.hexlify(transaction[key]);\n\n    if ({\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = utils.hexStripZeros(value);\n    }\n\n    result.push(key + '=' + value);\n  }\n\n  return result.join('&');\n}\n\nfunction EtherscanProvider(network, apiKey) {\n  Provider.call(this, network);\n  var baseUrl = null;\n\n  switch (this.name) {\n    case 'homestead':\n      baseUrl = 'https://api.etherscan.io';\n      break;\n\n    case 'ropsten':\n      baseUrl = 'https://api-ropsten.etherscan.io';\n      break;\n\n    case 'rinkeby':\n      baseUrl = 'https://api-rinkeby.etherscan.io';\n      break;\n\n    case 'kovan':\n      baseUrl = 'https://api-kovan.etherscan.io';\n      break;\n\n    default:\n      throw new Error('unsupported network');\n  }\n\n  utils.defineProperty(this, 'baseUrl', baseUrl);\n  utils.defineProperty(this, 'apiKey', apiKey || null);\n}\n\nProvider.inherits(EtherscanProvider);\nutils.defineProperty(EtherscanProvider.prototype, '_call', function () {});\nutils.defineProperty(EtherscanProvider.prototype, '_callProxy', function () {});\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === 'No records found' || result.message === 'No transactions found')) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != 'OK') {\n    var error = new Error('invalid response');\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  if (result.jsonrpc != '2.0') {\n    var error = new Error('invalid response');\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  if (result.error) {\n    var error = new Error(result.error.message || 'unknown error');\n\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === 'pending') {\n    throw new Error('pending not supported');\n  }\n\n  if (blockTag === 'latest') {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nutils.defineProperty(EtherscanProvider.prototype, 'perform', function (method, params) {\n  if (!params) {\n    params = {};\n  }\n\n  var url = this.baseUrl;\n  var apiKey = '';\n\n  if (this.apiKey) {\n    apiKey += '&apikey=' + this.apiKey;\n  }\n\n  switch (method) {\n    case 'getBlockNumber':\n      url += '/api?module=proxy&action=eth_blockNumber' + apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getGasPrice':\n      url += '/api?module=proxy&action=eth_gasPrice' + apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getBalance':\n      // Returns base-10 result\n      url += '/api?module=account&action=balance&address=' + params.address;\n      url += '&tag=' + params.blockTag + apiKey;\n      return Provider.fetchJSON(url, null, getResult);\n\n    case 'getTransactionCount':\n      url += '/api?module=proxy&action=eth_getTransactionCount&address=' + params.address;\n      url += '&tag=' + params.blockTag + apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getCode':\n      url += '/api?module=proxy&action=eth_getCode&address=' + params.address;\n      url += '&tag=' + params.blockTag + apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getStorageAt':\n      url += '/api?module=proxy&action=eth_getStorageAt&address=' + params.address;\n      url += '&position=' + params.position;\n      url += '&tag=' + params.blockTag + apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'sendTransaction':\n      url += '/api?module=proxy&action=eth_sendRawTransaction&hex=' + params.signedTransaction;\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getBlock':\n      if (params.blockTag) {\n        url += '/api?module=proxy&action=eth_getBlockByNumber&tag=' + params.blockTag;\n        url += '&boolean=false';\n        url += apiKey;\n        return Provider.fetchJSON(url, null, getJsonResult);\n      }\n\n      throw new Error('getBlock by blockHash not implmeneted');\n\n    case 'getTransaction':\n      url += '/api?module=proxy&action=eth_getTransactionByHash&txhash=' + params.transactionHash;\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getTransactionReceipt':\n      url += '/api?module=proxy&action=eth_getTransactionReceipt&txhash=' + params.transactionHash;\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'call':\n      var transaction = getTransactionString(params.transaction);\n\n      if (transaction) {\n        transaction = '&' + transaction;\n      }\n\n      url += '/api?module=proxy&action=eth_call' + transaction;\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'estimateGas':\n      var transaction = getTransactionString(params.transaction);\n\n      if (transaction) {\n        transaction = '&' + transaction;\n      }\n\n      url += '/api?module=proxy&action=eth_estimateGas&' + transaction;\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getJsonResult);\n\n    case 'getLogs':\n      url += '/api?module=logs&action=getLogs';\n\n      try {\n        if (params.filter.fromBlock) {\n          url += '&fromBlock=' + checkLogTag(params.filter.fromBlock);\n        }\n\n        if (params.filter.toBlock) {\n          url += '&toBlock=' + checkLogTag(params.filter.toBlock);\n        }\n\n        if (params.filter.address) {\n          url += '&address=' + params.filter.address;\n        } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n        if (params.filter.topics && params.filter.topics.length > 0) {\n          if (params.filter.topics.length > 1) {\n            throw new Error('unsupported topic format');\n          }\n\n          var topic0 = params.filter.topics[0];\n\n          if (typeof topic0 !== 'string' || topic0.length !== 66) {\n            throw new Error('unsupported topic0 format');\n          }\n\n          url += '&topic0=' + topic0;\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n\n      url += apiKey;\n      var self = this;\n      return Provider.fetchJSON(url, null, getResult).then(function (logs) {\n        var txs = {};\n        var seq = Promise.resolve();\n        logs.forEach(function (log) {\n          seq = seq.then(function () {\n            if (log.blockHash != null) {\n              return null;\n            }\n\n            log.blockHash = txs[log.transactionHash];\n\n            if (log.blockHash == null) {\n              return self.getTransaction(log.transactionHash).then(function (tx) {\n                txs[log.transactionHash] = tx.blockHash;\n                log.blockHash = tx.blockHash;\n                return log;\n              });\n            }\n\n            return null;\n          });\n        });\n        return seq.then(function () {\n          return logs;\n        });\n      });\n\n    case 'getEtherPrice':\n      if (this.name !== 'homestead') {\n        return Promise.resolve(0.0);\n      }\n\n      url += '/api?module=stats&action=ethprice';\n      url += apiKey;\n      return Provider.fetchJSON(url, null, getResult).then(function (result) {\n        return parseFloat(result.ethusd);\n      });\n\n    default:\n      break;\n  }\n\n  return Promise.reject(new Error('not implemented - ' + method));\n});\nutils.defineProperty(EtherscanProvider.prototype, 'getHistory', function (addressOrName, startBlock, endBlock) {\n  var url = this.baseUrl;\n  var apiKey = '';\n\n  if (this.apiKey) {\n    apiKey += '&apikey=' + this.apiKey;\n  }\n\n  if (startBlock == null) {\n    startBlock = 0;\n  }\n\n  if (endBlock == null) {\n    endBlock = 99999999;\n  }\n\n  return this.resolveName(addressOrName).then(function (address) {\n    url += '/api?module=account&action=txlist&address=' + address;\n    url += '&startblock=' + startBlock;\n    url += '&endblock=' + endBlock;\n    url += '&sort=asc';\n    return Provider.fetchJSON(url, null, getResult).then(function (result) {\n      var output = [];\n      result.forEach(function (tx) {\n        ['contractAddress', 'to'].forEach(function (key) {\n          if (tx[key] == '') {\n            delete tx[key];\n          }\n        });\n\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n\n        var item = Provider._formatters.checkTransactionResponse(tx);\n\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n\n        output.push(item);\n      });\n      return output;\n    });\n  });\n});\nmodule.exports = EtherscanProvider;\n;","map":null,"metadata":{},"sourceType":"script"}