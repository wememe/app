{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar TimeCache = require('time-cache');\n\nvar pull = require('pull-stream');\n\nvar lp = require('pull-length-prefixed');\n\nvar assert = require('assert');\n\nvar BaseProtocol = require('./base');\n\nvar utils = require('./utils');\n\nvar pb = require('./message');\n\nvar config = require('./config');\n\nvar multicodec = config.multicodec;\nvar ensureArray = utils.ensureArray;\n\nvar setImmediate = require('async/setImmediate');\n/**\n * FloodSub (aka dumbsub is an implementation of pubsub focused on\n * delivering an API for Publish/Subscribe, but with no CastTree Forming\n * (it just floods the network).\n */\n\n\nvar FloodSub =\n/*#__PURE__*/\nfunction (_BaseProtocol) {\n  _inherits(FloodSub, _BaseProtocol);\n\n  /**\n   * @param {Object} libp2p\n   * @constructor\n   */\n  function FloodSub(libp2p) {\n    var _this;\n\n    _classCallCheck(this, FloodSub);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FloodSub).call(this, 'libp2p:floodsub', multicodec, libp2p));\n    /**\n     * Time based cache for sequence numbers.\n     *\n     * @type {TimeCache}\n     */\n\n    _this.cache = new TimeCache();\n    /**\n     * List of our subscriptions\n     * @type {Set<string>}\n     */\n\n    _this.subscriptions = new Set();\n    return _this;\n  }\n\n  _createClass(FloodSub, [{\n    key: \"_onDial\",\n    value: function _onDial(peerInfo, conn, callback) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(FloodSub.prototype), \"_onDial\", this).call(this, peerInfo, conn, function (err) {\n        if (err) return callback(err);\n        var idB58Str = peerInfo.id.toB58String();\n\n        var peer = _this2.peers.get(idB58Str);\n\n        if (peer && peer.isWritable) {\n          // Immediately send my own subscriptions to the newly established conn\n          peer.sendSubscriptions(_this2.subscriptions);\n        }\n\n        setImmediate(function () {\n          return callback();\n        });\n      });\n    }\n  }, {\n    key: \"_processConnection\",\n    value: function _processConnection(idB58Str, conn, peer) {\n      var _this3 = this;\n\n      pull(conn, lp.decode(), pull.map(function (data) {\n        return pb.rpc.RPC.decode(data);\n      }), pull.drain(function (rpc) {\n        return _this3._onRpc(idB58Str, rpc);\n      }, function (err) {\n        return _this3._onConnectionEnd(idB58Str, peer, err);\n      }));\n    }\n  }, {\n    key: \"_onRpc\",\n    value: function _onRpc(idB58Str, rpc) {\n      if (!rpc) {\n        return;\n      }\n\n      this.log('rpc from', idB58Str);\n      var subs = rpc.subscriptions;\n      var msgs = rpc.msgs;\n\n      if (msgs && msgs.length) {\n        this._processRpcMessages(utils.normalizeInRpcMessages(rpc.msgs));\n      }\n\n      if (subs && subs.length) {\n        var peer = this.peers.get(idB58Str);\n\n        if (peer) {\n          peer.updateSubscriptions(subs);\n          this.emit('floodsub:subscription-change', peer.info, peer.topics, subs);\n        }\n      }\n    }\n  }, {\n    key: \"_processRpcMessages\",\n    value: function _processRpcMessages(msgs) {\n      var _this4 = this;\n\n      msgs.forEach(function (msg) {\n        var seqno = utils.msgId(msg.from, msg.seqno); // 1. check if I've seen the message, if yes, ignore\n\n        if (_this4.cache.has(seqno)) {\n          return;\n        }\n\n        _this4.cache.put(seqno); // 2. emit to self\n\n\n        _this4._emitMessages(msg.topicIDs, [msg]); // 3. propagate msg to others\n\n\n        _this4._forwardMessages(msg.topicIDs, [msg]);\n      });\n    }\n  }, {\n    key: \"_emitMessages\",\n    value: function _emitMessages(topics, messages) {\n      var _this5 = this;\n\n      topics.forEach(function (topic) {\n        if (!_this5.subscriptions.has(topic)) {\n          return;\n        }\n\n        messages.forEach(function (message) {\n          _this5.emit(topic, message);\n        });\n      });\n    }\n  }, {\n    key: \"_forwardMessages\",\n    value: function _forwardMessages(topics, messages) {\n      var _this6 = this;\n\n      this.peers.forEach(function (peer) {\n        if (!peer.isWritable || !utils.anyMatch(peer.topics, topics)) {\n          return;\n        }\n\n        peer.sendMessages(utils.normalizeOutRpcMessages(messages));\n\n        _this6.log('publish msgs on topics', topics, peer.info.id.toB58String());\n      });\n    }\n    /**\n     * Unmounts the floodsub protocol and shuts down every connection\n     *\n     * @param {Function} callback\n     * @returns {undefined}\n     *\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(callback) {\n      var _this7 = this;\n\n      _get(_getPrototypeOf(FloodSub.prototype), \"stop\", this).call(this, function (err) {\n        if (err) return callback(err);\n        _this7.subscriptions = new Set();\n        callback();\n      });\n    }\n    /**\n     * Publish messages to the given topics.\n     *\n     * @param {Array<string>|string} topics\n     * @param {Array<any>|any} messages\n     * @returns {undefined}\n     *\n     */\n\n  }, {\n    key: \"publish\",\n    value: function publish(topics, messages) {\n      var _this8 = this;\n\n      assert(this.started, 'FloodSub is not started');\n      this.log('publish', topics, messages);\n      topics = ensureArray(topics);\n      messages = ensureArray(messages);\n      var from = this.libp2p.peerInfo.id.toB58String();\n\n      var buildMessage = function buildMessage(msg) {\n        var seqno = utils.randomSeqno();\n\n        _this8.cache.put(utils.msgId(from, seqno));\n\n        return {\n          from: from,\n          data: msg,\n          seqno: seqno,\n          topicIDs: topics\n        };\n      };\n\n      var msgObjects = messages.map(buildMessage); // Emit to self if I'm interested\n\n      this._emitMessages(topics, msgObjects); // send to all the other peers\n\n\n      this._forwardMessages(topics, msgObjects);\n    }\n    /**\n     * Subscribe to the given topic(s).\n     *\n     * @param {Array<string>|string} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(topics) {\n      var _this9 = this;\n\n      assert(this.started, 'FloodSub is not started');\n      topics = ensureArray(topics);\n      topics.forEach(function (topic) {\n        return _this9.subscriptions.add(topic);\n      });\n      this.peers.forEach(function (peer) {\n        return sendSubscriptionsOnceReady(peer);\n      }); // make sure that FloodSub is already mounted\n\n      function sendSubscriptionsOnceReady(peer) {\n        if (peer && peer.isWritable) {\n          return peer.sendSubscriptions(topics);\n        }\n\n        var onConnection = function onConnection() {\n          peer.removeListener('connection', onConnection);\n          sendSubscriptionsOnceReady(peer);\n        };\n\n        peer.on('connection', onConnection);\n        peer.once('close', function () {\n          return peer.removeListener('connection', onConnection);\n        });\n      }\n    }\n    /**\n     * Unsubscribe from the given topic(s).\n     *\n     * @param {Array<string>|string} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topics) {\n      var _this10 = this;\n\n      // Avoid race conditions, by quietly ignoring unsub when shutdown.\n      if (!this.started) {\n        return;\n      }\n\n      topics = ensureArray(topics);\n      topics.forEach(function (topic) {\n        return _this10.subscriptions.delete(topic);\n      });\n      this.peers.forEach(function (peer) {\n        return checkIfReady(peer);\n      }); // make sure that FloodSub is already mounted\n\n      function checkIfReady(peer) {\n        if (peer && peer.isWritable) {\n          peer.sendUnsubscriptions(topics);\n        } else {\n          setImmediate(checkIfReady.bind(peer));\n        }\n      }\n    }\n  }]);\n\n  return FloodSub;\n}(BaseProtocol);\n\nmodule.exports = FloodSub;","map":null,"metadata":{},"sourceType":"script"}