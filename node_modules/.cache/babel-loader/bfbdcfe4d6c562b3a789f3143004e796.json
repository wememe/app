{"ast":null,"code":"var SolidityCoder = require(\"web3/lib/solidity/coder.js\");\n\nvar Web3 = require('web3');\n\nvar state = {\n  savedABIs: [],\n  methodIDs: {}\n};\n\nfunction _getABIs() {\n  return state.savedABIs;\n}\n\nfunction _addABI(abiArray) {\n  if (Array.isArray(abiArray)) {\n    // Iterate new abi to generate method id's\n    abiArray.map(function (abi) {\n      if (abi.name) {\n        var signature = new Web3().sha3(abi.name + \"(\" + abi.inputs.map(function (input) {\n          return input.type;\n        }).join(\",\") + \")\");\n\n        if (abi.type == \"event\") {\n          state.methodIDs[signature.slice(2)] = abi;\n        } else {\n          state.methodIDs[signature.slice(2, 10)] = abi;\n        }\n      }\n    });\n    state.savedABIs = state.savedABIs.concat(abiArray);\n  } else {\n    throw new Error(\"Expected ABI array, got \" + typeof abiArray);\n  }\n}\n\nfunction _removeABI(abiArray) {\n  if (Array.isArray(abiArray)) {\n    // Iterate new abi to generate method id's\n    abiArray.map(function (abi) {\n      if (abi.name) {\n        var signature = new Web3().sha3(abi.name + \"(\" + abi.inputs.map(function (input) {\n          return input.type;\n        }).join(\",\") + \")\");\n\n        if (abi.type == \"event\") {\n          if (state.methodIDs[signature.slice(2)]) {\n            delete state.methodIDs[signature.slice(2)];\n          }\n        } else {\n          if (state.methodIDs[signature.slice(2, 10)]) {\n            delete state.methodIDs[signature.slice(2, 10)];\n          }\n        }\n      }\n    });\n  } else {\n    throw new Error(\"Expected ABI array, got \" + typeof abiArray);\n  }\n}\n\nfunction _getMethodIDs() {\n  return state.methodIDs;\n}\n\nfunction _decodeMethod(data) {\n  var methodID = data.slice(2, 10);\n  var abiItem = state.methodIDs[methodID];\n\n  if (abiItem) {\n    var params = abiItem.inputs.map(function (item) {\n      return item.type;\n    });\n    var decoded = SolidityCoder.decodeParams(params, data.slice(10));\n    return {\n      name: abiItem.name,\n      params: decoded.map(function (param, index) {\n        var parsedParam = param;\n        var isUint = abiItem.inputs[index].type.indexOf(\"uint\") == 0;\n        var isInt = abiItem.inputs[index].type.indexOf(\"int\") == 0;\n\n        if (isUint || isInt) {\n          var isArray = Array.isArray(param);\n\n          if (isArray) {\n            parsedParam = param.map(function (val) {\n              return new Web3().toBigNumber(val).toString();\n            });\n          } else {\n            parsedParam = new Web3().toBigNumber(param).toString();\n          }\n        }\n\n        return {\n          name: abiItem.inputs[index].name,\n          value: parsedParam,\n          type: abiItem.inputs[index].type\n        };\n      })\n    };\n  }\n}\n\nfunction padZeros(address) {\n  var formatted = address;\n\n  if (address.indexOf('0x') != -1) {\n    formatted = address.slice(2);\n  }\n\n  if (formatted.length < 40) {\n    while (formatted.length < 40) {\n      formatted = \"0\" + formatted;\n    }\n  }\n\n  return \"0x\" + formatted;\n}\n\n;\n\nfunction _decodeLogs(logs) {\n  return logs.map(function (logItem) {\n    var methodID = logItem.topics[0].slice(2);\n    var method = state.methodIDs[methodID];\n\n    if (method) {\n      var logData = logItem.data;\n      var decodedParams = [];\n      var dataIndex = 0;\n      var topicsIndex = 1;\n      var dataTypes = [];\n      method.inputs.map(function (input) {\n        if (!input.indexed) {\n          dataTypes.push(input.type);\n        }\n      });\n      var decodedData = SolidityCoder.decodeParams(dataTypes, logData.slice(2)); // Loop topic and data to get the params\n\n      method.inputs.map(function (param) {\n        var decodedP = {\n          name: param.name,\n          type: param.type\n        };\n\n        if (param.indexed) {\n          decodedP.value = logItem.topics[topicsIndex];\n          topicsIndex++;\n        } else {\n          decodedP.value = decodedData[dataIndex];\n          dataIndex++;\n        }\n\n        if (param.type == \"address\") {\n          decodedP.value = padZeros(new Web3().toBigNumber(decodedP.value).toString(16));\n        } else if (param.type == \"uint256\" || param.type == \"uint8\" || param.type == \"int\") {\n          decodedP.value = new Web3().toBigNumber(decodedP.value).toString(10);\n        }\n\n        decodedParams.push(decodedP);\n      });\n      return {\n        name: method.name,\n        events: decodedParams,\n        address: logItem.address\n      };\n    }\n  });\n}\n\nmodule.exports = {\n  getABIs: _getABIs,\n  addABI: _addABI,\n  getMethodIDs: _getMethodIDs,\n  decodeMethod: _decodeMethod,\n  decodeLogs: _decodeLogs,\n  removeABI: _removeABI\n};","map":null,"metadata":{},"sourceType":"script"}