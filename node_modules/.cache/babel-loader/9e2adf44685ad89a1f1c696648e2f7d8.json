{"ast":null,"code":"/* Copyright (c) 2012-2018 LevelUP contributors\n * See list at <https://github.com/level/levelup#contributing>\n * MIT License\n * <https://github.com/level/levelup/blob/master/LICENSE.md>\n */\nvar WriteError = require('level-errors').WriteError;\n\nvar promisify = require('./promisify');\n\nfunction Batch(levelup) {\n  this._levelup = levelup;\n  this.batch = levelup.db.batch();\n  this.ops = [];\n  this.length = 0;\n}\n\nBatch.prototype.put = function (key, value) {\n  try {\n    this.batch.put(key, value);\n  } catch (e) {\n    throw new WriteError(e);\n  }\n\n  this.ops.push({\n    type: 'put',\n    key: key,\n    value: value\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.del = function (key) {\n  try {\n    this.batch.del(key);\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops.push({\n    type: 'del',\n    key: key\n  });\n  this.length++;\n  return this;\n};\n\nBatch.prototype.clear = function () {\n  try {\n    this.batch.clear();\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  this.ops = [];\n  this.length = 0;\n  return this;\n};\n\nBatch.prototype.write = function (callback) {\n  var levelup = this._levelup;\n  var ops = this.ops;\n  var promise;\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  try {\n    this.batch.write(function (err) {\n      if (err) {\n        return callback(new WriteError(err));\n      }\n\n      levelup.emit('batch', ops);\n      callback();\n    });\n  } catch (err) {\n    throw new WriteError(err);\n  }\n\n  return promise;\n};\n\nmodule.exports = Batch;","map":null,"metadata":{},"sourceType":"script"}