{"ast":null,"code":"/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. In the future we can swap out\n *  the underlying BN.js library for something smaller.\n */\nvar BN = require('bn.js');\n\nvar defineProperty = require('./properties').defineProperty;\n\nvar convert = require('./convert');\n\nvar throwError = require('./throw-error');\n\nfunction BigNumber(value) {\n  if (!(this instanceof BigNumber)) {\n    throw new Error('missing new');\n  }\n\n  if (convert.isHexString(value)) {\n    if (value == '0x') {\n      value = '0x0';\n    }\n\n    value = new BN(value.substring(2), 16);\n  } else if (typeof value === 'string' && value[0] === '-' && convert.isHexString(value.substring(1))) {\n    value = new BN(value.substring(3), 16).mul(BigNumber.constantNegativeOne._bn);\n  } else if (typeof value === 'string' && value.match(/^-?[0-9]*$/)) {\n    if (value == '') {\n      value = '0';\n    }\n\n    value = new BN(value);\n  } else if (typeof value === 'number' && parseInt(value) == value) {\n    value = new BN(value);\n  } else if (BN.isBN(value)) {//value = value\n  } else if (isBigNumber(value)) {\n    value = value._bn;\n  } else if (convert.isArrayish(value)) {\n    value = new BN(convert.hexlify(value).substring(2), 16);\n  } else {\n    throwError('invalid BigNumber value', {\n      input: value\n    });\n  }\n\n  defineProperty(this, '_bn', value);\n}\n\ndefineProperty(BigNumber, 'constantNegativeOne', bigNumberify(-1));\ndefineProperty(BigNumber, 'constantZero', bigNumberify(0));\ndefineProperty(BigNumber, 'constantOne', bigNumberify(1));\ndefineProperty(BigNumber, 'constantTwo', bigNumberify(2));\ndefineProperty(BigNumber, 'constantWeiPerEther', bigNumberify(new BN('1000000000000000000')));\ndefineProperty(BigNumber.prototype, 'fromTwos', function (value) {\n  return new BigNumber(this._bn.fromTwos(value));\n});\ndefineProperty(BigNumber.prototype, 'toTwos', function (value) {\n  return new BigNumber(this._bn.toTwos(value));\n});\ndefineProperty(BigNumber.prototype, 'add', function (other) {\n  return new BigNumber(this._bn.add(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'sub', function (other) {\n  return new BigNumber(this._bn.sub(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'div', function (other) {\n  return new BigNumber(this._bn.div(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'mul', function (other) {\n  return new BigNumber(this._bn.mul(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'mod', function (other) {\n  return new BigNumber(this._bn.mod(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'pow', function (other) {\n  return new BigNumber(this._bn.pow(bigNumberify(other)._bn));\n});\ndefineProperty(BigNumber.prototype, 'maskn', function (value) {\n  return new BigNumber(this._bn.maskn(value));\n});\ndefineProperty(BigNumber.prototype, 'eq', function (other) {\n  return this._bn.eq(bigNumberify(other)._bn);\n});\ndefineProperty(BigNumber.prototype, 'lt', function (other) {\n  return this._bn.lt(bigNumberify(other)._bn);\n});\ndefineProperty(BigNumber.prototype, 'lte', function (other) {\n  return this._bn.lte(bigNumberify(other)._bn);\n});\ndefineProperty(BigNumber.prototype, 'gt', function (other) {\n  return this._bn.gt(bigNumberify(other)._bn);\n});\ndefineProperty(BigNumber.prototype, 'gte', function (other) {\n  return this._bn.gte(bigNumberify(other)._bn);\n});\ndefineProperty(BigNumber.prototype, 'isZero', function () {\n  return this._bn.isZero();\n});\ndefineProperty(BigNumber.prototype, 'toNumber', function (base) {\n  return this._bn.toNumber();\n});\ndefineProperty(BigNumber.prototype, 'toString', function () {\n  //return this._bn.toString(base || 10);\n  return this._bn.toString(10);\n});\ndefineProperty(BigNumber.prototype, 'toHexString', function () {\n  var hex = this._bn.toString(16);\n\n  if (hex.length % 2) {\n    hex = '0' + hex;\n  }\n\n  return '0x' + hex;\n});\n\nfunction isBigNumber(value) {\n  return value._bn && value._bn.mod;\n}\n\nfunction bigNumberify(value) {\n  if (isBigNumber(value)) {\n    return value;\n  }\n\n  return new BigNumber(value);\n}\n\nmodule.exports = {\n  isBigNumber: isBigNumber,\n  bigNumberify: bigNumberify,\n  BigNumber: BigNumber\n};","map":null,"metadata":{},"sourceType":"script"}