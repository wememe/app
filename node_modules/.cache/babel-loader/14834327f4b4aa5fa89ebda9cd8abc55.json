{"ast":null,"code":"var BN = require('bn.js');\n\nvar convert = require('./convert');\n\nvar throwError = require('./throw-error');\n\nvar keccak256 = require('./keccak256');\n\nfunction getChecksumAddress(address) {\n  if (typeof address !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {\n    throwError('invalid address', {\n      input: address\n    });\n  }\n\n  address = address.toLowerCase();\n  var hashed = address.substring(2).split('');\n\n  for (var i = 0; i < hashed.length; i++) {\n    hashed[i] = hashed[i].charCodeAt(0);\n  }\n\n  hashed = convert.arrayify(keccak256(hashed));\n  address = address.substring(2).split('');\n\n  for (var i = 0; i < 40; i += 2) {\n    if (hashed[i >> 1] >> 4 >= 8) {\n      address[i] = address[i].toUpperCase();\n    }\n\n    if ((hashed[i >> 1] & 0x0f) >= 8) {\n      address[i + 1] = address[i + 1].toUpperCase();\n    }\n  }\n\n  return '0x' + address.join('');\n} // Shims for environments that are missing some required constants and functions\n\n\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\nfunction log10(x) {\n  if (Math.log10) {\n    return Math.log10(x);\n  }\n\n  return Math.log(x) / Math.LN10;\n} // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\n\nvar ibanChecksum = function () {\n  // Create lookup table\n  var ibanLookup = {};\n\n  for (var i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n  }\n\n  for (var i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n  } // How many decimal digits can we process? (for 64-bit float, this is 15)\n\n\n  var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n  return function (address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + '00';\n    var expanded = address.split('');\n\n    for (var i = 0; i < expanded.length; i++) {\n      expanded[i] = ibanLookup[expanded[i]];\n    }\n\n    expanded = expanded.join(''); // Javascript can handle integers safely up to 15 (decimal) digits\n\n    while (expanded.length >= safeDigits) {\n      var block = expanded.substring(0, safeDigits);\n      expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n\n    var checksum = String(98 - parseInt(expanded, 10) % 97);\n\n    while (checksum.length < 2) {\n      checksum = '0' + checksum;\n    }\n\n    return checksum;\n  };\n}();\n\nfunction getAddress(address, icapFormat) {\n  var result = null;\n\n  if (typeof address !== 'string') {\n    throwError('invalid address', {\n      input: address\n    });\n  }\n\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    // Missing the 0x prefix\n    if (address.substring(0, 2) !== '0x') {\n      address = '0x' + address;\n    }\n\n    result = getChecksumAddress(address); // It is a checksummed address with a bad checksum\n\n    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n      throwError('invalid address checksum', {\n        input: address,\n        expected: result\n      });\n    } // Maybe ICAP? (we only support direct mode)\n\n  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    // It is an ICAP address with a bad checksum\n    if (address.substring(2, 4) !== ibanChecksum(address)) {\n      throwError('invalid address icap checksum', {\n        input: address\n      });\n    }\n\n    result = new BN(address.substring(4), 36).toString(16);\n\n    while (result.length < 40) {\n      result = '0' + result;\n    }\n\n    result = getChecksumAddress('0x' + result);\n  } else {\n    throwError('invalid address', {\n      input: address\n    });\n  }\n\n  if (icapFormat) {\n    var base36 = new BN(result.substring(2), 16).toString(36).toUpperCase();\n\n    while (base36.length < 30) {\n      base36 = '0' + base36;\n    }\n\n    return 'XE' + ibanChecksum('XE00' + base36) + base36;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  getAddress: getAddress\n};","map":null,"metadata":{},"sourceType":"script"}