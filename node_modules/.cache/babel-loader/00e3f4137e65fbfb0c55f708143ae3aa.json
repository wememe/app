{"ast":null,"code":"'use strict';\n\nvar EthTx = require('ethereumjs-tx');\n\nvar createResolver = require('../util/createResolver');\n\nmodule.exports = createResolver('eth-tx', EthTx, mapFromEthObj);\n\nfunction mapFromEthObj(tx, options, callback) {\n  var paths = []; // external links (none)\n  // external links as data (none)\n  // internal data\n\n  paths.push({\n    path: 'nonce',\n    value: tx.nonce\n  });\n  paths.push({\n    path: 'gasPrice',\n    value: tx.gasPrice\n  });\n  paths.push({\n    path: 'gasLimit',\n    value: tx.gasLimit\n  });\n  paths.push({\n    path: 'toAddress',\n    value: tx.to\n  });\n  paths.push({\n    path: 'value',\n    value: tx.value\n  });\n  paths.push({\n    path: 'data',\n    value: tx.data\n  });\n  paths.push({\n    path: 'v',\n    value: tx.v\n  });\n  paths.push({\n    path: 'r',\n    value: tx.r\n  });\n  paths.push({\n    path: 's',\n    value: tx.s\n  }); // helpers\n\n  paths.push({\n    path: 'fromAddress',\n    value: tx.from\n  });\n  paths.push({\n    path: 'signature',\n    value: [tx.v, tx.r, tx.s]\n  });\n  paths.push({\n    path: 'isContractPublish',\n    value: tx.toCreationAddress()\n  });\n  callback(null, paths);\n}","map":null,"metadata":{},"sourceType":"script"}