{"ast":null,"code":"'use strict';\n\nvar PeerInfo = require('peer-info');\n\nvar PeerId = require('peer-id');\n\nvar multiaddr = require('multiaddr');\n\nvar pull = require('pull-stream/pull');\n\nvar take = require('pull-stream/throughs/take');\n\nvar collect = require('pull-stream/sinks/collect');\n\nvar lp = require('pull-length-prefixed');\n\nvar msg = require('./message');\n\nmodule.exports = function (conn, expectedPeerInfo, callback) {\n  if (typeof expectedPeerInfo === 'function') {\n    callback = expectedPeerInfo;\n    expectedPeerInfo = null;\n    console.warn('WARNING: no expected peer info was given, identify will not be able to verify peer integrity');\n  }\n\n  pull(conn, lp.decode(), take(1), collect(function (err, data) {\n    if (err) {\n      return callback(err);\n    } // connection got closed graciously\n\n\n    if (data.length === 0) {\n      return callback(new Error('conn was closed, did not receive data'));\n    }\n\n    var input = msg.decode(data[0]);\n    PeerId.createFromPubKey(input.publicKey, function (err, id) {\n      if (err) {\n        return callback(err);\n      }\n\n      var peerInfo = new PeerInfo(id);\n\n      if (expectedPeerInfo && expectedPeerInfo.id.toB58String() !== id.toB58String()) {\n        return callback(new Error('invalid peer'));\n      }\n\n      try {\n        input.listenAddrs.map(multiaddr).forEach(function (ma) {\n          return peerInfo.multiaddrs.add(ma);\n        });\n      } catch (err) {\n        return callback(err);\n      }\n\n      var observedAddr;\n\n      try {\n        observedAddr = getObservedAddrs(input);\n      } catch (err) {\n        return callback(err);\n      }\n\n      callback(null, peerInfo, observedAddr);\n    });\n  }));\n};\n\nfunction getObservedAddrs(input) {\n  if (!hasObservedAddr(input)) {\n    return [];\n  }\n\n  var addrs = input.observedAddr;\n\n  if (!Array.isArray(addrs)) {\n    addrs = [addrs];\n  }\n\n  return addrs.map(function (oa) {\n    return multiaddr(oa);\n  });\n}\n\nfunction hasObservedAddr(input) {\n  return input.observedAddr && input.observedAddr.length > 0;\n}","map":null,"metadata":{},"sourceType":"script"}