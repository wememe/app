{"ast":null,"code":"'use strict';\n\nvar multihashing = require('multihashing-async');\n\nvar sort = require('stable');\n\nvar dagPBUtil = require('../util.js');\n\nvar serialize = dagPBUtil.serialize;\n\nvar dagNodeUtil = require('./util.js');\n\nvar linkSort = dagNodeUtil.linkSort;\n\nvar DAGNode = require('./index.js');\n\nvar DAGLink = require('../dag-link');\n\nfunction create(data, dagLinks, hashAlg, callback) {\n  if (typeof data === 'function') {\n    callback = data;\n    data = undefined;\n  } else if (typeof data === 'string') {\n    data = Buffer.from(data);\n  }\n\n  if (typeof dagLinks === 'function') {\n    callback = dagLinks;\n    dagLinks = [];\n  }\n\n  if (typeof hashAlg === 'function') {\n    callback = hashAlg;\n    hashAlg = undefined;\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    return callback(new Error('Passed \\'data\\' is not a buffer or a string!'));\n  }\n\n  if (!hashAlg) {\n    hashAlg = 'sha2-256';\n  }\n\n  var links = dagLinks.map(function (link) {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n  });\n  var sortedLinks = sort(links, linkSort);\n  serialize({\n    data: data,\n    links: sortedLinks\n  }, function (err, serialized) {\n    if (err) {\n      return callback(err);\n    }\n\n    multihashing(serialized, hashAlg, function (err, multihash) {\n      if (err) {\n        return callback(err);\n      }\n\n      var dagNode = new DAGNode(data, sortedLinks, serialized, multihash);\n      callback(null, dagNode);\n    });\n  });\n}\n\nmodule.exports = create;","map":null,"metadata":{},"sourceType":"script"}