{"ast":null,"code":"'use strict';\n\nvar EthAccount = require('ethereumjs-account');\n\nvar cidFromHash = require('../util/cidFromHash');\n\nvar createResolver = require('../util/createResolver');\n\nvar emptyCodeHash = require('../util/emptyCodeHash');\n\nmodule.exports = createResolver('eth-account-snapshot', EthAccount, mapFromEthObj);\n\nfunction mapFromEthObj(account, options, callback) {\n  var paths = []; // external links\n\n  paths.push({\n    path: 'storage',\n    value: {\n      '/': cidFromHash('eth-storage-trie', account.stateRoot).toBaseEncodedString()\n    }\n  }); // resolve immediately if empty, otherwise link to code\n\n  if (emptyCodeHash.equals(account.codeHash)) {\n    paths.push({\n      path: 'code',\n      value: Buffer.from('')\n    });\n  } else {\n    paths.push({\n      path: 'code',\n      value: {\n        '/': cidFromHash('raw', account.codeHash).toBaseEncodedString()\n      }\n    });\n  } // external links as data\n\n\n  paths.push({\n    path: 'stateRoot',\n    value: account.stateRoot\n  });\n  paths.push({\n    path: 'codeHash',\n    value: account.codeHash\n  }); // internal data\n\n  paths.push({\n    path: 'nonce',\n    value: account.nonce\n  });\n  paths.push({\n    path: 'balance',\n    value: account.balance\n  }); // helpers\n\n  paths.push({\n    path: 'isEmpty',\n    value: account.isEmpty()\n  });\n  paths.push({\n    path: 'isContract',\n    value: account.isContract()\n  });\n  callback(null, paths);\n}","map":null,"metadata":{},"sourceType":"script"}