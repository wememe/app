{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/FeedTile.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { timeSince } from '../../utils/time';\nimport PrivateActivity from \"../../assets/PrivateActivity.svg\";\nimport Globe from \"../../assets/Globe.svg\";\nimport Save from \"../../assets/Save.svg\";\nimport Delete from \"../../assets/Delete.svg\";\nimport Internal from \"../../assets/Internal.svg\";\nimport EthereumLine from \"../../assets/EthereumLine.svg\";\nimport Send from \"../../assets/Send.svg\";\nimport Receive from \"../../assets/Receive.svg\";\nimport Tokens from \"../../assets/Tokens.svg\";\nimport '../styles/Feed.css';\nexport var FeedTileActivity = function FeedTileActivity(_ref) {\n  var item = _ref.item,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: item.op === 'PUT' ? Save : Delete,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \" You \\n        \".concat(item.op === 'PUT' ? 'updated your' : 'removed your', \"\\n        \").concat(item.dataType === 'Private' ? 'private data' : '', \"\\n        \").concat(item.key === 'proof_github' ? 'Github username' : '', \"\\n        \").concat(item.key === 'proof_twitter' ? 'Twitter username' : '', \"\\n        \").concat((item.key !== 'proof_twitter' ? item.key !== 'proof_github' : '') ? item.key.replace(/([A-Z])/g, ' $1').trim().toLowerCase() : '', \" \\n            \"), item.op === 'PUT' ? 'to' : ''), item.op === 'PUT' ? React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, item.key === 'image' || item.key === 'coverPhoto' ? '' : '', item.dataType === 'Private' ? '*****' : '', item.key === 'emoji' ? React.createElement(\"span\", {\n    className: \"feed__activity__address__amount__emoji\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value) : '', item.key === 'proof_github' ? verifiedGithub : '', item.key === 'proof_twitter' ? verifiedTwitter : '', typeof item.value === 'object' ? \"\".concat(item.value ? Object.keys(item.value)[0] : '-----') : '', typeof item.value === 'string' ? item.value : '') : ''), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), (item.key === 'image' || item.key === 'coverPhoto') && item.value && item.value.length > 0 && item.value[0].contentUrl ? React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(item.value[0].contentUrl['/']),\n    className: \"feed__activity__image clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }) : '');\n};\nFeedTileActivity.propTypes = {\n  item: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string\n};\nFeedTileActivity.defaultProps = {\n  item: {},\n  verifiedGithub: '',\n  verifiedTwitter: ''\n};\nexport var FeedTileInternal = function FeedTileInternal(_ref2) {\n  var item = _ref2.item,\n      currentAddress = _ref2.currentAddress,\n      name = _ref2.name,\n      onPublicProfilePage = _ref2.onPublicProfilePage,\n      metaData = _ref2.metaData;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Internal,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? \"\".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\"), \" sent\") : \"\".concat(metaData.name || item.from.toLowerCase().substring(0, 12), \"... sent\")), !onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? 'You sent' : 'sent you')), React.createElement(\"p\", {\n    className: \"feed__activity__address__amount\",\n    title: (Number(item.value) / 1000000000000000000).toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" \").concat(item.tokenSymbol ? item.tokenSymbol : 'Tokens')), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"to \".concat(metaData.name || item.to.toLowerCase().substring(0, 12), \"...\") : \"to \".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\")))), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }))));\n};\nFeedTileInternal.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool\n};\nFeedTileInternal.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false\n};\nexport var FeedTileToken = function FeedTileToken(_ref3) {\n  var item = _ref3.item,\n      currentAddress = _ref3.currentAddress,\n      name = _ref3.name,\n      onPublicProfilePage = _ref3.onPublicProfilePage,\n      metaData = _ref3.metaData;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Tokens,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? \"\".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\"), \" sent\") : \"\".concat(metaData.name || item.from.toLowerCase().substring(0, 12), \"... sent\")), !onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? 'You sent' : 'sent you')), React.createElement(\"p\", {\n    className: \"feed__activity__address__amount\",\n    title: (Number(item.value) / 1000000000000000000).toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" \").concat(item.tokenSymbol ? item.tokenSymbol : 'Tokens')), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"to \".concat(metaData.name || item.to.toLowerCase().substring(0, 12), \"...\") : \"to \".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\")))), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }))));\n};\nFeedTileToken.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool\n};\nFeedTileToken.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false\n};\nexport var FeedTileTXS = function FeedTileTXS(_ref4) {\n  var item = _ref4.item,\n      currentAddress = _ref4.currentAddress,\n      name = _ref4.name,\n      onPublicProfilePage = _ref4.onPublicProfilePage,\n      metaData = _ref4.metaData;\n  return React.createElement(\"div\", {\n    className: \"feed__activity\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__data\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"feed__activity__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: EthereumLine,\n    alt: \"Transaction Icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? \"\".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\"), \" sent\") : \"\".concat(metaData.name || item.from.toLowerCase().substring(0, 12), \"... sent\")), !onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase() ? 'You sent' : 'sent you')), React.createElement(\"p\", {\n    className: \"feed__activity__info__token\",\n    title: \"\".concat((Number(item.value) / 1000000000000000000).toString(), \" ETH\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"\".concat(item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6), \" ETH\")), React.createElement(\"p\", {\n    className: \"feed__activity__info__key\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, item.from.toLowerCase() === currentAddress.toLowerCase() ? \"to \".concat(metaData.name || item.to.toLowerCase().substring(0, 12), \"...\") : \"to \".concat(name || \"\".concat(item.from.toLowerCase().substring(0, 12), \"...\")))), React.createElement(\"div\", {\n    className: \"feed__activity__metaData\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"feed__activity__address__time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, timeSince(item.timeStamp * 1000)), item.dataType === 'Private' ? React.createElement(\"img\", {\n    src: PrivateActivity,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }) : React.createElement(\"img\", {\n    src: Globe,\n    alt: \"Transaction Icon\",\n    className: \"feed__activity__address__dataType\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }))));\n};\nFeedTileTXS.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool\n};\nFeedTileTXS.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false\n}; // ACTIVITY\n// export const FeedTileActivity = ({ item, isEven, verifiedGithub, verifiedTwitter }) => (\n//   <div className={`feed__activity ${isEven ? 'darkFeed' : 'lightFeed'}`}>\n//     <div className=\"feed__activity__address__dataType\">\n//       {item.dataType === 'Private'\n//         ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\" />\n//         : <img src={Globe} alt=\"Transaction Icon\" className=\" />\n//       }\n//     </div>\n//     <div className=\"feed__activity__address__toFrom saveDelete\">\n//       <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n//       <p>\n//         {item.op === 'PUT' ? 'Save' : 'Delete'}\n//       </p>\n//     </div>\n//     <p className=\"feed__activity__address__function\">\n//       {item.dataType === 'Private'\n//         ? 'Private'\n//         : item.key === 'proof_github'\n//           ? 'Github'\n//           : item.key === 'proof_twitter'\n//             ? 'Twitter'\n//             : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n//       }\n//     </p>\n//     <p className=\"feed__activity__address__amount\">\n//       {item.key === 'image' || item.key === 'coverPhoto'\n//         ? (item.value && item.value.length > 0 && item.value[0].contentUrl)\n//         && <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n//         // ? <img src={Image} alt=\"Transaction Icon\" className=\" />\n//         : item.dataType === 'Private'\n//           ? '*****'\n//           : item.key === 'emoji'\n//             ? (\n//               <span className=\"feed__activity__address__amount__emoji\">\n//                 {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n//               </span>\n//             )\n//             : item.key === 'proof_github'\n//               ? verifiedGithub\n//               : item.key === 'proof_twitter'\n//                 ? verifiedTwitter\n//                 : typeof item.value === 'object'\n//                   ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n//                   : item.value}\n//     </p>\n//     <p className=\"feed__activity__address__time\">\n//       {timeSince(item.timeStamp * 1000)}\n//     </p>\n//   </div>\n// );\n// TOKEN\n\n{}\n/* <div className=\"feed__activity\">\n{item.from === currentAddress\n ? (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Send} alt=\"Transaction Icon\" />\n     <p>\n       Send\n     </p>\n   </div>\n )\n : (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Receive} alt=\"Transaction Icon\" />\n     <p>\n       Receive\n     </p>\n   </div>\n )\n}\n<p className=\"feed__activity__address__function\" title={item.tokenName}>\n {item.tokenName ? item.tokenName : 'Token'}\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n</p>\n<div className=\"feed__activity__metaData\">\n <p className=\"feed__activity__address__time\">\n   {timeSince(item.timeStamp * 1000)}\n </p>\n <img className=\"feed__activity__address__dataType\" src={Tokens} alt=\"Token Icon\" />\n</div>\n</div> */\n// TXS\n\n{}\n/* <div className=\"feed__activity\">\n{item.from === currentAddress\n ? (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Send} alt=\"Transaction Icon\" />\n     <p>\n       Send\n     </p>\n   </div>\n )\n : (\n   <div className=\"feed__activity__address__toFrom\">\n     <img src={Receive} alt=\"Transaction Icon\" />\n     <p>\n       Receive\n     </p>\n   </div>\n )\n}\n<p className=\"feed__activity__address__function\">\n Ethereum\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n</p>\n<div className=\"feed__activity__metaData\">\n <p className=\"feed__activity__address__time\">\n   {timeSince(item.timeStamp * 1000)}\n </p>\n <img src={EthereumLine} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType--ethereum feed__activity__address__dataType\" />\n</div>\n</div> */\n// Internal\n\n{}\n/* <div className=\"feed__activity\">\n   {item.from === currentAddress\n     ? (\n       <div className=\"feed__activity__address__toFrom\">\n         <img src={Send} alt=\"Transaction Icon\" />\n         <p>\n           Send\n         </p>\n       </div>\n     )\n     : (\n       <div className=\"feed__activity__address__toFrom\">\n         <img src={Receive} alt=\"Transaction Icon\" />\n         <p>\n           Receive\n         </p>\n       </div>\n     )\n   }\n   <p className=\"feed__activity__address__function\">\n     {item.type && item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n   </p>\n   <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n     {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n   </p>\n    <div className=\"feed__activity__metaData\">\n     <p className=\"feed__activity__address__time\">\n       {timeSince(item.timeStamp * 1000)}\n     </p>\n     <img src={Internal} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n   </div>\n </div> */\n// : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n// : item.key\n// from activity tile\n\n{\n  /* {item.op === 'PUT' && (\n             (item.key === 'image' || item.key === 'coverPhoto')\n               ? \"\"\n               : item.dataType === 'Private'\n                 ? '*****'\n                 : item.key === 'emoji'\n                   ? (\n                     <span className=\"feed__activity__address__amount__emoji\">\n                       {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n                     </span>\n                   )\n                   : item.key === 'proof_github'\n                     ? verifiedGithub\n                     : item.key === 'proof_twitter'\n                       ? verifiedTwitter\n                       : typeof item.value === 'object'\n                         ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n                         : item.value)} */\n}","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/FeedTile.jsx"],"names":["React","PropTypes","timeSince","FeedTileActivity","item","verifiedGithub","verifiedTwitter","op","Save","Delete","dataType","key","replace","trim","toLowerCase","value","Object","keys","timeStamp","PrivateActivity","Globe","length","contentUrl","propTypes","object","string","defaultProps","FeedTileInternal","currentAddress","name","onPublicProfilePage","metaData","Internal","from","substring","Number","toString","tokenSymbol","to","bool","FeedTileToken","Tokens","FeedTileTXS","EthereumLine"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { timeSince } from '../../utils/time';\nimport PrivateActivity from '../../assets/PrivateActivity.svg';\nimport Globe from '../../assets/Globe.svg';\nimport Save from '../../assets/Save.svg';\nimport Delete from '../../assets/Delete.svg';\n\nimport Internal from '../../assets/Internal.svg';\nimport EthereumLine from '../../assets/EthereumLine.svg';\nimport Send from '../../assets/Send.svg';\nimport Receive from '../../assets/Receive.svg';\nimport Tokens from '../../assets/Tokens.svg';\n\nimport '../styles/Feed.css';\n\nexport const FeedTileActivity = ({ item, verifiedGithub, verifiedTwitter }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n\n        <p className=\"feed__activity__info__key\">\n          {` You \n        ${item.op === 'PUT' ? 'updated your' : 'removed your'}\n        ${item.dataType === 'Private' ? 'private data' : ''}\n        ${item.key === 'proof_github' ? 'Github username' : ''}\n        ${item.key === 'proof_twitter' ? 'Twitter username' : ''}\n        ${(item.key !== 'proof_twitter' ? item.key !== 'proof_github' : '')\n              ? (item.key).replace(/([A-Z])/g, ' $1').trim().toLowerCase()\n              : ''} \n            `}\n          {item.op === 'PUT' ? 'to' : ''}\n        </p>\n\n        {item.op === 'PUT' ? (\n          <p className=\"feed__activity__info__token\">\n            {(item.key === 'image' || item.key === 'coverPhoto')\n              ? '' : ''}\n            {item.dataType === 'Private'\n              ? '*****' : ''}\n            {item.key === 'emoji'\n              ? (\n                <span className=\"feed__activity__address__amount__emoji\">\n                  {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n                </span>\n              ) : ''}\n            {item.key === 'proof_github'\n              ? verifiedGithub : ''}\n            {item.key === 'proof_twitter'\n              ? verifiedTwitter : ''}\n            {typeof item.value === 'object'\n              ? `${item.value ? Object.keys(item.value)[0] : '-----'}` : ''}\n            {typeof item.value === 'string'\n              ? item.value : ''}\n          </p>) : ''}\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n\n    {((item.key === 'image' || item.key === 'coverPhoto')\n      && item.value\n      && item.value.length > 0\n      && item.value[0].contentUrl)\n      ? (\n        <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n      ) : ''\n    }\n  </div>\n);\n\nFeedTileActivity.propTypes = {\n  item: PropTypes.object,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n};\n\nFeedTileActivity.defaultProps = {\n  item: {},\n  verifiedGithub: '',\n  verifiedTwitter: '',\n};\n\nexport const FeedTileInternal = ({ item, currentAddress, name, onPublicProfilePage, metaData }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={Internal} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `${name || `${item.from.toLowerCase().substring(0, 12)}...`} sent`\n            : `${metaData.name || item.from.toLowerCase().substring(0, 12)}... sent`)\n          }\n          {!onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? 'You sent'\n            : 'sent you')\n          }\n        </p>\n        <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `to ${metaData.name || item.to.toLowerCase().substring(0, 12)}...`\n            : `to ${name || `${item.from.toLowerCase().substring(0, 12)}...`}`\n          }\n        </p>\n        {/* <p className=\"feed__activity__info__token\" title={item.tokenName}>\n          {item.tokenName ? item.tokenName : 'Token'}\n        </p> */}\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileInternal.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool,\n};\n\nFeedTileInternal.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false,\n};\n\nexport const FeedTileToken = ({ item, currentAddress, name, onPublicProfilePage, metaData }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={Tokens} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `${name || `${item.from.toLowerCase().substring(0, 12)}...`} sent`\n            : `${metaData.name || item.from.toLowerCase().substring(0, 12)}... sent`)\n          }\n          {!onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? 'You sent'\n            : 'sent you')\n          }\n        </p>\n        {/* <p className=\"feed__activity__info__token\" title={item.tokenName}>\n          {item.tokenName ? item.tokenName : 'Token'}\n        </p> */}\n        <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `to ${metaData.name || item.to.toLowerCase().substring(0, 12)}...`\n            : `to ${name || `${item.from.toLowerCase().substring(0, 12)}...`}`\n          }\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileToken.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool,\n};\n\nFeedTileToken.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false,\n};\n\nexport const FeedTileTXS = ({ item, currentAddress, name, onPublicProfilePage, metaData }) => (\n  <div className=\"feed__activity\">\n    <div className=\"feed__activity__data\">\n      <div className=\"feed__activity__info\">\n        <img src={EthereumLine} alt=\"Transaction Icon\" />\n        <p className=\"feed__activity__info__key\">\n          {onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `${name || `${item.from.toLowerCase().substring(0, 12)}...`} sent`\n            : `${metaData.name || item.from.toLowerCase().substring(0, 12)}... sent`)\n          }\n          {!onPublicProfilePage && (item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? 'You sent'\n            : 'sent you')\n          }\n        </p>\n        <p className=\"feed__activity__info__token\" title={`${(Number(item.value) / 1000000000000000000).toString()} ETH`}>\n          {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n        </p>\n        <p className=\"feed__activity__info__key\">\n          {item.from.toLowerCase() === currentAddress.toLowerCase()\n            ? `to ${metaData.name || item.to.toLowerCase().substring(0, 12)}...`\n            : `to ${name || `${item.from.toLowerCase().substring(0, 12)}...`}`\n          }\n        </p>\n      </div>\n      <div className=\"feed__activity__metaData\">\n        <p className=\"feed__activity__address__time\">\n          {timeSince(item.timeStamp * 1000)}\n        </p>\n        {item.dataType === 'Private'\n          ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n          : <img src={Globe} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n        }\n      </div>\n    </div>\n  </div>\n);\n\nFeedTileTXS.propTypes = {\n  item: PropTypes.object,\n  metaData: PropTypes.object,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  onPublicProfilePage: PropTypes.bool,\n};\n\nFeedTileTXS.defaultProps = {\n  item: {},\n  metaData: {},\n  currentAddress: '',\n  name: '',\n  onPublicProfilePage: false,\n};\n\n// ACTIVITY\n// export const FeedTileActivity = ({ item, isEven, verifiedGithub, verifiedTwitter }) => (\n//   <div className={`feed__activity ${isEven ? 'darkFeed' : 'lightFeed'}`}>\n//     <div className=\"feed__activity__address__dataType\">\n//       {item.dataType === 'Private'\n//         ? <img src={PrivateActivity} alt=\"Transaction Icon\" className=\" />\n//         : <img src={Globe} alt=\"Transaction Icon\" className=\" />\n//       }\n//     </div>\n//     <div className=\"feed__activity__address__toFrom saveDelete\">\n//       <img src={item.op === 'PUT' ? Save : Delete} alt=\"Transaction Icon\" />\n//       <p>\n//         {item.op === 'PUT' ? 'Save' : 'Delete'}\n//       </p>\n//     </div>\n//     <p className=\"feed__activity__address__function\">\n//       {item.dataType === 'Private'\n//         ? 'Private'\n//         : item.key === 'proof_github'\n//           ? 'Github'\n//           : item.key === 'proof_twitter'\n//             ? 'Twitter'\n//             : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n//       }\n//     </p>\n//     <p className=\"feed__activity__address__amount\">\n//       {item.key === 'image' || item.key === 'coverPhoto'\n//         ? (item.value && item.value.length > 0 && item.value[0].contentUrl)\n//         && <img src={`https://ipfs.infura.io/ipfs/${item.value[0].contentUrl['/']}`} className=\"feed__activity__image clearProfPic\" alt=\"profile\" />\n//         // ? <img src={Image} alt=\"Transaction Icon\" className=\" />\n//         : item.dataType === 'Private'\n//           ? '*****'\n//           : item.key === 'emoji'\n//             ? (\n//               <span className=\"feed__activity__address__amount__emoji\">\n//                 {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n//               </span>\n//             )\n//             : item.key === 'proof_github'\n//               ? verifiedGithub\n//               : item.key === 'proof_twitter'\n//                 ? verifiedTwitter\n//                 : typeof item.value === 'object'\n//                   ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n//                   : item.value}\n//     </p>\n//     <p className=\"feed__activity__address__time\">\n//       {timeSince(item.timeStamp * 1000)}\n//     </p>\n//   </div>\n// );\n\n\n\n// TOKEN\n{/* <div className=\"feed__activity\">\n{item.from === currentAddress\n  ? (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Send} alt=\"Transaction Icon\" />\n      <p>\n        Send\n      </p>\n    </div>\n  )\n  : (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Receive} alt=\"Transaction Icon\" />\n      <p>\n        Receive\n      </p>\n    </div>\n  )\n}\n<p className=\"feed__activity__address__function\" title={item.tokenName}>\n  {item.tokenName ? item.tokenName : 'Token'}\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n  {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ${item.tokenSymbol ? item.tokenSymbol : 'Tokens'}`}\n</p>\n\n<div className=\"feed__activity__metaData\">\n  <p className=\"feed__activity__address__time\">\n    {timeSince(item.timeStamp * 1000)}\n  </p>\n  <img className=\"feed__activity__address__dataType\" src={Tokens} alt=\"Token Icon\" />\n</div>\n</div> */}\n\n\n// TXS\n{/* <div className=\"feed__activity\">\n{item.from === currentAddress\n  ? (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Send} alt=\"Transaction Icon\" />\n      <p>\n        Send\n      </p>\n    </div>\n  )\n  : (\n    <div className=\"feed__activity__address__toFrom\">\n      <img src={Receive} alt=\"Transaction Icon\" />\n      <p>\n        Receive\n      </p>\n    </div>\n  )\n}\n<p className=\"feed__activity__address__function\">\n  Ethereum\n</p>\n<p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n  {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n</p>\n<div className=\"feed__activity__metaData\">\n  <p className=\"feed__activity__address__time\">\n    {timeSince(item.timeStamp * 1000)}\n  </p>\n  <img src={EthereumLine} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType--ethereum feed__activity__address__dataType\" />\n</div>\n</div> */}\n\n// Internal\n{/* <div className=\"feed__activity\">\n    {item.from === currentAddress\n      ? (\n        <div className=\"feed__activity__address__toFrom\">\n          <img src={Send} alt=\"Transaction Icon\" />\n          <p>\n            Send\n          </p>\n        </div>\n      )\n      : (\n        <div className=\"feed__activity__address__toFrom\">\n          <img src={Receive} alt=\"Transaction Icon\" />\n          <p>\n            Receive\n          </p>\n        </div>\n      )\n    }\n    <p className=\"feed__activity__address__function\">\n      {item.type && item.type.charAt(0).toUpperCase() + item.type.slice(1)}\n    </p>\n    <p className=\"feed__activity__address__amount\" title={(Number(item.value) / 1000000000000000000).toString()}>\n      {`${item.value && (Number(item.value) / 1000000000000000000).toString().substring(0, 6)} ETH`}\n    </p>\n\n    <div className=\"feed__activity__metaData\">\n      <p className=\"feed__activity__address__time\">\n        {timeSince(item.timeStamp * 1000)}\n      </p>\n      <img src={Internal} alt=\"Transaction Icon\" className=\"feed__activity__address__dataType\" />\n    </div>\n  </div> */}\n\n\n// : item.key && (item.key.charAt(0).toUpperCase() + item.key.slice(1)).replace(/([A-Z])/g, ' $1').trim()\n// : item.key\n\n\n// from activity tile\n{/* {item.op === 'PUT' && (\n            (item.key === 'image' || item.key === 'coverPhoto')\n              ? \"\"\n              : item.dataType === 'Private'\n                ? '*****'\n                : item.key === 'emoji'\n                  ? (\n                    <span className=\"feed__activity__address__amount__emoji\">\n                      {typeof item.value === 'object' ? Object.keys(item.value)[0] : item.value}\n                    </span>\n                  )\n                  : item.key === 'proof_github'\n                    ? verifiedGithub\n                    : item.key === 'proof_twitter'\n                      ? verifiedTwitter\n                      : typeof item.value === 'object'\n                        ? `${item.value ? Object.keys(item.value)[0] : '-----'}`\n                        : item.value)} */}"]},"metadata":{},"sourceType":"module"}