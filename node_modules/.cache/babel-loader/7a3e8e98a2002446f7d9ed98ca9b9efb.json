{"ast":null,"code":"'use strict';\n\nvar OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nvar promisify = require('promisify-es6');\n\nvar setImmediate = require('async/setImmediate');\n\nvar Big = require('big.js');\n\nvar CID = require('cids');\n\nvar PeerId = require('peer-id');\n\nvar errCode = require('err-code');\n\nfunction formatWantlist(list) {\n  return Array.from(list).map(function (e) {\n    return {\n      '/': e[1].cid.toBaseEncodedString()\n    };\n  });\n}\n\nmodule.exports = function bitswap(self) {\n  return {\n    wantlist: promisify(function (peerId, callback) {\n      if (!callback) {\n        callback = peerId;\n        peerId = undefined;\n      }\n\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      var list;\n\n      if (peerId) {\n        try {\n          peerId = PeerId.createFromB58String(peerId);\n        } catch (e) {\n          peerId = null;\n        }\n\n        if (!peerId) {\n          return setImmediate(function () {\n            return callback(new Error('Invalid peerId'));\n          });\n        }\n\n        list = self._bitswap.wantlistForPeer(peerId);\n      } else {\n        list = self._bitswap.getWantlist();\n      }\n\n      list = formatWantlist(list);\n      return setImmediate(function () {\n        return callback(null, {\n          Keys: list\n        });\n      });\n    }),\n    stat: promisify(function (callback) {\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      var snapshot = self._bitswap.stat().snapshot;\n\n      callback(null, {\n        provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n        blocksReceived: new Big(snapshot.blocksReceived),\n        wantlist: formatWantlist(self._bitswap.getWantlist()),\n        peers: self._bitswap.peers().map(function (id) {\n          return id.toB58String();\n        }),\n        dupBlksReceived: new Big(snapshot.dupBlksReceived),\n        dupDataReceived: new Big(snapshot.dupDataReceived),\n        dataReceived: new Big(snapshot.dataReceived),\n        blocksSent: new Big(snapshot.blocksSent),\n        dataSent: new Big(snapshot.dataSent)\n      });\n    }),\n    unwant: promisify(function (keys, callback) {\n      if (!self.isOnline()) {\n        return setImmediate(function () {\n          return callback(new Error(OFFLINE_ERROR));\n        });\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys];\n      }\n\n      try {\n        keys = keys.map(function (key) {\n          if (CID.isCID(key)) {\n            return key;\n          }\n\n          return new CID(key);\n        });\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(errCode(err, 'ERR_INVALID_CID'));\n        });\n      }\n\n      return setImmediate(function () {\n        return callback(null, self._bitswap.unwant(keys));\n      });\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}