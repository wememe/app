{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar varint = require('varint');\n\nvar pull = require('pull-stream');\n\nvar pullLP = require('pull-length-prefixed');\n\nvar Connection = require('interface-connection').Connection;\n\nvar util = require('../util');\n\nvar _select = require('../select');\n\nvar once = require('once');\n\nvar PROTOCOL_ID = require('./../constants').PROTOCOL_ID;\n/**\n *\n */\n\n\nvar Dialer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new Dialer.\n   */\n  function Dialer() {\n    _classCallCheck(this, Dialer);\n\n    this.conn = null;\n    this.log = util.log.dialer();\n  }\n  /**\n   * Perform the multistream handshake.\n   *\n   * @param {Connection} rawConn - The connection on which\n   * to perform the handshake.\n   * @param {function(Error)} callback - Called when the handshake completed.\n   * @returns {undefined}\n   */\n\n\n  _createClass(Dialer, [{\n    key: \"handle\",\n    value: function handle(rawConn, callback) {\n      var _this = this;\n\n      this.log('dialer handle conn');\n      callback = once(callback);\n\n      var s = _select(PROTOCOL_ID, function (err, conn) {\n        if (err) {\n          return callback(err);\n        }\n\n        _this.log('handshake success');\n\n        _this.conn = new Connection(conn, rawConn);\n        callback();\n      }, this.log); // Handle unexpected errors from pull, like 'already piped'\n\n\n      try {\n        pull(rawConn, s, rawConn);\n      } catch (err) {\n        this.log.error(err);\n        callback(err);\n      }\n    }\n    /**\n     * Select a protocol\n     *\n     * @param {string} protocol - A string of the protocol that we want to handshake.\n     * @param {function(Error, Connection)} callback - `err` is\n     * an error object that gets passed if something wrong happ\n     * end (e.g: if the protocol selected is not supported by\n     * the other end) and conn is the connection handshaked\n     * with the other end.\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"select\",\n    value: function select(protocol, callback) {\n      var _this2 = this;\n\n      this.log('dialer select ' + protocol);\n      callback = once(callback);\n\n      if (!this.conn) {\n        return callback(new Error('multistream handshake has not finalized yet'));\n      }\n\n      var s = _select(protocol, function (err, conn) {\n        if (err) {\n          _this2.conn = new Connection(conn, _this2.conn);\n          return callback(err);\n        }\n\n        callback(null, new Connection(conn, _this2.conn));\n      }, this.log);\n\n      pull(this.conn, s, this.conn);\n    }\n    /**\n     * List all available protocols.\n     *\n     * @param {function(Error, Array<string>)} callback - If\n     * something wrong happend `Error` exists, otherwise\n     * `protocols` is a list of the supported\n     * protocols on the other end.\n     *\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"ls\",\n    value: function ls(callback) {\n      callback = once(callback);\n\n      var lsStream = _select('ls', function (err, conn) {\n        if (err) {\n          return callback(err);\n        }\n\n        pull(conn, pullLP.decode(), collectLs(conn), pull.map(stringify), pull.collect(function (err, list) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, list.slice(1));\n        }));\n      }, this.log);\n\n      pull(this.conn, lsStream, this.conn);\n    }\n  }]);\n\n  return Dialer;\n}();\n\nfunction stringify(buf) {\n  return buf.toString().slice(0, -1);\n}\n\nfunction collectLs(conn) {\n  var first = true;\n  var counter = 0;\n  return pull.take(function (msg) {\n    if (first) {\n      varint.decode(msg);\n      counter = varint.decode(msg, varint.decode.bytes);\n      return true;\n    }\n\n    return counter-- > 0;\n  });\n}\n\nmodule.exports = Dialer;","map":null,"metadata":{},"sourceType":"script"}