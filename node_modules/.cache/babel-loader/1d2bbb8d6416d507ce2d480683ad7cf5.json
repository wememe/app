{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar multihashing = require('multihashing-async');\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @param {function(Error)} callback\n * @returns {undefined}\n */\n\n\nvar validatePublicKeyRecord = function validatePublicKeyRecord(key, publicKey, callback) {\n  var done = function done(err) {\n    return setImmediate(function () {\n      return callback(err);\n    });\n  };\n\n  if (!Buffer.isBuffer(key)) {\n    return done(new Error('\"key\" must be a Buffer'));\n  }\n\n  if (key.length < 3) {\n    return done(new Error('invalid public key record'));\n  }\n\n  var prefix = key.slice(0, 4).toString();\n\n  if (prefix !== '/pk/') {\n    return done(new Error('key was not prefixed with /pk/'));\n  }\n\n  var keyhash = key.slice(4);\n  multihashing(publicKey, 'sha2-256', function (err, publicKeyHash) {\n    if (err) {\n      return done(err);\n    }\n\n    if (!keyhash.equals(publicKeyHash)) {\n      return done(new Error('public key does not match passed in key'));\n    }\n\n    done();\n  });\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":null,"metadata":{},"sourceType":"script"}