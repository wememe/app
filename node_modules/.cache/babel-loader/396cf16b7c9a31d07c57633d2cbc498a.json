{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar isIpfs = require('is-ipfs');\n\nvar setImmediate = require('async/setImmediate');\n\nvar doUntil = require('async/doUntil');\n\nvar CID = require('cids');\n\nmodule.exports = function (self) {\n  return promisify(function (name, opts, cb) {\n    if (typeof opts === 'function') {\n      cb = opts;\n      opts = {};\n    }\n\n    opts = opts || {};\n\n    if (!isIpfs.path(name)) {\n      return setImmediate(function () {\n        return cb(new Error('invalid argument'));\n      });\n    } // TODO remove this and update subsequent code when IPNS is implemented\n\n\n    if (!isIpfs.ipfsPath(name)) {\n      return setImmediate(function () {\n        return cb(new Error('resolve non-IPFS names is not implemented'));\n      });\n    }\n\n    var split = name.split('/'); // ['', 'ipfs', 'hash', ...path]\n\n    var cid = new CID(split[2]);\n\n    if (split.length === 3) {\n      return setImmediate(function () {\n        return cb(null, name);\n      });\n    }\n\n    var path = split.slice(3).join('/');\n    resolve(cid, path, function (err, cid) {\n      if (err) return cb(err);\n      if (!cid) return cb(new Error('found non-link at given path'));\n      cb(null, \"/ipfs/\".concat(cid.toBaseEncodedString(opts.cidBase)));\n    });\n  }); // Resolve the given CID + path to a CID.\n\n  function resolve(cid, path, callback) {\n    var value;\n    doUntil(function (cb) {\n      self.block.get(cid, function (err, block) {\n        if (err) return cb(err);\n        var r = self._ipld.resolvers[cid.codec];\n\n        if (!r) {\n          return cb(new Error(\"No resolver found for codec \\\"\".concat(cid.codec, \"\\\"\")));\n        }\n\n        r.resolver.resolve(block.data, path, function (err, result) {\n          if (err) return cb(err);\n          value = result.value;\n          path = result.remainderPath;\n          cb();\n        });\n      });\n    }, function () {\n      var endReached = !path || path === '/';\n\n      if (endReached) {\n        return true;\n      }\n\n      if (value) {\n        cid = new CID(value['/']);\n      }\n\n      return false;\n    }, function (err) {\n      if (err) return callback(err);\n      if (value && value['/']) return callback(null, new CID(value['/']));\n      callback();\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}