{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar CONSTANTS = require('./constants');\n\nvar logger = require('./utils').logger;\n\nvar unwantEvent = function unwantEvent(c) {\n  return \"unwant:\".concat(c);\n};\n\nvar blockEvent = function blockEvent(c) {\n  return \"block:\".concat(c);\n};\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nvar Notifications =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n\n  function Notifications(peerId) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Notifications).call(this));\n\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n\n    _this._log = logger(peerId, 'notif');\n    _this._unwantListeners = {};\n    _this._blockListeners = {};\n    return _this;\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      var str = \"block:\".concat(block.cid.buffer.toString());\n\n      this._log(str);\n\n      this.emit(str, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     *\n     * @param {CID} cid\n     * @param {function(Block)} onBlock - called when the block is received\n     * @param {function()} onUnwant - called when the block is unwanted\n     * @returns {void}\n     */\n\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid, onBlock, onUnwant) {\n      var _this2 = this;\n\n      var cidStr = cid.buffer.toString();\n\n      this._log(\"wantBlock:\".concat(cidStr));\n\n      this._unwantListeners[cidStr] = function () {\n        _this2._log(\"manual unwant: \".concat(cidStr));\n\n        _this2._cleanup(cidStr);\n\n        onUnwant();\n      };\n\n      this._blockListeners[cidStr] = function (block) {\n        _this2._cleanup(cidStr);\n\n        onBlock(block);\n      };\n\n      this.once(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n      this.once(blockEvent(cidStr), this._blockListeners[cidStr]);\n    }\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var str = \"unwant:\".concat(cid.buffer.toString());\n\n      this._log(str);\n\n      this.emit(str);\n    }\n    /**\n     * Internal method to clean up once a block was received or unwanted.\n     *\n     * @private\n     * @param  {string} cidStr\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_cleanup\",\n    value: function _cleanup(cidStr) {\n      if (this._unwantListeners[cidStr]) {\n        this.removeListener(unwantEvent(cidStr), this._unwantListeners[cidStr]);\n        delete this._unwantListeners[cidStr];\n      }\n\n      if (this._blockListeners[cidStr]) {\n        this.removeListener(blockEvent(cidStr), this._blockListeners[cidStr]);\n        delete this._blockListeners[cidStr];\n      }\n    }\n  }]);\n\n  return Notifications;\n}(EventEmitter);\n\nmodule.exports = Notifications;","map":null,"metadata":{},"sourceType":"script"}