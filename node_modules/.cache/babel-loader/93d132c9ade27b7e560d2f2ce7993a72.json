{"ast":null,"code":"'use strict';\n\nvar Provider = require('./provider');\n\nvar JsonRpcProvider = require('./json-rpc-provider');\n\nvar utils = function () {\n  return {\n    defineProperty: require('../utils/properties').defineProperty\n  };\n}();\n\nvar errors = require('../utils/errors');\n/*\n@TODO\nutils.defineProperty(Web3Signer, 'onchange', {\n\n});\n*/\n\n\nfunction Web3Provider(web3Provider, network) {\n  errors.checkNew(this, Web3Provider); // HTTP has a host; IPC has a path.\n\n  var url = web3Provider.host || web3Provider.path || 'unknown';\n\n  if (network == null) {\n    network = 'homestead';\n  }\n\n  JsonRpcProvider.call(this, url, network);\n  utils.defineProperty(this, '_web3Provider', web3Provider);\n}\n\nJsonRpcProvider.inherits(Web3Provider);\nutils.defineProperty(Web3Provider.prototype, 'send', function (method, params) {\n  // Metamask complains about eth_sign (and on some versions hangs)\n  if (method == 'eth_sign' && this._web3Provider.isMetaMask) {\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n    method = 'personal_sign';\n    params = [params[1], params[0]];\n  }\n\n  var provider = this._web3Provider;\n  return new Promise(function (resolve, reject) {\n    var request = {\n      method: method,\n      params: params,\n      id: 42,\n      jsonrpc: \"2.0\"\n    };\n    provider.sendAsync(request, function (error, result) {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      if (result.error) {\n        var error = new Error(result.error.message);\n        error.code = result.error.code;\n        error.data = result.error.data;\n        reject(error);\n        return;\n      }\n\n      resolve(result.result);\n    });\n  });\n});\nmodule.exports = Web3Provider;","map":null,"metadata":{},"sourceType":"script"}