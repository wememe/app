{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar leftPad = require('left-pad');\n\nvar whilst = require('async/whilst');\n\nvar waterfall = require('async/waterfall');\n\nvar CID = require('cids');\n\nvar dagPB = require('ipld-dag-pb');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar DAGLink = dagPB.DAGLink;\nvar DAGNode = dagPB.DAGNode;\n\nvar multihashing = require('multihashing-async');\n\nvar Dir = require('./dir');\n\nvar Bucket = require('../hamt');\n\nvar hashFn = function hashFn(value, callback) {\n  multihashing(value, 'murmur3-128', function (err, hash) {\n    if (err) {\n      callback(err);\n    } else {\n      // Multihashing inserts preamble of 2 bytes. Remove it.\n      // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's\n      // implementation only uses the first 64, so we must do the same\n      // for parity..\n      var justHash = hash.slice(2, 10);\n      var length = justHash.length;\n      var result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it\n\n      for (var i = 0; i < length; i++) {\n        result[length - i - 1] = justHash[i];\n      }\n\n      callback(null, result);\n    }\n  });\n};\n\nhashFn.code = 0x22; // TODO: get this from multihashing-async?\n\nvar defaultOptions = {\n  hashFn: hashFn\n};\n\nvar DirSharded =\n/*#__PURE__*/\nfunction (_Dir) {\n  _inherits(DirSharded, _Dir);\n\n  function DirSharded(props, _options) {\n    var _this;\n\n    _classCallCheck(this, DirSharded);\n\n    var options = Object.assign({}, defaultOptions, _options);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DirSharded).call(this, props, options));\n    _this._bucket = Bucket(options);\n    return _this;\n  }\n\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function put(name, value, callback) {\n      this._bucket.put(name, value, callback);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name, callback) {\n      this._bucket.get(name, callback);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild(callback) {\n      this._bucket.onlyChild(callback);\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries(iterator, callback) {\n      this._bucket.eachLeafSeries(iterator, callback);\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(path, ipld, source, callback) {\n      var _this2 = this;\n\n      _flush(this._options, this._bucket, path, ipld, source, function (err, node) {\n        if (err) {\n          callback(err);\n        } else {\n          _this2.multihash = node.multihash;\n          _this2.size = node.size;\n        }\n\n        callback(null, node);\n      });\n    }\n  }]);\n\n  return DirSharded;\n}(Dir);\n\nmodule.exports = createDirSharded;\n\nfunction createDirSharded(props, _options) {\n  return new DirSharded(props, _options);\n}\n\nfunction _flush(options, bucket, path, ipld, source, callback) {\n  var children = bucket._children; // TODO: intromission\n\n  var index = 0;\n  var links = [];\n  whilst(function () {\n    return index < children.length;\n  }, function (callback) {\n    var child = children.get(index);\n\n    if (child) {\n      collectChild(child, index, function (err) {\n        index++;\n        callback(err);\n      });\n    } else {\n      index++;\n      callback();\n    }\n  }, function (err) {\n    if (err) {\n      callback(err);\n      return; // early\n    }\n\n    haveLinks(links);\n  });\n\n  function collectChild(child, index, callback) {\n    var labelPrefix = leftPad(index.toString(16).toUpperCase(), 2, '0');\n\n    if (Bucket.isBucket(child)) {\n      _flush(options, child, path, ipld, null, function (err, node) {\n        if (err) {\n          callback(err);\n          return; // early\n        }\n\n        links.push(new DAGLink(labelPrefix, node.size, node.multihash));\n        callback();\n      });\n    } else {\n      var value = child.value;\n      var label = labelPrefix + child.key;\n      links.push(new DAGLink(label, value.size, value.multihash));\n      callback();\n    }\n  }\n\n  function haveLinks(links) {\n    // go-ipfs uses little endian, that's why we have to\n    // reverse the bit field before storing it\n    var data = Buffer.from(children.bitField().reverse());\n    var dir = new UnixFS('hamt-sharded-directory', data);\n    dir.fanout = bucket.tableSize();\n    dir.hashType = options.hashFn.code;\n    waterfall([function (callback) {\n      return DAGNode.create(dir.marshal(), links, options.hashAlg, callback);\n    }, function (node, callback) {\n      if (options.onlyHash) return callback(null, node);\n      var cid = new CID(node.multihash);\n\n      if (options.cidVersion === 1) {\n        cid = cid.toV1();\n      }\n\n      ipld.put(node, {\n        cid: cid\n      }, function (err) {\n        return callback(err, node);\n      });\n    }, function (node, callback) {\n      var pushable = {\n        path: path,\n        multihash: node.multihash,\n        size: node.size\n      };\n\n      if (source) {\n        source.push(pushable);\n      }\n\n      callback(null, node);\n    }], callback);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}