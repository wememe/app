{"ast":null,"code":"var base58 = require('bs58');\n\nvar createHash = require('create-hash');\n\nfunction encode(payload, version) {\n  if (Array.isArray(payload) || payload instanceof Uint8Array) {\n    payload = new Buffer(payload);\n  }\n\n  var buf;\n\n  if (version != null) {\n    if (typeof version === 'number') {\n      version = new Buffer([version]);\n    }\n\n    buf = Buffer.concat([version, payload]);\n  } else {\n    buf = payload;\n  }\n\n  var checksum = sha256x2(buf).slice(0, 4);\n  var result = Buffer.concat([buf, checksum]);\n  return base58.encode(result);\n}\n\nfunction decode(base58str, version) {\n  var arr = base58.decode(base58str);\n  var buf = new Buffer(arr);\n  var versionLength;\n\n  if (version == null) {\n    versionLength = 0;\n  } else {\n    if (typeof version === 'number') version = new Buffer([version]);\n    versionLength = version.length;\n    var versionCompare = buf.slice(0, versionLength);\n\n    if (versionCompare.toString('hex') !== version.toString('hex')) {\n      throw new Error('Invalid version');\n    }\n  }\n\n  var checksum = buf.slice(-4);\n  var endPos = buf.length - 4;\n  var bytes = buf.slice(0, endPos);\n  var newChecksum = sha256x2(bytes).slice(0, 4);\n\n  if (checksum.toString('hex') !== newChecksum.toString('hex')) {\n    throw new Error('Invalid checksum');\n  }\n\n  return bytes.slice(versionLength);\n}\n\nfunction isValid(base58str, version) {\n  try {\n    decode(base58str, version);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction createEncoder(version) {\n  return function (payload) {\n    return encode(payload, version);\n  };\n}\n\nfunction createDecoder(version) {\n  return function (base58str) {\n    return decode(base58str, version);\n  };\n}\n\nfunction createValidator(version) {\n  return function (base58str) {\n    return isValid(base58str, version);\n  };\n}\n\nfunction sha256x2(buffer) {\n  var sha = createHash('sha256').update(buffer).digest();\n  return createHash('sha256').update(sha).digest();\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  isValid: isValid,\n  createEncoder: createEncoder,\n  createDecoder: createDecoder,\n  createValidator: createValidator\n};","map":null,"metadata":{},"sourceType":"script"}