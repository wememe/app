{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/PublicActivity.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal } from './FeedTile';\nimport PublicActivityHeader from './PublicActivityHeader';\nimport PublicActivityTiles from './PublicActivityTiles';\nimport networkArray from '../../utils/networkArray';\nimport Loading from \"../../assets/Loading.svg\";\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar PublicActivity = function PublicActivity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      publicProfileActivity = _ref.publicProfileActivity;\n  return React.createElement(\"div\", {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"header\",\n    id: \"feed__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(\"div\", {\n    className: \"feed__activity__address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, ifFetchingActivity && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Loading,\n    alt: \"loading\",\n    id: \"activityLoad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  })), publicProfileActivity.length > 0 ? publicProfileActivity.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(PublicActivityHeader, {\n      feedAddress: feedAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(PublicActivityTiles, {\n      feedAddress: feedAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }) : !ifFetchingActivity && publicProfileActivity.length === 0 && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"No activity at this address yet\")))), React.createElement(\"div\", {\n    className: \"feed__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"logo__icon--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"3\"))));\n};\n\nPublicActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  image: PropTypes.array,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object\n};\nPublicActivity.defaultProps = {\n  feedByAddress: [],\n  image: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  currentAddress: '',\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    currentAddress: state.threeBox.currentAddress,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    name: state.threeBox.name,\n    image: state.threeBox.image,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(PublicActivity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/PublicActivity.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","PublicActivityHeader","PublicActivityTiles","networkArray","PublicActivity","ifFetchingActivity","publicProfileActivity","Loading","length","map","feedAddress","i","propTypes","feedByAddress","array","bool","verifiedGithub","string","verifiedTwitter","currentAddress","name","image","location","object","defaultProps","mapState","state","threeBox","publicProfileAddress","publicName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n} from './FeedTile';\n\nimport PublicActivityHeader from './PublicActivityHeader';\nimport PublicActivityTiles from './PublicActivityTiles';\n\nimport networkArray from '../../utils/networkArray';\nimport Loading from '../../assets/Loading.svg';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst PublicActivity = ({\n  ifFetchingActivity,\n  publicProfileActivity,\n}) => (\n    <div id=\"feed\">\n      <div>\n        <p className=\"header\" id=\"feed__header\">Activity</p>\n        <div className=\"feed__activity__address\">\n          {(ifFetchingActivity)\n            && (\n              <div className=\"feed__activity__load\">\n                <img src={Loading} alt=\"loading\" id=\"activityLoad\" />\n              </div>\n            )}\n          {publicProfileActivity.length > 0\n            ? publicProfileActivity.map((feedAddress, i) => (\n              <div key={i} className=\"feed__activity__tile\">\n                <PublicActivityHeader feedAddress={feedAddress} />\n                <PublicActivityTiles feedAddress={feedAddress} />\n              </div>\n            ))\n            : (!ifFetchingActivity && publicProfileActivity.length === 0)\n            && (\n              <div className=\"feed__activity__load\">\n                <p>No activity at this address yet</p>\n              </div>\n            )\n          }\n\n        </div>\n      </div>\n      <div className=\"feed__footer\">\n        <div className=\"logo__icon--footer\">\n          <h2>3</h2>\n        </div>\n      </div>\n    </div>\n  );\n\nPublicActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  image: PropTypes.array,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n};\n\nPublicActivity.defaultProps = {\n  feedByAddress: [],\n  image: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  currentAddress: '',\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  currentAddress: state.threeBox.currentAddress,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  name: state.threeBox.name,\n  image: state.threeBox.image,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(PublicActivity);\n"]},"metadata":{},"sourceType":"module"}