{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport contractMap from 'eth-contract-metadata';\nimport { toChecksumAddress } from 'ethereumjs-util';\nimport * as routes from './routes';\nexport var normalizeURL = function normalizeURL(pathname) {\n  var lowercasePathname = pathname.toLowerCase();\n  var fuzzyLowercasePathname = lowercasePathname.charAt(lowercasePathname.length - 1) === '/' ? lowercasePathname.slice(0, -1) : lowercasePathname;\n  return fuzzyLowercasePathname;\n};\nexport var matchProtectedRoutes = function matchProtectedRoutes(normalizedPath) {\n  if (normalizedPath === routes.ACTIVITY || normalizedPath === routes.DETAILS || normalizedPath === routes.EDIT) {\n    return true;\n  }\n\n  return false;\n};\nexport var addhttp = function addhttp(url) {\n  var correctedURL;\n\n  if (!/^(?:f|ht)tps?\\:\\/\\//.test(url)) {\n    correctedURL = \"http://\".concat(url);\n  } else {\n    correctedURL = url;\n  }\n\n  return correctedURL;\n};\nexport function fetchAsync(_x) {\n  return _fetchAsync.apply(this, arguments);\n}\n\nfunction _fetchAsync() {\n  _fetchAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(otherAddress) {\n    var response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.etherscan.io/api?module=contract&action=getabi&address=\".concat(otherAddress, \"&apikey=\").concat(process.env.ETHERSCAN_TOKEN));\n\n          case 2:\n            response = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 6;\n              break;\n            }\n\n            console.log(\"Looks like there was a problem. Status Code: \".concat(response.status));\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return response.json();\n\n          case 8:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _fetchAsync.apply(this, arguments);\n}\n\n;\nexport var imageElFor = function imageElFor(address) {\n  var contractMetaData = contractMap[toChecksumAddress(address)];\n\n  if (!contractMetaData || !('logo' in contractMetaData)) {\n    return false;\n  } // this isnt necessary\n\n\n  var fileName = contractMetaData.logo;\n  var path = \"/contractIcons/\".concat(fileName);\n  var contractImg = document.createElement('img');\n  contractImg.src = path;\n  contractImg.style.width = '100%';\n  return [contractImg, contractMetaData];\n};","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/utils/funcs.js"],"names":["contractMap","toChecksumAddress","routes","normalizeURL","pathname","lowercasePathname","toLowerCase","fuzzyLowercasePathname","charAt","length","slice","matchProtectedRoutes","normalizedPath","ACTIVITY","DETAILS","EDIT","addhttp","url","correctedURL","test","fetchAsync","otherAddress","fetch","process","env","ETHERSCAN_TOKEN","response","status","console","log","json","data","imageElFor","address","contractMetaData","fileName","logo","path","contractImg","document","createElement","src","style","width"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,uBAAxB;AACA,SACEC,iBADF,QAEO,iBAFP;AAIA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAc;AACxC,MAAMC,iBAAiB,GAAGD,QAAQ,CAACE,WAAT,EAA1B;AACA,MAAMC,sBAAsB,GAAGF,iBAAiB,CAACG,MAAlB,CAAyBH,iBAAiB,CAACI,MAAlB,GAA2B,CAApD,MAA2D,GAA3D,GAC7BJ,iBAAiB,CAACK,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,CAD6B,GAE7BL,iBAFF;AAIA,SAAOE,sBAAP;AACD,CAPM;AASP,OAAO,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,cAAD,EAAoB;AACtD,MAAIA,cAAc,KAAKV,MAAM,CAACW,QAA1B,IACFD,cAAc,KAAKV,MAAM,CAACY,OADxB,IAEFF,cAAc,KAAKV,MAAM,CAACa,IAF5B,EAEkC;AAChC,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPM;AASP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAS;AAC9B,MAAIC,YAAJ;;AACA,MAAI,CAAC,sBAAsBC,IAAtB,CAA2BF,GAA3B,CAAL,EAAsC;AACpCC,IAAAA,YAAY,oBAAaD,GAAb,CAAZ;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAGD,GAAf;AACD;;AACD,SAAOC,YAAP;AACD,CARM;AAUP,gBAAsBE,UAAtB;AAAA;AAAA;;;;;2BAAO,iBAA0BC,YAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEkBC,KAAK,8EAAuED,YAAvE,qBAA8FE,OAAO,CAACC,GAAR,CAAYC,eAA1G,EAFvB;;AAAA;AAECC,YAAAA,QAFD;;AAAA,kBAGDA,QAAQ,CAACC,MAAT,KAAoB,GAHnB;AAAA;AAAA;AAAA;;AAIHC,YAAAA,OAAO,CAACC,GAAR,wDAA4DH,QAAQ,CAACC,MAArE;AAJG;;AAAA;AAAA;AAAA,mBAOcD,QAAQ,CAACI,IAAT,EAPd;;AAAA;AAOCC,YAAAA,IAPD;AAAA,6CASEA,IATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAUN;AAED,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AACrC,MAAMC,gBAAgB,GAAGlC,WAAW,CAACC,iBAAiB,CAACgC,OAAD,CAAlB,CAApC;;AACA,MAAI,CAACC,gBAAD,IAAsB,EAAE,UAAUA,gBAAZ,CAA1B,EAA0D;AACxD,WAAO,KAAP;AACD,GAJoC,CAKrC;;;AACA,MAAMC,QAAQ,GAAGD,gBAAgB,CAACE,IAAlC;AACA,MAAMC,IAAI,4BAAqBF,QAArB,CAAV;AACA,MAAMG,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAApB;AACAF,EAAAA,WAAW,CAACG,GAAZ,GAAkBJ,IAAlB;AACAC,EAAAA,WAAW,CAACI,KAAZ,CAAkBC,KAAlB,GAA0B,MAA1B;AACA,SAAO,CAACL,WAAD,EAAcJ,gBAAd,CAAP;AACD,CAZM","sourcesContent":["import contractMap from 'eth-contract-metadata';\nimport {\n  toChecksumAddress,\n} from 'ethereumjs-util';\n\nimport * as routes from './routes';\n\nexport const normalizeURL = (pathname) => {\n  const lowercasePathname = pathname.toLowerCase();\n  const fuzzyLowercasePathname = lowercasePathname.charAt(lowercasePathname.length - 1) === '/' ?\n    lowercasePathname.slice(0, -1) :\n    lowercasePathname;\n\n  return fuzzyLowercasePathname;\n};\n\nexport const matchProtectedRoutes = (normalizedPath) => {\n  if (normalizedPath === routes.ACTIVITY ||\n    normalizedPath === routes.DETAILS ||\n    normalizedPath === routes.EDIT) {\n    return true;\n  }\n  return false;\n};\n\nexport const addhttp = (url) => {\n  let correctedURL;\n  if (!/^(?:f|ht)tps?\\:\\/\\//.test(url)) {\n    correctedURL = `http://${url}`;\n  } else {\n    correctedURL = url;\n  }\n  return correctedURL;\n};\n\nexport async function fetchAsync(otherAddress) {\n  // limit to five calls a second\n  const response = await fetch(`https://api.etherscan.io/api?module=contract&action=getabi&address=${otherAddress}&apikey=${process.env.ETHERSCAN_TOKEN}`);\n  if (response.status !== 200) {\n    console.log(`Looks like there was a problem. Status Code: ${response.status}`);\n    return;\n  }\n  const data = await response.json();\n  // only proceed once second promise is resolved\n  return data;\n};\n\nexport const imageElFor = (address) => {\n  const contractMetaData = contractMap[toChecksumAddress(address)];\n  if (!contractMetaData || (!('logo' in contractMetaData))) {\n    return false;\n  }\n  // this isnt necessary\n  const fileName = contractMetaData.logo;\n  const path = `/contractIcons/${fileName}`;\n  const contractImg = document.createElement('img');\n  contractImg.src = path;\n  contractImg.style.width = '100%';\n  return [contractImg, contractMetaData];\n};"]},"metadata":{},"sourceType":"module"}