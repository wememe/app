{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar _require = require('./utils'),\n    createLock = _require.createLock; // These operations are read-locked at the function level and will execute simultaneously\n\n\nvar readOperations = {\n  ls: require('./ls'),\n  stat: require('./stat') // These operations are locked at the function level and will execute in series\n\n};\nvar writeOperations = {\n  cp: require('./cp'),\n  flush: require('./flush'),\n  mkdir: require('./mkdir'),\n  mv: require('./mv'),\n  rm: require('./rm') // These operations are asynchronous and manage their own locking\n\n};\nvar unwrappedOperations = {\n  write: require('./write'),\n  read: require('./read') // These operations are synchronous and manage their own locking\n\n};\nvar unwrappedSynchronousOperations = {\n  readPullStream: require('./read-pull-stream'),\n  readReadableStream: require('./read-readable-stream')\n};\n\nvar wrap = function wrap(_ref) {\n  var ipfs = _ref.ipfs,\n      mfs = _ref.mfs,\n      operations = _ref.operations,\n      lock = _ref.lock;\n  Object.keys(operations).forEach(function (key) {\n    mfs[key] = promisify(lock(operations[key](ipfs)));\n  });\n};\n\nvar defaultOptions = {\n  repoOwner: true\n};\n\nmodule.exports = function (ipfs, options) {\n  var _Object$assign = Object.assign({}, defaultOptions || {}, options),\n      repoOwner = _Object$assign.repoOwner;\n\n  var lock = createLock(repoOwner);\n\n  var readLock = function readLock(operation) {\n    return lock.readLock(operation);\n  };\n\n  var writeLock = function writeLock(operation) {\n    return lock.writeLock(operation);\n  };\n\n  var mfs = {};\n  wrap({\n    ipfs: ipfs,\n    mfs: mfs,\n    operations: readOperations,\n    lock: readLock\n  });\n  wrap({\n    ipfs: ipfs,\n    mfs: mfs,\n    operations: writeOperations,\n    lock: writeLock\n  });\n  Object.keys(unwrappedOperations).forEach(function (key) {\n    mfs[key] = promisify(unwrappedOperations[key](ipfs));\n  });\n  Object.keys(unwrappedSynchronousOperations).forEach(function (key) {\n    mfs[key] = unwrappedSynchronousOperations[key](ipfs);\n  });\n  return mfs;\n};","map":null,"metadata":{},"sourceType":"script"}