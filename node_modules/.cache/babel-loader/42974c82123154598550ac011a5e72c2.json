{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream');\n\nvar EventEmitter = require('events');\n/**\n * Takes a Switch and returns an Observer that can be used in conjunction with\n * observe-connection.js. The returned Observer comes with `incoming` and\n * `outgoing` properties that can be used in pull streams to emit all metadata\n * for messages that pass through a Connection.\n *\n * @param {Switch} swtch\n * @returns {EventEmitter}\n */\n\n\nmodule.exports = function (swtch) {\n  var observer = Object.assign(new EventEmitter(), {\n    incoming: observe('in'),\n    outgoing: observe('out')\n  });\n  swtch.on('peer-mux-established', function (peerInfo) {\n    observer.emit('peer:connected', peerInfo.id.toB58String());\n  });\n  swtch.on('peer-mux-closed', function (peerInfo) {\n    observer.emit('peer:closed', peerInfo.id.toB58String());\n  });\n  return observer;\n\n  function observe(direction) {\n    return function (transport, protocol, peerInfo) {\n      return pull.map(function (buffer) {\n        willObserve(peerInfo, transport, protocol, direction, buffer.length);\n        return buffer;\n      });\n    };\n  }\n\n  function willObserve(peerInfo, transport, protocol, direction, bufferLength) {\n    peerInfo.then(function (_peerInfo) {\n      if (_peerInfo) {\n        var peerId = _peerInfo.id.toB58String();\n\n        setImmediate(function () {\n          return observer.emit('message', peerId, transport, protocol, direction, bufferLength);\n        });\n      }\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}