{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nexports.convertToDid = convertToDid;\n\nvar _didResolver = require('did-resolver');\n\nvar _uportLite = require('uport-lite');\n\nvar _uportLite2 = _interopRequireDefault(_uportLite);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction convertToDid(did, legacy) {\n  var publicKey = [{\n    id: did + '#keys-1',\n    type: 'EcdsaPublicKeySecp256k1',\n    owner: did,\n    publicKeyHex: legacy.publicKey.slice(2)\n  }];\n\n  if (legacy.publicEncKey) {\n    publicKey.push({\n      id: did + '#keys-2',\n      type: 'Curve25519EncryptionPublicKey',\n      owner: did,\n      publicKeyBase64: legacy.publicEncKey\n    });\n  }\n\n  var doc = {\n    '@context': 'https://w3id.org/did/v1',\n    id: did,\n    publicKey: publicKey\n  };\n\n  if (legacy.name || legacy.description || legacy.image) {\n    var profile = (0, _assign2.default)({}, legacy);\n    delete profile['publicKey'];\n    delete profile['publicEncKey'];\n    doc.uportProfile = profile;\n  }\n\n  return doc;\n}\n\nfunction register(configured) {\n  var cpsRegistry = configured || (0, _uportLite2.default)();\n\n  var registry = function registry(mnid) {\n    return new _promise2.default(function (resolve, reject) {\n      cpsRegistry(mnid, function (error, doc) {\n        return error ? reject(error) : resolve(doc);\n      });\n    });\n  };\n\n  function resolve(did, parsed) {\n    return new _promise2.default(function (resolve, reject) {\n      registry(parsed.id).then(function (doc) {\n        if (!doc) return resolve(); // Check if real DID document or legacy\n\n        if (doc['@context'] === 'https://w3id.org/did/v1') return resolve(doc);\n\n        if (typeof doc['publicKey'] === 'string') {\n          return resolve(convertToDid(did, doc));\n        }\n      }, reject);\n    });\n  }\n\n  (0, _didResolver.registerMethod)('uport', resolve);\n}\n\nmodule.exports = register;","map":null,"metadata":{},"sourceType":"script"}