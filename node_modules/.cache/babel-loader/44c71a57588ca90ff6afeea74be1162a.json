{"ast":null,"code":"'use strict';\n\nvar setImmediate = require('async/setImmediate');\n\nvar SmartBuffer = require('smart-buffer').SmartBuffer;\n\nvar gitUtil = require('./util');\n\nexports = module.exports;\n\nexports.serialize = function (dagNode, callback) {\n  var lines = [];\n  lines.push('tree ' + gitUtil.cidToSha(dagNode.tree['/']).toString('hex'));\n  dagNode.parents.forEach(function (parent) {\n    lines.push('parent ' + gitUtil.cidToSha(parent['/']).toString('hex'));\n  });\n  lines.push('author ' + gitUtil.serializePersonLine(dagNode.author));\n  lines.push('committer ' + gitUtil.serializePersonLine(dagNode.committer));\n\n  if (dagNode.encoding) {\n    lines.push('encoding ' + dagNode.encoding);\n  }\n\n  if (dagNode.mergetag) {\n    dagNode.mergetag.forEach(function (tag) {\n      lines.push('mergetag object ' + gitUtil.cidToSha(tag.object['/']).toString('hex'));\n      lines.push(tag.text);\n    });\n  }\n\n  if (dagNode.signature) {\n    lines.push('gpgsig -----BEGIN PGP SIGNATURE-----');\n    lines.push(dagNode.signature.text);\n  }\n\n  lines.push('');\n  lines.push(dagNode.message);\n  var data = lines.join('\\n');\n  var outBuf = new SmartBuffer();\n  outBuf.writeString('commit ');\n  outBuf.writeString(data.length.toString());\n  outBuf.writeUInt8(0);\n  outBuf.writeString(data);\n  setImmediate(function () {\n    return callback(null, outBuf.toBuffer());\n  });\n};\n\nexports.deserialize = function (data, callback) {\n  var lines = data.toString().split('\\n');\n  var res = {\n    gitType: 'commit',\n    parents: []\n  };\n\n  var _loop = function _loop(_line) {\n    var m = lines[_line].match(/^([^ ]+) (.+)$/);\n\n    if (!m) {\n      if (lines[_line] !== '') {\n        setImmediate(function () {\n          return callback(new Error('Invalid commit line ' + _line));\n        });\n      }\n\n      res.message = lines.slice(_line + 1).join('\\n');\n      line = _line;\n      return \"break\";\n    }\n\n    var key = m[1];\n    var value = m[2];\n\n    switch (key) {\n      case 'tree':\n        res.tree = {\n          '/': gitUtil.shaToCid(Buffer.from(value, 'hex'))\n        };\n        break;\n\n      case 'committer':\n        res.committer = gitUtil.parsePersonLine(value);\n        break;\n\n      case 'author':\n        res.author = gitUtil.parsePersonLine(value);\n        break;\n\n      case 'parent':\n        res.parents.push({\n          '/': gitUtil.shaToCid(Buffer.from(value, 'hex'))\n        });\n        break;\n\n      case 'gpgsig':\n        {\n          if (value !== '-----BEGIN PGP SIGNATURE-----') {\n            setImmediate(function () {\n              return callback(new Error('Invalid commit line ' + _line));\n            });\n          }\n\n          res.signature = {};\n          var startLine = _line;\n\n          for (; _line < lines.length - 1; _line++) {\n            if (lines[_line + 1][0] !== ' ') {\n              res.signature.text = lines.slice(startLine + 1, _line + 1).join('\\n');\n              break;\n            }\n          }\n\n          break;\n        }\n\n      case 'mergetag':\n        {\n          var mt = value.match(/^object ([0-9a-f]{40})$/);\n\n          if (!mt) {\n            setImmediate(function () {\n              return callback(new Error('Invalid commit line ' + _line));\n            });\n          }\n\n          var tag = {\n            object: {\n              '/': gitUtil.shaToCid(Buffer.from(mt[1], 'hex'))\n            }\n          };\n          var _startLine = _line;\n\n          for (; _line < lines.length - 1; _line++) {\n            if (lines[_line + 1][0] !== ' ') {\n              tag.text = lines.slice(_startLine + 1, _line + 1).join('\\n');\n              break;\n            }\n          }\n\n          if (!res.mergetag) {\n            res.mergetag = [];\n          }\n\n          res.mergetag.push(tag);\n        }\n        break;\n\n      default:\n        res[key] = value;\n    }\n\n    line = _line;\n  };\n\n  for (var line = 0; line < lines.length; line++) {\n    var _ret = _loop(line);\n\n    if (_ret === \"break\") break;\n  }\n\n  setImmediate(function () {\n    return callback(null, res);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}