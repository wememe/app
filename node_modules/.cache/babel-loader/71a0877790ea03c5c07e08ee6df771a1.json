{"ast":null,"code":"'use strict';\n\nvar toPull = require('stream-to-pull-stream');\n\nvar isStream = require('is-stream');\n\nvar fileReaderStream = require('filereader-stream');\n\nvar isPullStream = require('is-pull-stream');\n\nvar fs = require('fs');\n\nvar values = require('pull-stream/sources/values');\n\nvar log = require('debug')('ipfs:mfs:utils:to-pull-source');\n\nvar waterfall = require('async/waterfall');\n\nvar toPullSource = function toPullSource(content, options, callback) {\n  if (!content) {\n    return callback(new Error('paths must start with a leading /'));\n  } // Buffers\n\n\n  if (Buffer.isBuffer(content)) {\n    log('Content was a buffer');\n    options.length = options.length || content.length;\n    return callback(null, values([content]));\n  } // Paths, node only\n\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a path'); // Find out the file size if options.length has not been specified\n\n    return waterfall([function (done) {\n      return options.length ? done(null, {\n        size: options.length\n      }) : fs.stat(content, done);\n    }, function (stats, done) {\n      options.length = stats.size;\n      done(null, toPull.source(fs.createReadStream(content)));\n    }], callback);\n  } // HTML5 Blob objects (including Files)\n\n\n  if (global.Blob && content instanceof global.Blob) {\n    log('Content was an HTML5 Blob');\n    options.length = options.length || content.size;\n    content = fileReaderStream(content);\n  } // Node streams\n\n\n  if (isStream(content)) {\n    log('Content was a Node stream');\n    return callback(null, toPull.source(content));\n  } // Pull stream\n\n\n  if (isPullStream.isSource(content)) {\n    log('Content was a pull-stream');\n    return callback(null, content);\n  }\n\n  callback(new Error(\"Don't know how to convert \".concat(content, \" into a pull stream source\")));\n};\n\nmodule.exports = toPullSource;","map":null,"metadata":{},"sourceType":"script"}