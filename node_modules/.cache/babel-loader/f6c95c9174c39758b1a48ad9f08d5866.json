{"ast":null,"code":"'use strict';\n\nvar exporter = require('ipfs-unixfs-engine').exporter;\n\nvar pull = require('pull-stream/pull');\n\nvar once = require('pull-stream/sources/once');\n\nvar asyncMap = require('pull-stream/throughs/async-map');\n\nvar defer = require('pull-defer');\n\nvar collect = require('pull-stream/sinks/collect');\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar _require = require('./utils'),\n    traverseTo = _require.traverseTo,\n    createLock = _require.createLock;\n\nvar log = require('debug')('ipfs:mfs:read-pull-stream');\n\nvar defaultOptions = {\n  offset: 0,\n  length: undefined\n};\n\nmodule.exports = function (ipfs) {\n  return function mfsReadPullStream(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = Object.assign({}, defaultOptions, options);\n    log(\"Reading \".concat(path));\n    var deferred = defer.source();\n    pull(once(path), asyncMap(function (path, cb) {\n      createLock().readLock(function (next) {\n        traverseTo(ipfs, path, {\n          parents: false\n        }, next);\n      })(cb);\n    }), asyncMap(function (result, cb) {\n      var node = result.node;\n      var meta = UnixFs.unmarshal(node.data);\n\n      if (meta.type !== 'file') {\n        return cb(new Error(\"\".concat(path, \" was not a file\")));\n      }\n\n      log(\"Getting \".concat(path, \" content\"));\n      pull(exporter(node.multihash, ipfs.dag, {\n        offset: options.offset,\n        length: options.length\n      }), collect(function (error, files) {\n        cb(error, error ? null : files[0].content);\n      }));\n    }), collect(function (error, streams) {\n      if (error) {\n        return deferred.abort(error);\n      }\n\n      if (!streams.length) {\n        return deferred.abort(new Error(\"Could not load content stream from \".concat(path)));\n      }\n\n      log(\"Got \".concat(path, \" content\"));\n      deferred.resolve(streams[0]);\n    }));\n    return deferred;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}