{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar OFFLINE_ERROR = require('../utils').OFFLINE_ERROR;\n\nvar PeerId = require('peer-id');\n\nvar pull = require('pull-stream');\n\nvar Pushable = require('pull-pushable');\n\nvar log = debug('jsipfs:pingPullStream');\nlog.error = debug('jsipfs:pingPullStream:error');\n\nmodule.exports = function pingPullStream(self) {\n  return function (peerId, opts) {\n    if (!self.isOnline()) {\n      return pull.error(new Error(OFFLINE_ERROR));\n    }\n\n    opts = Object.assign({\n      count: 10\n    }, opts);\n    var source = Pushable();\n    getPeer(self._libp2pNode, source, peerId, function (err, peer) {\n      if (err) {\n        log.error(err);\n        source.end(err);\n        return;\n      }\n\n      runPing(self._libp2pNode, source, opts.count, peer, function (err) {\n        if (err) {\n          log.error(err);\n          source.push(getPacket({\n            success: false,\n            text: err.toString()\n          }));\n          source.end();\n        }\n      });\n    });\n    return source;\n  };\n};\n\nfunction getPacket(msg) {\n  // Default msg\n  var basePacket = {\n    success: true,\n    time: 0,\n    text: ''\n  };\n  return Object.assign(basePacket, msg);\n}\n\nfunction getPeer(libp2pNode, statusStream, peerIdStr, cb) {\n  var peerId;\n\n  try {\n    peerId = PeerId.createFromB58String(peerIdStr);\n  } catch (err) {\n    return cb(err);\n  }\n\n  var peerInfo;\n\n  try {\n    peerInfo = libp2pNode.peerBook.get(peerId);\n  } catch (err) {\n    log('Peer not found in peer book, trying peer routing'); // Share lookup status just as in the go implemmentation\n\n    statusStream.push(getPacket({\n      text: \"Looking up peer \".concat(peerIdStr)\n    }));\n    return libp2pNode.peerRouting.findPeer(peerId, cb);\n  }\n\n  cb(null, peerInfo);\n}\n\nfunction runPing(libp2pNode, statusStream, count, peer, cb) {\n  libp2pNode.ping(peer, function (err, p) {\n    if (err) {\n      return cb(err);\n    }\n\n    var packetCount = 0;\n    var totalTime = 0;\n    statusStream.push(getPacket({\n      text: \"PING \".concat(peer.id.toB58String())\n    }));\n    p.on('ping', function (time) {\n      statusStream.push(getPacket({\n        time: time\n      }));\n      totalTime += time;\n      packetCount++;\n\n      if (packetCount >= count) {\n        var average = totalTime / count;\n        p.stop();\n        statusStream.push(getPacket({\n          text: \"Average latency: \".concat(average, \"ms\")\n        }));\n        statusStream.end();\n      }\n    });\n    p.on('error', function (err) {\n      log.error(err);\n      p.stop();\n      cb(err);\n    });\n    p.start();\n  });\n}","map":null,"metadata":{},"sourceType":"script"}