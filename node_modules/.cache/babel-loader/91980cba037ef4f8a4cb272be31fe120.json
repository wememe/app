{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Connection = require('interface-connection').Connection;\n\nvar pull = require('pull-stream');\n\nvar timeout = require('async/timeout');\n\nvar queue = require('async/queue');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:swarm:dialer:queue');\n/**\n * Queue up the amount of dials to a given peer.\n */\n\nvar DialQueue =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Create a new dial queue.\n   *\n   * @param {number} limit\n   * @param {number} dialTimeout\n   */\n  function DialQueue(limit, dialTimeout) {\n    var _this = this;\n\n    _classCallCheck(this, DialQueue);\n\n    this.dialTimeout = dialTimeout;\n    this.queue = queue(function (task, cb) {\n      _this._doWork(task.transport, task.addr, task.token, cb);\n    }, limit);\n  }\n  /**\n   * The actual work done by the queue.\n   *\n   * @param {SwarmTransport} transport\n   * @param {Multiaddr} addr\n   * @param {CancelToken} token\n   * @param {function(Error, Connection)} callback\n   * @returns {void}\n   * @private\n   */\n\n\n  _createClass(DialQueue, [{\n    key: \"_doWork\",\n    value: function _doWork(transport, addr, token, callback) {\n      log('work');\n\n      this._dialWithTimeout(transport, addr, function (err, conn) {\n        if (err) {\n          log('work:error');\n          return callback(null, {\n            error: err\n          });\n        }\n\n        if (token.cancel) {\n          log('work:cancel'); // clean up already done dials\n\n          pull(pull.empty(), conn); // TODO: proper cleanup once the connection interface supports it\n          // return conn.close(() => callback(new Error('Manual cancel'))\n\n          return callback(null, {\n            cancel: true\n          });\n        } // one is enough\n\n\n        token.cancel = true;\n        log('work:success');\n        var proxyConn = new Connection();\n        proxyConn.setInnerConn(conn);\n        callback(null, {\n          multiaddr: addr,\n          conn: conn\n        });\n      });\n    }\n    /**\n     * Dial the given transport, timing out with the set timeout.\n     *\n     * @param {SwarmTransport} transport\n     * @param {Multiaddr} addr\n     * @param {function(Error, Connection)} callback\n     * @returns {void}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_dialWithTimeout\",\n    value: function _dialWithTimeout(transport, addr, callback) {\n      timeout(function (cb) {\n        var conn = transport.dial(addr, function (err) {\n          if (err) {\n            return cb(err);\n          }\n\n          cb(null, conn);\n        });\n      }, this.dialTimeout)(callback);\n    }\n    /**\n     * Add new work to the queue.\n     *\n     * @param {SwarmTransport} transport\n     * @param {Multiaddr} addr\n     * @param {CancelToken} token\n     * @param {function(Error, Connection)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(transport, addr, token, callback) {\n      this.queue.push({\n        transport: transport,\n        addr: addr,\n        token: token\n      }, callback);\n    }\n  }]);\n\n  return DialQueue;\n}();\n\nmodule.exports = DialQueue;","map":null,"metadata":{},"sourceType":"script"}