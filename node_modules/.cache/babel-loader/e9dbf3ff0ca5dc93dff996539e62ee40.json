{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar connect = require('pull-ws/client');\n\nvar mafmt = require('mafmt');\n\nvar withIs = require('class-is');\n\nvar Connection = require('interface-connection').Connection;\n\nvar maToUrl = require('./ma-to-url');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:websockets:dialer');\n\nvar _createListener = require('./listener');\n\nvar WebSockets =\n/*#__PURE__*/\nfunction () {\n  function WebSockets() {\n    _classCallCheck(this, WebSockets);\n  }\n\n  _createClass(WebSockets, [{\n    key: \"dial\",\n    value: function dial(ma, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      callback = callback || function () {};\n\n      var url = maToUrl(ma);\n      log('dialing %s', url);\n      var socket = connect(url, {\n        binary: true,\n        onConnect: function onConnect(err) {\n          callback(err);\n        }\n      });\n      var conn = new Connection(socket);\n\n      conn.getObservedAddrs = function (cb) {\n        return cb(null, [ma]);\n      };\n\n      conn.close = function (cb) {\n        return socket.close(cb);\n      };\n\n      return conn;\n    }\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      return _createListener(options, handler);\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      if (!Array.isArray(multiaddrs)) {\n        multiaddrs = [multiaddrs];\n      }\n\n      return multiaddrs.filter(function (ma) {\n        if (ma.protoNames().includes('p2p-circuit')) {\n          return false;\n        }\n\n        if (ma.protoNames().includes('ipfs')) {\n          ma = ma.decapsulate('ipfs');\n        }\n\n        return mafmt.WebSockets.matches(ma) || mafmt.WebSocketsSecure.matches(ma);\n      });\n    }\n  }]);\n\n  return WebSockets;\n}();\n\nmodule.exports = withIs(WebSockets, {\n  className: 'WebSockets',\n  symbolName: '@libp2p/js-libp2p-websockets/websockets'\n});","map":null,"metadata":{},"sourceType":"script"}