{"ast":null,"code":"'use strict';\n\nvar series = require('async/series');\n\nvar Bitswap = require('ipfs-bitswap');\n\nvar setImmediate = require('async/setImmediate');\n\nvar promisify = require('promisify-es6');\n\nmodule.exports = function (self) {\n  return promisify(function (callback) {\n    var done = function done(err) {\n      if (err) {\n        setImmediate(function () {\n          return self.emit('error', err);\n        });\n        return callback(err);\n      }\n\n      self.state.started();\n      setImmediate(function () {\n        return self.emit('start');\n      });\n      callback();\n    };\n\n    if (self.state.state() !== 'stopped') {\n      return done(new Error(\"Not able to start from state: \".concat(self.state.state())));\n    }\n\n    self.log('starting');\n    self.state.start();\n    series([function (cb) {\n      // The repo may be closed if previously stopped\n      self._repo.closed ? self._repo.open(cb) : cb();\n    }, function (cb) {\n      return self.libp2p.start(cb);\n    }, function (cb) {\n      self._bitswap = new Bitswap(self._libp2pNode, self._repo.blocks, {\n        statsEnabled: true\n      });\n\n      self._bitswap.start();\n\n      self._blockService.setExchange(self._bitswap);\n\n      self._preload.start();\n\n      self._ipns.republisher.start();\n\n      self._mfsPreload.start(cb);\n    }], done);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}