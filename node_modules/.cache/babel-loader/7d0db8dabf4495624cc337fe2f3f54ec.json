{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from './FeedTile';\nimport networkArray from '../../utils/networkArray';\nimport Loading from \"../../assets/Loading.svg\";\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar Activity = function Activity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      feedByAddress = _ref.feedByAddress,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      publicProfileActivity = _ref.publicProfileActivity,\n      onPublicProfilePage = _ref.onPublicProfilePage,\n      currentAddress = _ref.currentAddress,\n      publicProfileAddress = _ref.publicProfileAddress,\n      name = _ref.name,\n      image = _ref.image,\n      publicName = _ref.publicName;\n  return React.createElement(\"div\", {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"header\",\n    id: \"feed__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(\"div\", {\n    className: \"feed__activity__address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, ifFetchingActivity && !onPublicProfilePage && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Loading,\n    alt: \"loading\",\n    id: \"activityLoad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), !onPublicProfilePage && feedByAddress.length > 0 ? feedByAddress.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"feed__activity__context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? image.length > 0 && image[0].contentUrl ? React.createElement(\"img\", {\n      src: \"https://ipfs.infura.io/ipfs/\".concat(image[0].contentUrl['/']),\n      className: \"feed__activity__user\",\n      alt: \"profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"feed__activity__user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"feed__activity__context__network \".concat(networkArray[Math.floor(Math.random() * networkArray.length)]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"0x\"), React.createElement(\"div\", {\n      className: \"feed__activity__address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, Object.keys(feedAddress)[0] === 'threeBox' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"3Box Profile\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://3box.io/\".concat(Object.keys(feedAddress)[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, feedAddress.metaData && feedAddress.metaData.name ? feedAddress.metaData.name : Object.keys(feedAddress)[0])), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Ethereum Address\")))), Object.values(feedAddress)[0].map(function (item, index) {\n      return function () {\n        if (item.dataType === 'Internal') return React.createElement(FeedTileInternal, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n        if (item.dataType === 'Token') return React.createElement(FeedTileToken, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        });\n        if (item.dataType === 'Txs') return React.createElement(FeedTileTXS, {\n          item: item,\n          key: index,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          currentAddress: currentAddress,\n          name: name,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        });\n        if (item.dataType === 'Public') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          verifiedGithub: verifiedGithub,\n          verifiedTwitter: verifiedTwitter,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        });\n        if (item.dataType === 'Private') return React.createElement(FeedTileActivity, {\n          item: item,\n          key: index,\n          isEven: parseInt(index, 10) % 2 === 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      }();\n    }));\n  }) : !ifFetchingActivity && !publicProfileActivity.length && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"No activity at this address yet\")), console.log(publicProfileActivity), onPublicProfilePage && publicProfileActivity.length > 0 ? publicProfileActivity.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"feed__activity__context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, console.log(feedAddress.metaData), feedAddress.metaData && feedAddress.metaData.image ? React.createElement(\"img\", {\n      src: \"https://ipfs.infura.io/ipfs/\".concat(feedAddress.metaData.image),\n      className: \"feed__activity__user\",\n      alt: \"profile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }) : feedAddress.metaData && feedAddress.metaData.contractImg ? feedAddress.metaData.contractImg.outerHTML : React.createElement(\"div\", {\n      className: \"feed__activity__context__network \".concat(networkArray[Math.floor(Math.random() * networkArray.length)]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"0x\"), React.createElement(\"div\", {\n      className: \"feed__activity__address\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"https://3box.io/\".concat(Object.keys(feedAddress)[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, feedAddress.metaData && feedAddress.metaData.name ? feedAddress.metaData.name : Object.keys(feedAddress)[0])), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Ethereum Address\")))), Object.values(feedAddress)[0].map(function (item, index) {\n      return function () {\n        if (item.dataType === 'Internal') return React.createElement(FeedTileInternal, {\n          currentAddress: publicProfileAddress,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          onPublicProfilePage: true,\n          name: publicName,\n          item: item,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n        if (item.dataType === 'Token') return React.createElement(FeedTileToken, {\n          currentAddress: publicProfileAddress,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          onPublicProfilePage: true,\n          name: publicName,\n          item: item,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        });\n        if (item.dataType === 'Txs') return React.createElement(FeedTileTXS, {\n          currentAddress: publicProfileAddress,\n          metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n          onPublicProfilePage: true,\n          name: publicName,\n          item: item,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      }();\n    }));\n  }) : !ifFetchingActivity && publicProfileActivity.length > 0 && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"No activity at this address yet\")))), React.createElement(\"div\", {\n    className: \"feed__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"logo__icon--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"3\"))));\n};\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  onPublicProfilePage: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  image: PropTypes.array,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string\n};\nActivity.defaultProps = {\n  feedByAddress: [],\n  image: [],\n  name: '',\n  ifFetchingActivity: false,\n  onPublicProfilePage: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    onPublicProfilePage: state.threeBox.onPublicProfilePage,\n    currentAddress: state.threeBox.currentAddress,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    name: state.threeBox.name,\n    image: state.threeBox.image,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(Activity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","networkArray","Activity","ifFetchingActivity","feedByAddress","verifiedGithub","verifiedTwitter","publicProfileActivity","onPublicProfilePage","currentAddress","publicProfileAddress","name","image","publicName","Loading","length","map","feedAddress","i","Object","keys","contentUrl","Math","floor","random","metaData","values","item","index","dataType","parseInt","console","log","contractImg","outerHTML","propTypes","array","bool","string","location","object","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from './FeedTile';\n\nimport networkArray from '../../utils/networkArray';\nimport Loading from '../../assets/Loading.svg';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst Activity = ({\n  ifFetchingActivity,\n  feedByAddress,\n  verifiedGithub,\n  verifiedTwitter,\n  publicProfileActivity,\n  onPublicProfilePage,\n  currentAddress,\n  publicProfileAddress,\n  name,\n  image,\n  publicName,\n}) => (\n    <div id=\"feed\">\n      <div>\n        <p className=\"header\" id=\"feed__header\">Activity</p>\n        <div className=\"feed__activity__address\">\n          {(ifFetchingActivity && !onPublicProfilePage)\n            && (\n              <div className=\"feed__activity__load\">\n                <img src={Loading} alt=\"loading\" id=\"activityLoad\" />\n              </div>\n            )}\n          {(!onPublicProfilePage && feedByAddress.length > 0)\n            ? feedByAddress.map((feedAddress, i) => (\n              <div key={i} className=\"feed__activity__tile\">\n                <div className=\"feed__activity__context\">\n                  {Object.keys(feedAddress)[0] === 'threeBox' ?\n                    image.length > 0 && image[0].contentUrl\n                      ? <img src={`https://ipfs.infura.io/ipfs/${image[0].contentUrl['/']}`} className=\"feed__activity__user\" alt=\"profile\" />\n                      : <div className=\"feed__activity__user\" />\n                    : (\n                      <div className={`feed__activity__context__network ${networkArray[Math.floor(Math.random() * networkArray.length)]}`}>\n                        0x\n                      </div>)\n                  }\n                  <div className=\"feed__activity__address\">\n                    {Object.keys(feedAddress)[0] === 'threeBox'\n                      ? (\n                        <div>\n                          <h4>\n                            {name}\n                          </h4>\n                          <p>\n                            3Box Profile\n                          </p>\n                        </div>\n                      )\n                      : (\n                        <div>\n                          <a href={`https://3box.io/${Object.keys(feedAddress)[0]}`} >\n                            <h4>\n                              {(feedAddress.metaData && feedAddress.metaData.name) ? feedAddress.metaData.name : Object.keys(feedAddress)[0]}\n                            </h4>\n                          </a>\n                          <p>\n                            Ethereum Address\n                          </p>\n                        </div>\n                      )}\n                  </div>\n                </div>\n                {\n                  Object.values(feedAddress)[0].map((item, index) => (\n                    (() => {\n                      if (item.dataType === 'Internal') return <FeedTileInternal item={item} key={index} metaDataName={feedAddress.metaData && feedAddress.metaData.name} currentAddress={currentAddress} name={name} isEven={parseInt(index, 10) % 2 === 0} />;\n                      if (item.dataType === 'Token') return <FeedTileToken item={item} key={index} metaDataName={feedAddress.metaData && feedAddress.metaData.name} currentAddress={currentAddress} name={name} isEven={parseInt(index, 10) % 2 === 0} />;\n                      if (item.dataType === 'Txs') return <FeedTileTXS item={item} key={index} metaDataName={feedAddress.metaData && feedAddress.metaData.name} currentAddress={currentAddress} name={name} isEven={parseInt(index, 10) % 2 === 0} />;\n                      if (item.dataType === 'Public') return <FeedTileActivity item={item} key={index} verifiedGithub={verifiedGithub} verifiedTwitter={verifiedTwitter} isEven={parseInt(index, 10) % 2 === 0} />;\n                      if (item.dataType === 'Private') return <FeedTileActivity item={item} key={index} isEven={parseInt(index, 10) % 2 === 0} />;\n                    })()\n                  ))\n                }\n              </div>\n            ))\n            : (!ifFetchingActivity && !publicProfileActivity.length)\n            && (\n              <div className=\"feed__activity__load\">\n                <p>No activity at this address yet</p>\n              </div>\n            )\n          }\n\n          {console.log(publicProfileActivity)}\n          {(onPublicProfilePage && publicProfileActivity.length > 0)\n            ? publicProfileActivity.map((feedAddress, i) => (\n              <div key={i} className=\"feed__activity__tile\">\n                <div className=\"feed__activity__context\">\n                  {console.log(feedAddress.metaData)}\n                  {(feedAddress.metaData && feedAddress.metaData.image)\n                    ? <img src={`https://ipfs.infura.io/ipfs/${feedAddress.metaData.image}`} className=\"feed__activity__user\" alt=\"profile\" />\n                    : (feedAddress.metaData && feedAddress.metaData.contractImg) ? feedAddress.metaData.contractImg.outerHTML\n                      : (\n                        <div className={`feed__activity__context__network ${networkArray[Math.floor(Math.random() * networkArray.length)]}`}>\n                          0x\n                      </div>)}\n                  <div className=\"feed__activity__address\">\n                    <div>\n                      <a href={`https://3box.io/${Object.keys(feedAddress)[0]}`}>\n                        <h4>\n                          {(feedAddress.metaData && feedAddress.metaData.name) ? feedAddress.metaData.name : Object.keys(feedAddress)[0]}\n                        </h4>\n                      </a>\n                      <p>\n                        Ethereum Address\n                      </p>\n                    </div>\n                  </div>\n                </div>\n                {\n                  Object.values(feedAddress)[0].map((item, index) => (\n                    (() => {\n                      if (item.dataType === 'Internal') return <FeedTileInternal currentAddress={publicProfileAddress} metaDataName={feedAddress.metaData && feedAddress.metaData.name} onPublicProfilePage name={publicName} item={item} key={index} />;\n                      if (item.dataType === 'Token') return <FeedTileToken currentAddress={publicProfileAddress} metaDataName={feedAddress.metaData && feedAddress.metaData.name} onPublicProfilePage name={publicName} item={item} key={index} />;\n                      if (item.dataType === 'Txs') return <FeedTileTXS currentAddress={publicProfileAddress} metaDataName={feedAddress.metaData && feedAddress.metaData.name} onPublicProfilePage name={publicName} item={item} key={index} />;\n                    })()\n                  ))\n                }\n              </div>\n            ))\n            : (!ifFetchingActivity && publicProfileActivity.length > 0)\n            && (\n              <div className=\"feed__activity__load\">\n                <p>No activity at this address yet</p>\n              </div>\n            )\n          }\n\n        </div>\n      </div>\n      <div className=\"feed__footer\">\n        <div className=\"logo__icon--footer\">\n          <h2>3</h2>\n        </div>\n      </div>\n    </div>\n  );\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  onPublicProfilePage: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  image: PropTypes.array,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string,\n};\n\nActivity.defaultProps = {\n  feedByAddress: [],\n  image: [],\n  name: '',\n  ifFetchingActivity: false,\n  onPublicProfilePage: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  onPublicProfilePage: state.threeBox.onPublicProfilePage,\n  currentAddress: state.threeBox.currentAddress,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  name: state.threeBox.name,\n  image: state.threeBox.image,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(Activity);\n"]},"metadata":{},"sourceType":"module"}