{"ast":null,"code":"/* Copyright (c) 2012-2018 LevelUP contributors\n * See list at <https://github.com/level/levelup#contributing>\n * MIT License\n * <https://github.com/level/levelup/blob/master/LICENSE.md>\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar inherits = require('util').inherits;\n\nvar extend = require('xtend');\n\nvar DeferredLevelDOWN = require('deferred-leveldown');\n\nvar IteratorStream = require('level-iterator-stream');\n\nvar Batch = require('./batch');\n\nvar errors = require('level-errors');\n\nvar assert = require('assert');\n\nvar promisify = require('./promisify');\n\nvar WriteError = errors.WriteError;\nvar ReadError = errors.ReadError;\nvar NotFoundError = errors.NotFoundError;\nvar OpenError = errors.OpenError;\nvar InitializationError = errors.InitializationError; // Possible AbstractLevelDOWN#status values:\n//  - 'new'     - newly created, not opened or closed\n//  - 'opening' - waiting for the database to be opened, post open()\n//  - 'open'    - successfully opened the database, available for use\n//  - 'closing' - waiting for the database to be closed, post close()\n//  - 'closed'  - database has been successfully closed, should not be\n//                 used except for another open() operation\n\nfunction LevelUP(db, options, callback) {\n  if (!(this instanceof LevelUP)) {\n    return new LevelUP(db, options, callback);\n  }\n\n  var error;\n  EventEmitter.call(this);\n  this.setMaxListeners(Infinity);\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  if (!db || typeof db !== 'object') {\n    error = new InitializationError('First argument must be an abstract-leveldown compliant store');\n\n    if (typeof callback === 'function') {\n      return process.nextTick(callback, error);\n    }\n\n    throw error;\n  }\n\n  assert.equal(typeof db.status, 'string', '.status required, old abstract-leveldown');\n  this.options = getOptions(options);\n  this._db = db;\n  this.db = new DeferredLevelDOWN(db);\n  this.open(callback);\n}\n\nLevelUP.prototype.emit = EventEmitter.prototype.emit;\nLevelUP.prototype.once = EventEmitter.prototype.once;\ninherits(LevelUP, EventEmitter);\n\nLevelUP.prototype.open = function (callback) {\n  var self = this;\n  var promise;\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (this.isOpen()) {\n    process.nextTick(callback, null, self);\n    return promise;\n  }\n\n  if (this._isOpening()) {\n    this.once('open', function () {\n      callback(null, self);\n    });\n    return promise;\n  }\n\n  this.emit('opening');\n  this.db.open(this.options, function (err) {\n    if (err) {\n      return callback(new OpenError(err));\n    }\n\n    self.db = self._db;\n    callback(null, self);\n    self.emit('open');\n    self.emit('ready');\n  });\n  return promise;\n};\n\nLevelUP.prototype.close = function (callback) {\n  var self = this;\n  var promise;\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (this.isOpen()) {\n    this.db.close(function () {\n      self.emit('closed');\n      callback.apply(null, arguments);\n    });\n    this.emit('closing');\n    this.db = new DeferredLevelDOWN(this._db);\n  } else if (this.isClosed()) {\n    process.nextTick(callback);\n  } else if (this.db.status === 'closing') {\n    this.once('closed', callback);\n  } else if (this._isOpening()) {\n    this.once('open', function () {\n      self.close(callback);\n    });\n  }\n\n  return promise;\n};\n\nLevelUP.prototype.isOpen = function () {\n  return this.db.status === 'open';\n};\n\nLevelUP.prototype._isOpening = function () {\n  return this.db.status === 'opening';\n};\n\nLevelUP.prototype.isClosed = function () {\n  return /^clos|new/.test(this.db.status);\n};\n\nLevelUP.prototype.get = function (key, options, callback) {\n  if (key === null || key === undefined) {\n    throw new ReadError('get() requires a key argument');\n  }\n\n  var promise;\n  callback = getCallback(options, callback);\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (maybeError(this, callback)) {\n    return promise;\n  }\n\n  options = getOptions(options);\n  this.db.get(key, options, function (err, value) {\n    if (err) {\n      if (/notfound/i.test(err) || err.notFound) {\n        err = new NotFoundError('Key not found in database [' + key + ']', err);\n      } else {\n        err = new ReadError(err);\n      }\n\n      return callback(err);\n    }\n\n    callback(null, value);\n  });\n  return promise;\n};\n\nLevelUP.prototype.put = function (key, value, options, callback) {\n  if (key === null || key === undefined) {\n    throw new WriteError('put() requires a key argument');\n  }\n\n  var self = this;\n  var promise;\n  callback = getCallback(options, callback);\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (maybeError(this, callback)) {\n    return promise;\n  }\n\n  options = getOptions(options);\n  this.db.put(key, value, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err));\n    }\n\n    self.emit('put', key, value);\n    callback();\n  });\n  return promise;\n};\n\nLevelUP.prototype.del = function (key, options, callback) {\n  if (key === null || key === undefined) {\n    throw new WriteError('del() requires a key argument');\n  }\n\n  var self = this;\n  var promise;\n  callback = getCallback(options, callback);\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (maybeError(this, callback)) {\n    return promise;\n  }\n\n  options = getOptions(options);\n  this.db.del(key, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err));\n    }\n\n    self.emit('del', key);\n    callback();\n  });\n  return promise;\n};\n\nLevelUP.prototype.batch = function (arr, options, callback) {\n  if (!arguments.length) {\n    return new Batch(this);\n  }\n\n  if (!Array.isArray(arr)) {\n    throw new WriteError('batch() requires an array argument');\n  }\n\n  var self = this;\n  var promise;\n  callback = getCallback(options, callback);\n\n  if (!callback) {\n    callback = promisify();\n    promise = callback.promise;\n  }\n\n  if (maybeError(this, callback)) {\n    return promise;\n  }\n\n  options = getOptions(options);\n  arr = arr.map(function (op) {\n    if (!op.type && op.key !== undefined && op.value !== undefined) {\n      op.type = 'put';\n    }\n\n    return op;\n  });\n  this.db.batch(arr, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err));\n    }\n\n    self.emit('batch', arr);\n    callback();\n  });\n  return promise;\n};\n\nLevelUP.prototype.readStream = LevelUP.prototype.createReadStream = function (options) {\n  options = extend({\n    keys: true,\n    values: true\n  }, options);\n\n  if (typeof options.limit !== 'number') {\n    options.limit = -1;\n  }\n\n  return new IteratorStream(this.db.iterator(options), options);\n};\n\nLevelUP.prototype.keyStream = LevelUP.prototype.createKeyStream = function (options) {\n  return this.createReadStream(extend(options, {\n    keys: true,\n    values: false\n  }));\n};\n\nLevelUP.prototype.valueStream = LevelUP.prototype.createValueStream = function (options) {\n  return this.createReadStream(extend(options, {\n    keys: false,\n    values: true\n  }));\n};\n\nLevelUP.prototype.toString = function () {\n  return 'LevelUP';\n};\n\nfunction getCallback(options, callback) {\n  return typeof options === 'function' ? options : callback;\n}\n\nfunction getOptions(options) {\n  return typeof options === 'object' && options !== null ? options : {};\n}\n\nfunction maybeError(db, callback) {\n  if (!db._isOpening() && !db.isOpen()) {\n    process.nextTick(callback, new ReadError('Database is not open'));\n    return true;\n  }\n}\n\nLevelUP.errors = errors;\nmodule.exports = LevelUP.default = LevelUP;","map":null,"metadata":{},"sourceType":"script"}