{"ast":null,"code":"'use strict';\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\nvar errors = __importStar(require(\"../errors\")); // The English language word list.\n// For additional word lists, please see /src.tc/wordlists/\n\n\nvar lang_en_1 = require(\"../wordlists/lang-en\"); // Automatically register English?\n//import { register } from '../wordlists/wordlist';\n//register(langEn);\n\n\nvar bytes_1 = require(\"./bytes\");\n\nvar bignumber_1 = require(\"./bignumber\");\n\nvar utf8_1 = require(\"./utf8\");\n\nvar pbkdf2_1 = require(\"./pbkdf2\");\n\nvar hmac_1 = require(\"./hmac\");\n\nvar properties_1 = require(\"./properties\");\n\nvar secp256k1_1 = require(\"./secp256k1\");\n\nvar sha2_1 = require(\"./sha2\");\n\nvar N = bignumber_1.bigNumberify(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\nvar MasterSecret = utf8_1.toUtf8Bytes('Bitcoin seed');\nvar HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n} // Returns a byte with the LSB bits set\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\n\nvar _constructorGuard = {};\nexports.defaultPath = \"m/44'/60'/0'/0/0\";\n\nvar HDNode =\n/** @class */\nfunction () {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  function HDNode(constructorGuard, privateKey, chainCode, index, depth, mnemonic, path) {\n    errors.checkNew(this, HDNode);\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error('HDNode constructor cannot be called directly');\n    }\n\n    properties_1.defineReadOnly(this, 'keyPair', new secp256k1_1.KeyPair(privateKey));\n    properties_1.defineReadOnly(this, 'privateKey', this.keyPair.privateKey);\n    properties_1.defineReadOnly(this, 'publicKey', this.keyPair.compressedPublicKey);\n    properties_1.defineReadOnly(this, 'address', secp256k1_1.computeAddress(this.publicKey));\n    properties_1.defineReadOnly(this, 'chainCode', bytes_1.hexlify(chainCode));\n    properties_1.defineReadOnly(this, 'index', index);\n    properties_1.defineReadOnly(this, 'depth', depth);\n    properties_1.defineReadOnly(this, 'mnemonic', mnemonic);\n    properties_1.defineReadOnly(this, 'path', path);\n    properties_1.setType(this, 'HDNode');\n  }\n\n  HDNode.prototype._derive = function (index) {\n    // Public parent key -> public child key\n    if (!this.privateKey) {\n      if (index >= HardenedBit) {\n        throw new Error('cannot derive child of neutered node');\n      }\n\n      throw new Error('not implemented');\n    }\n\n    var data = new Uint8Array(37); // Base path\n\n    var mnemonic = this.mnemonic;\n    var path = this.path;\n\n    if (path) {\n      path += '/' + (index & ~HardenedBit);\n    }\n\n    if (index & HardenedBit) {\n      // Data = 0x00 || ser_256(k_par)\n      data.set(bytes_1.arrayify(this.privateKey), 1); // Hardened path\n\n      if (path) {\n        path += \"'\";\n      }\n    } else {\n      // Data = ser_p(point(k_par))\n      data.set(this.keyPair.publicKeyBytes);\n    } // Data += ser_32(i)\n\n\n    for (var i = 24; i >= 0; i -= 8) {\n      data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n    }\n\n    var I = hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, this.chainCode, data);\n    var IL = bignumber_1.bigNumberify(I.slice(0, 32));\n    var IR = I.slice(32);\n    var ki = IL.add(this.keyPair.privateKey).mod(N);\n    return new HDNode(_constructorGuard, bytes_1.arrayify(ki), IR, index, this.depth + 1, mnemonic, path);\n  };\n\n  HDNode.prototype.derivePath = function (path) {\n    var components = path.split('/');\n\n    if (components.length === 0 || components[0] === 'm' && this.depth !== 0) {\n      throw new Error('invalid path');\n    }\n\n    if (components[0] === 'm') {\n      components.shift();\n    }\n\n    var result = this;\n\n    for (var i = 0; i < components.length; i++) {\n      var component = components[i];\n\n      if (component.match(/^[0-9]+'$/)) {\n        var index = parseInt(component.substring(0, component.length - 1));\n\n        if (index >= HardenedBit) {\n          throw new Error('invalid path index - ' + component);\n        }\n\n        result = result._derive(HardenedBit + index);\n      } else if (component.match(/^[0-9]+$/)) {\n        var index = parseInt(component);\n\n        if (index >= HardenedBit) {\n          throw new Error('invalid path index - ' + component);\n        }\n\n        result = result._derive(index);\n      } else {\n        throw new Error('invlaid path component - ' + component);\n      }\n    }\n\n    return result;\n  };\n\n  HDNode.isHDNode = function (value) {\n    return properties_1.isType(value, 'HDNode');\n  };\n\n  return HDNode;\n}();\n\nexports.HDNode = HDNode;\n\nfunction _fromSeed(seed, mnemonic) {\n  var seedArray = bytes_1.arrayify(seed);\n\n  if (seedArray.length < 16 || seedArray.length > 64) {\n    throw new Error('invalid seed');\n  }\n\n  var I = bytes_1.arrayify(hmac_1.computeHmac(hmac_1.SupportedAlgorithms.sha512, MasterSecret, seedArray));\n  return new HDNode(_constructorGuard, I.slice(0, 32), I.slice(32), 0, 0, mnemonic, 'm');\n}\n\nfunction fromMnemonic(mnemonic, wordlist) {\n  // Check that the checksum s valid (will throw an error)\n  mnemonicToEntropy(mnemonic, wordlist);\n  return _fromSeed(mnemonicToSeed(mnemonic), mnemonic);\n}\n\nexports.fromMnemonic = fromMnemonic;\n\nfunction fromSeed(seed) {\n  return _fromSeed(seed, null);\n}\n\nexports.fromSeed = fromSeed;\n\nfunction mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = '';\n  }\n\n  var salt = utf8_1.toUtf8Bytes('mnemonic' + password, utf8_1.UnicodeNormalizationForm.NFKD);\n  return bytes_1.hexlify(pbkdf2_1.pbkdf2(utf8_1.toUtf8Bytes(mnemonic, utf8_1.UnicodeNormalizationForm.NFKD), salt, 2048, 64, 'sha512'));\n}\n\nexports.mnemonicToSeed = mnemonicToSeed;\n\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n  if (!wordlist) {\n    wordlist = lang_en_1.langEn;\n  }\n\n  errors.checkNormalize();\n  var words = wordlist.split(mnemonic);\n\n  if (words.length % 3 !== 0) {\n    throw new Error('invalid mnemonic');\n  }\n\n  var entropy = bytes_1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  var offset = 0;\n\n  for (var i = 0; i < words.length; i++) {\n    var index = wordlist.getWordIndex(words[i].normalize('NFKD'));\n\n    if (index === -1) {\n      throw new Error('invalid mnemonic');\n    }\n\n    for (var bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n\n      offset++;\n    }\n  }\n\n  var entropyBits = 32 * words.length / 3;\n  var checksumBits = words.length / 3;\n  var checksumMask = getUpperMask(checksumBits);\n  var checksum = bytes_1.arrayify(sha2_1.sha256(entropy.slice(0, entropyBits / 8)))[0];\n  checksum &= checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error('invalid checksum');\n  }\n\n  return bytes_1.hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexports.mnemonicToEntropy = mnemonicToEntropy;\n\nfunction entropyToMnemonic(entropy, wordlist) {\n  entropy = bytes_1.arrayify(entropy);\n\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error('invalid entropy');\n  }\n\n  var indices = [0];\n  var remainingBits = 11;\n\n  for (var i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8; // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  } // Compute the checksum bits\n\n\n  var checksum = bytes_1.arrayify(sha2_1.sha256(entropy))[0];\n  var checksumBits = entropy.length / 4;\n  checksum &= getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n\n  if (!wordlist) {\n    wordlist = lang_en_1.langEn;\n  }\n\n  return wordlist.join(indices.map(function (index) {\n    return wordlist.getWord(index);\n  }));\n}\n\nexports.entropyToMnemonic = entropyToMnemonic;\n\nfunction isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\n\nexports.isValidMnemonic = isValidMnemonic;","map":null,"metadata":{},"sourceType":"script"}