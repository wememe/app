{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar pull = require('pull-stream/pull');\n\nvar empty = require('pull-stream/sources/empty');\n\nvar handshake = require('pull-handshake');\n\nvar constants = require('./constants');\n\nvar util = require('./util');\n\nvar rnd = util.rnd;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\nvar PROTOCOL = constants.PROTOCOL;\nvar PING_LENGTH = constants.PING_LENGTH;\n\nvar Ping =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(Ping, _EventEmitter);\n\n  function Ping(swarm, peer) {\n    var _this;\n\n    _classCallCheck(this, Ping);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ping).call(this));\n    _this._stopped = false;\n    _this.peer = peer;\n    _this.swarm = swarm;\n    return _this;\n  }\n\n  _createClass(Ping, [{\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      log('dialing %s to %s', PROTOCOL, this.peer.id.toB58String());\n      this.swarm.dial(this.peer, PROTOCOL, function (err, conn) {\n        if (err) {\n          return _this2.emit('error', err);\n        }\n\n        var stream = handshake({\n          timeout: 0\n        });\n        _this2.shake = stream.handshake;\n        pull(stream, conn, stream); // write and wait to see ping back\n\n        var self = _this2;\n\n        function next() {\n          var start = new Date();\n          var buf = rnd(PING_LENGTH);\n          self.shake.write(buf);\n          self.shake.read(PING_LENGTH, function (err, bufBack) {\n            var end = new Date();\n\n            if (err || !buf.equals(bufBack)) {\n              var _err = new Error('Received wrong ping ack');\n\n              return self.emit('error', _err);\n            }\n\n            self.emit('ping', end - start);\n\n            if (self._stopped) {\n              return;\n            }\n\n            next();\n          });\n        }\n\n        next();\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._stopped || !this.shake) {\n        return;\n      }\n\n      this._stopped = true;\n      pull(empty(), this.shake.rest());\n    }\n  }]);\n\n  return Ping;\n}(EventEmitter);\n\nmodule.exports = Ping;","map":null,"metadata":{},"sourceType":"script"}