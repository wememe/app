{"ast":null,"code":"'use strict';\n\nvar Joi = require('joi');\n\nvar ModuleSchema = Joi.alternatives().try(Joi.func(), Joi.object());\nvar OptionsSchema = Joi.object({\n  // TODO: create proper validators for the generics\n  connectionManager: Joi.object(),\n  peerInfo: Joi.object().required(),\n  peerBook: Joi.object(),\n  modules: Joi.object().keys({\n    transport: Joi.array().items(ModuleSchema).min(1).required(),\n    streamMuxer: Joi.array().items(ModuleSchema).allow(null),\n    connEncryption: Joi.array().items(ModuleSchema).allow(null),\n    connProtector: Joi.object().keys({\n      protect: Joi.func().required()\n    }).unknown(),\n    peerDiscovery: Joi.array().items(ModuleSchema).allow(null),\n    dht: ModuleSchema.allow(null)\n  }).required(),\n  config: Joi.object().keys({\n    peerDiscovery: Joi.object().allow(null),\n    relay: Joi.object().keys({\n      enabled: Joi.boolean().default(false),\n      hop: Joi.object().keys({\n        enabled: Joi.boolean().default(false),\n        active: Joi.boolean().default(false)\n      })\n    }).default(),\n    dht: Joi.object().keys({\n      kBucketSize: Joi.number().allow(null)\n    }),\n    EXPERIMENTAL: Joi.object().keys({\n      dht: Joi.boolean().default(false),\n      pubsub: Joi.boolean().default(false)\n    }).default()\n  }).default()\n});\n\nmodule.exports.validate = function (options) {\n  options = Joi.attempt(options, OptionsSchema); // Ensure dht is correct\n\n  if (options.config.EXPERIMENTAL.dht) {\n    Joi.assert(options.modules.dht, ModuleSchema.required());\n  }\n\n  return options;\n};","map":null,"metadata":{},"sourceType":"script"}