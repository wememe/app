{"ast":null,"code":"/* Copyright (c) 2013 Rod Vagg, MIT License */\nfunction AbstractIterator(db) {\n  this.db = db;\n  this._ended = false;\n  this._nexting = false;\n}\n\nAbstractIterator.prototype.next = function (callback) {\n  var self = this;\n  if (typeof callback != 'function') throw new Error('next() requires a callback argument');\n  if (self._ended) return callback(new Error('cannot call next() after end()'));\n  if (self._nexting) return callback(new Error('cannot call next() before previous next() has completed'));\n  self._nexting = true;\n\n  if (typeof self._next == 'function') {\n    return self._next(function () {\n      self._nexting = false;\n      callback.apply(null, arguments);\n    });\n  }\n\n  process.nextTick(function () {\n    self._nexting = false;\n    callback();\n  });\n};\n\nAbstractIterator.prototype.end = function (callback) {\n  if (typeof callback != 'function') throw new Error('end() requires a callback argument');\n  if (this._ended) return callback(new Error('end() already called on iterator'));\n  this._ended = true;\n  if (typeof this._end == 'function') return this._end(callback);\n  process.nextTick(callback);\n};\n\nmodule.exports = AbstractIterator;","map":null,"metadata":{},"sourceType":"script"}