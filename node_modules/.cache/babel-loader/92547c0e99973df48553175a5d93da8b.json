{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require('path');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('cache', {\n  color: Logger.Colors.Magenta\n});\nLogger.setLogLevel('ERROR');\nvar caches = {};\n\nvar Cache =\n/*#__PURE__*/\nfunction () {\n  function Cache(storage, directory) {\n    _classCallCheck(this, Cache);\n\n    this.path = directory || './orbitdb';\n    this._storage = storage;\n    this._store = null;\n  } // Setup storage backend\n\n\n  _createClass(Cache, [{\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logger.debug('open', this.path);\n\n                if (!this.store) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.resolve());\n\n              case 3:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var store = _this._storage(_this.path);\n\n                  store.open(function (err) {\n                    if (err) {\n                      return reject(err);\n                    }\n\n                    _this._store = store;\n                    resolve();\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.debug('close', this.path);\n\n                if (this._store) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 3:\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  _this2._store.close(function (err) {\n                    if (err) {\n                      return reject(err);\n                    }\n\n                    _this2._store = null;\n                    delete caches[_this2.path];\n                    resolve();\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger.debug('destroy', this.path);\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this3._storage.destroy(_this3.path, function (err) {\n                    if (err) {\n                      return reject(err);\n                    }\n\n                    resolve();\n                  });\n                }));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n\n      return destroy;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(key) {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._store) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.open();\n\n              case 3:\n                if (!(this._store.status && this._store.status !== 'open')) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", Promise.resolve(null));\n\n              case 5:\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this4._store.get(key, function (err, value) {\n                    if (err) {\n                      // Ignore error if key was not found\n                      if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) return reject(err);\n                    }\n\n                    resolve(value ? JSON.parse(value) : null);\n                  });\n                }));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }() // Set value in the cache and return the new value\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(key, value) {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._store) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.open();\n\n              case 3:\n                if (!(this._store.status && this._store.status !== 'open')) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.resolve());\n\n              case 5:\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this5._store.put(key, JSON.stringify(value), function (err) {\n                    if (err) {\n                      // Ignore error if key was not found\n                      if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) return reject(err);\n                    }\n\n                    resolve();\n                  });\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function set(_x2, _x3) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }() // Remove a value and key from the cache\n\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(key) {\n        var _this6 = this;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this._store) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this.open();\n\n              case 3:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this6._store.del(key, function (err) {\n                    if (err) {\n                      // Ignore error if key was not found\n                      if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) return reject(err);\n                    }\n\n                    resolve();\n                  });\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function del(_x4) {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }()\n  }]);\n\n  return Cache;\n}();\n\nmodule.exports = function (storage, mkdir) {\n  return {\n    load: function () {\n      var _load = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(directory, dbAddress) {\n        var dbPath, dataPath, cache;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                logger.debug('load, database:', dbAddress.toString());\n                dbPath = path.join(dbAddress.root, dbAddress.path);\n                dataPath = path.join(directory, dbPath);\n                cache = caches[dataPath];\n\n                if (cache) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                if (mkdir && mkdir.sync) mkdir.sync(dataPath);\n                cache = new Cache(storage, dataPath);\n                _context7.next = 9;\n                return cache.open();\n\n              case 9:\n                caches[dataPath] = cache;\n\n              case 10:\n                return _context7.abrupt(\"return\", cache);\n\n              case 11:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function load(_x5, _x6) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }(),\n    close: function () {\n      var _close2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                logger.debug('close all');\n                _context8.next = 3;\n                return Promise.all(Object.values(caches), function (cache) {\n                  return cache.close();\n                });\n\n              case 3:\n                caches = {};\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function close() {\n        return _close2.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}