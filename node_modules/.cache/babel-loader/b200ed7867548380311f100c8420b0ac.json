{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar get = require('lodash/get');\n\nvar defaultsDeep = require('@nodeutils/defaults-deep');\n\nmodule.exports = function libp2p(self) {\n  return {\n    start: promisify(function (callback) {\n      self.config.get(gotConfig);\n\n      function gotConfig(err, config) {\n        if (err) {\n          return callback(err);\n        }\n\n        var defaultBundle = function defaultBundle(opts) {\n          var libp2pDefaults = {\n            peerInfo: opts.peerInfo,\n            peerBook: opts.peerBook,\n            config: {\n              peerDiscovery: {\n                mdns: {\n                  enabled: get(opts.options, 'config.Discovery.MDNS.Enabled', get(opts.config, 'Discovery.MDNS.Enabled', true))\n                },\n                webRTCStar: {\n                  enabled: get(opts.options, 'config.Discovery.webRTCStar.Enabled', get(opts.config, 'Discovery.webRTCStar.Enabled', true))\n                },\n                bootstrap: {\n                  list: get(opts.options, 'config.Bootstrap', get(opts.config, 'Bootstrap', []))\n                }\n              },\n              relay: {\n                enabled: get(opts.options, 'relay.enabled', get(opts.config, 'relay.enabled', false)),\n                hop: {\n                  enabled: get(opts.options, 'relay.hop.enabled', get(opts.config, 'relay.hop.enabled', false)),\n                  active: get(opts.options, 'relay.hop.active', get(opts.config, 'relay.hop.active', false))\n                }\n              },\n              EXPERIMENTAL: {\n                dht: get(opts.options, 'EXPERIMENTAL.dht', false),\n                pubsub: get(opts.options, 'EXPERIMENTAL.pubsub', false)\n              }\n            },\n            connectionManager: get(opts.options, 'connectionManager', get(opts.config, 'connectionManager', {}))\n          };\n          var libp2pOptions = defaultsDeep(get(self._options, 'libp2p', {}), libp2pDefaults); // Required inline to reduce startup time\n          // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n\n          var Node = require('../runtime/libp2p-nodejs');\n\n          return new Node(libp2pOptions);\n        }; // Always create libp2p via a bundle function\n\n\n        var libp2pBundle = get(self._options, 'libp2p', null);\n\n        if (typeof libp2pBundle !== 'function') {\n          libp2pBundle = defaultBundle;\n        }\n\n        self._libp2pNode = libp2pBundle({\n          options: self._options,\n          config: config,\n          peerInfo: self._peerInfo,\n          peerBook: self._peerInfoBook\n        });\n\n        self._libp2pNode.on('peer:discovery', function (peerInfo) {\n          var dial = function dial() {\n            self._peerInfoBook.put(peerInfo);\n\n            self._libp2pNode.dial(peerInfo, function () {});\n          };\n\n          if (self.isOnline()) {\n            dial();\n          } else {\n            self._libp2pNode.once('start', dial);\n          }\n        });\n\n        self._libp2pNode.on('peer:connect', function (peerInfo) {\n          self._peerInfoBook.put(peerInfo);\n        });\n\n        self._libp2pNode.start(function (err) {\n          if (err) {\n            return callback(err);\n          }\n\n          self._libp2pNode.peerInfo.multiaddrs.forEach(function (ma) {\n            console.log('Swarm listening on', ma.toString());\n          });\n\n          callback();\n        });\n      }\n    }),\n    stop: promisify(function (callback) {\n      self._libp2pNode.stop(callback);\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}