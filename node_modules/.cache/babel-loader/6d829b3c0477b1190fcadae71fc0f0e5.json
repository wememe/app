{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Channel = require('ipfs-pubsub-1on1');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create(\"exchange-heads\", {\n  color: Logger.Colors.Yellow\n});\nLogger.setLogLevel('ERROR');\n\nvar getHeadsForDatabase = function getHeadsForDatabase(store) {\n  return store && store._oplog ? store._oplog.heads : [];\n};\n\nvar exchangeHeads =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated) {\n    var _handleMessage, channel, heads;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _handleMessage = function _handleMessage(message) {\n              var msg = JSON.parse(message.data);\n              var address = msg.address,\n                  heads = msg.heads;\n              onMessage(address, heads);\n            };\n\n            channel = getDirectConnection(peer);\n\n            if (channel) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.prev = 3;\n            logger.debug(\"Create a channel to \".concat(peer));\n            _context.next = 7;\n            return Channel.open(ipfs, peer);\n\n          case 7:\n            channel = _context.sent;\n            channel.on('message', _handleMessage);\n            logger.debug(\"Channel created to \".concat(peer));\n            onChannelCreated(channel);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](3);\n            logger.error(_context.t0);\n\n          case 16:\n            _context.next = 18;\n            return channel.connect();\n\n          case 18:\n            logger.debug(\"Connected to \".concat(peer)); // Send the heads if we have any\n\n            heads = getHeadsForDatabase(getStore(address));\n            logger.debug(\"Send latest heads of '\".concat(address, \"':\\n\"), JSON.stringify(heads.map(function (e) {\n              return e.hash;\n            }), null, 2));\n\n            if (!heads) {\n              _context.next = 24;\n              break;\n            }\n\n            _context.next = 24;\n            return channel.send(JSON.stringify({\n              address: address,\n              heads: heads\n            }));\n\n          case 24:\n            return _context.abrupt(\"return\", channel);\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[3, 13]]);\n  }));\n\n  return function exchangeHeads(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = exchangeHeads;","map":null,"metadata":{},"sourceType":"script"}