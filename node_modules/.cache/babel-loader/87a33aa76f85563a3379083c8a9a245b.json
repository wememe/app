{"ast":null,"code":"'use strict';\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar fetchMuPortDoc = function () {\n  var _ref2 = (0, _asyncToGenerator3.default)(\n  /*#__PURE__*/\n  _regenerator2.default.mark(function _callee2(ipfsHash, ipfsConf) {\n    var doc;\n    return _regenerator2.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            doc = void 0;\n            _context2.prev = 1;\n            _context2.next = 4;\n            return (0, _lookup.ipfsLookup)(ipfsHash, ipfsConf);\n\n          case 4:\n            doc = _context2.sent;\n            _context2.next = 9;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2['catch'](1);\n\n          case 9:\n            if (!(!doc || !doc.signingKey)) {\n              _context2.next = 11;\n              break;\n            }\n\n            throw new Error('Invalid muport did');\n\n          case 11:\n            return _context2.abrupt('return', doc);\n\n          case 12:\n          case 'end':\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this, [[1, 7]]);\n  }));\n\n  return function fetchMuPortDoc(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _didResolver = require('did-resolver');\n\nvar _lookup = require('./lookup');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction register() {\n  var resolve = function () {\n    var _ref = (0, _asyncToGenerator3.default)(\n    /*#__PURE__*/\n    _regenerator2.default.mark(function _callee(did, parsed) {\n      var doc, newHash;\n      return _regenerator2.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetchMuPortDoc(parsed.id, opts.ipfsConf);\n\n            case 2:\n              doc = _context.sent;\n              _context.next = 5;\n              return (0, _lookup.ethrLookup)(doc.managementKey, opts.rpcProviderUrl);\n\n            case 5:\n              newHash = _context.sent;\n\n              if (!newHash) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 9;\n              return fetchMuPortDoc(newHash, opts.ipfsConf);\n\n            case 9:\n              doc = _context.sent;\n\n            case 10:\n              return _context.abrupt('return', wrapDocument(did, doc));\n\n            case 11:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function resolve(_x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  (0, _didResolver.registerMethod)('muport', resolve);\n}\n\nfunction wrapDocument(did, muportDocument) {\n  if (muportDocument.version !== 1) throw new Error('Unsupported muportDocument version');\n  var doc = {\n    \"@context\": \"https://w3id.org/did/v1\",\n    \"id\": did,\n    \"publicKey\": [{\n      \"id\": did + \"#signingKey\",\n      \"type\": \"Secp256k1VerificationKey2018\",\n      \"owner\": did,\n      \"publicKeyHex\": muportDocument.signingKey\n    }, {\n      \"id\": did + \"#managementKey\",\n      \"type\": \"Secp256k1VerificationKey2018\",\n      \"owner\": did\n    }, {\n      \"id\": did + \"#encryptionKey\",\n      \"type\": \"Curve25519EncryptionPublicKey\",\n      \"owner\": did,\n      \"publicKeyBase64\": muportDocument.asymEncryptionKey\n    }],\n    \"authentication\": [{\n      \"type\": \"Secp256k1SignatureAuthentication2018\",\n      \"publicKey\": did + \"#signingKey\"\n    }],\n    \"muportData\": {}\n  };\n\n  if (muportDocument.managementKey.length === 42) {\n    doc.publicKey[1].ethereumAddress = muportDocument.managementKey;\n  } else {\n    doc.publicKey[1].publicKeyHex = muportDocument.managementKey;\n  }\n\n  if (muportDocument.publicProfile) doc.uportProfile = muportDocument.publicProfile;\n  if (muportDocument.symEncryptedData) doc.muportData.symEncryptedData = muportDocument.symEncryptedData;\n  if (muportDocument.recoveryNetwork) doc.muportData.recoveryNetwork = muportDocument.recoveryNetwork;\n  return doc;\n}\n\nmodule.exports = register;","map":null,"metadata":{},"sourceType":"script"}