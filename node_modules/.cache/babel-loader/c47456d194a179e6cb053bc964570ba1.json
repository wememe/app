{"ast":null,"code":"'use strict';\n\nvar mortice = require('mortice');\n\nvar log = require('debug')('ipfs:mfs:lock');\n\nvar lock;\n\nmodule.exports = function (repoOwner) {\n  if (lock) {\n    return lock;\n  }\n\n  var mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n\n  var performOperation = function performOperation(type, func, args, callback) {\n    log(\"Queuing \".concat(type, \" operation\"));\n    mutex[\"\".concat(type, \"Lock\")](function () {\n      return new Promise(function (resolve, reject) {\n        args.push(function (error, result) {\n          log(\"\".concat(type.substring(0, 1).toUpperCase()).concat(type.substring(1), \" operation callback invoked\").concat(error ? ' with error: ' + error.message : ''));\n\n          if (error) {\n            return reject(error);\n          }\n\n          resolve(result);\n        });\n        log(\"Starting \".concat(type, \" operation\"));\n        func.apply(null, args);\n      });\n    }).then(function (result) {\n      log(\"Finished \".concat(type, \" operation\"));\n      var cb = callback;\n      callback = null;\n      cb(null, result);\n    }).catch(function (error) {\n      log(\"Finished \".concat(type, \" operation with error: \").concat(error.message));\n\n      if (callback) {\n        return callback(error);\n      }\n\n      log(\"Callback already invoked for \".concat(type, \" operation\"));\n      throw error;\n    });\n  };\n\n  lock = {\n    readLock: function readLock(func) {\n      return function () {\n        var args = Array.from(arguments);\n        var callback = args.pop();\n        performOperation('read', func, args, callback);\n      };\n    },\n    writeLock: function writeLock(func) {\n      return function () {\n        var args = Array.from(arguments);\n        var callback = args.pop();\n        performOperation('write', func, args, callback);\n      };\n    }\n  };\n  return lock;\n};","map":null,"metadata":{},"sourceType":"script"}