{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar sort = require('lodash.sortby');\n\nvar Entry = require('./entry');\n\nvar Wantlist =\n/*#__PURE__*/\nfunction () {\n  function Wantlist(stats) {\n    _classCallCheck(this, Wantlist);\n\n    this.set = new Map();\n    this._stats = stats;\n  }\n\n  _createClass(Wantlist, [{\n    key: \"add\",\n    value: function add(cid, priority) {\n      var cidStr = cid.buffer.toString();\n      var entry = this.set.get(cidStr);\n\n      if (entry) {\n        entry.inc();\n        entry.priority = priority;\n      } else {\n        this.set.set(cidStr, new Entry(cid, priority));\n\n        if (this._stats) {\n          this._stats.push(null, 'wantListSize', 1);\n        }\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(cid) {\n      var cidStr = cid.buffer.toString();\n      var entry = this.set.get(cidStr);\n\n      if (!entry) {\n        return;\n      }\n\n      entry.dec(); // only delete when no refs are held\n\n      if (entry.hasRefs()) {\n        return;\n      }\n\n      this.set.delete(cidStr);\n\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', -1);\n      }\n    }\n  }, {\n    key: \"removeForce\",\n    value: function removeForce(cidStr) {\n      if (this.set.has(cidStr)) {\n        this.set.delete(cidStr);\n      }\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      return this.set.forEach(fn);\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this.set.entries();\n    }\n  }, {\n    key: \"sortedEntries\",\n    value: function sortedEntries() {\n      return new Map(sort(Array.from(this.set.entries()), function (o) {\n        return o[1].key;\n      }));\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(cid) {\n      var cidStr = cid.buffer.toString();\n      return this.set.get(cidStr);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.set.size;\n    }\n  }]);\n\n  return Wantlist;\n}();\n\nWantlist.Entry = Entry;\nmodule.exports = Wantlist;","map":null,"metadata":{},"sourceType":"script"}