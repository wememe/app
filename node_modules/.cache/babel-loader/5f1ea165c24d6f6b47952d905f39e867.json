{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\n\nvar Keystore =\n/*#__PURE__*/\nfunction () {\n  function Keystore(storage) {\n    _classCallCheck(this, Keystore);\n\n    this._storage = storage;\n  }\n\n  _createClass(Keystore, [{\n    key: \"createKey\",\n    value: function createKey(id) {\n      var key = ec.genKeyPair();\n      var publicKey = key.getPublic('hex');\n      var privateKey = key.getPrivate('hex');\n\n      this._storage.setItem(id, JSON.stringify({\n        publicKey: publicKey,\n        privateKey: privateKey\n      }));\n\n      return key;\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(id) {\n      var key = JSON.parse(this._storage.getItem(id));\n      if (!key) return;\n      var k = ec.keyPair({\n        pub: key.publicKey,\n        priv: key.privateKey,\n        privEnc: 'hex',\n        pubEnc: 'hex'\n      });\n      return k;\n    }\n  }, {\n    key: \"generateKey\",\n    value: function generateKey() {\n      return Promise.resolve(ec.genKeyPair());\n    }\n  }, {\n    key: \"exportPublicKey\",\n    value: function exportPublicKey(key) {\n      return Promise.resolve(key.getPublic('hex'));\n    }\n  }, {\n    key: \"exportPrivateKey\",\n    value: function exportPrivateKey(key) {\n      return Promise.resolve(key.getPrivate('hex'));\n    }\n  }, {\n    key: \"importPublicKey\",\n    value: function importPublicKey(key) {\n      return Promise.resolve(ec.keyFromPublic(key, 'hex'));\n    }\n  }, {\n    key: \"importPrivateKey\",\n    value: function importPrivateKey(key) {\n      return Promise.resolve(ec.keyFromPrivate(key, 'hex'));\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(key, data) {\n      var sig = ec.sign(data, key);\n      return Promise.resolve(sig.toDER('hex'));\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(signature, key, data) {\n      var res = false;\n      res = ec.verify(data, signature, key);\n      return Promise.resolve(res);\n    }\n  }]);\n\n  return Keystore;\n}();\n\nmodule.exports = function (LocalStorage, mkdir) {\n  return {\n    create: function create() {\n      var directory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : './keystore';\n      // If we're in Node.js, mkdir module is expected to passed\n      // and we need to make sure the directory exists\n      if (mkdir && mkdir.sync) mkdir.sync(directory); // In Node.js, we use the injected LocalStorage module,\n      // in the browser, we use the browser's localStorage\n\n      var storage = LocalStorage ? new LocalStorage(directory) : localStorage;\n      return new Keystore(storage);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}