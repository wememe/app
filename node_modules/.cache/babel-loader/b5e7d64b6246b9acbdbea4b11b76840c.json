{"ast":null,"code":"'use strict';\n\nvar handshake = require('pull-handshake');\n\nvar lp = require('pull-length-prefixed');\n\nvar Connection = require('interface-connection').Connection;\n\nvar writeEncoded = require('../util.js').writeEncoded;\n\nvar some = require('async/some');\n\nfunction selectHandler(rawConn, handlersMap, log) {\n  var cb = function cb(err) {\n    // incoming errors are irrelevant for the app\n    log.error(err);\n  };\n\n  var stream = handshake({\n    timeout: 60 * 1000\n  }, cb);\n  var shake = stream.handshake;\n  next();\n  return stream;\n\n  function next() {\n    lp.decodeFromReader(shake, function (err, data) {\n      if (err) {\n        return cb(err);\n      }\n\n      log('received:', data.toString());\n      var protocol = data.toString().slice(0, -1);\n      matcher(protocol, handlersMap, function (err, result) {\n        if (err) {\n          return cb(err);\n        }\n\n        var key = result;\n\n        if (key) {\n          log('send ack back of: ' + protocol);\n          writeEncoded(shake, data, cb);\n          var conn = new Connection(shake.rest(), rawConn);\n          handlersMap[key].handlerFunc(protocol, conn);\n        } else {\n          log('not supported protocol: ' + protocol);\n          writeEncoded(shake, Buffer.from('na\\n'));\n          next();\n        }\n      });\n    });\n  }\n}\n\nfunction matcher(protocol, handlers, callback) {\n  var supportedProtocols = Object.keys(handlers);\n  var supportedProtocol = false;\n  some(supportedProtocols, function (sp, cb) {\n    handlers[sp].matchFunc(sp, protocol, function (err, result) {\n      if (err) {\n        return cb(err);\n      }\n\n      if (result) {\n        supportedProtocol = sp;\n      }\n\n      cb();\n    });\n  }, function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, supportedProtocol);\n  });\n}\n\nmodule.exports = selectHandler;","map":null,"metadata":{},"sourceType":"script"}