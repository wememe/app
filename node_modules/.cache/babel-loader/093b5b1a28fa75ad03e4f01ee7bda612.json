{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FeedTileTXS, FeedTileToken, FeedTileInternal, FeedTileActivity } from './FeedTile';\nimport ActivityHeader from './ActivityHeader';\nimport Loading from \"../../assets/Loading.svg\";\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nvar Activity = function Activity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      feedByAddress = _ref.feedByAddress,\n      verifiedGithub = _ref.verifiedGithub,\n      verifiedTwitter = _ref.verifiedTwitter,\n      publicProfileActivity = _ref.publicProfileActivity,\n      currentAddress = _ref.currentAddress,\n      name = _ref.name;\n  return React.createElement(\"div\", {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"header\",\n    id: \"feed__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(\"div\", {\n    className: \"feed__activity__address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, ifFetchingActivity && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Loading,\n    alt: \"loading\",\n    id: \"activityLoad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })), feedByAddress.length > 0 ? feedByAddress.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(ActivityHeader, {\n      feedAddress: feedAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), Object.values(feedAddress)[0].map(function (item, index) {\n      return function () {\n        if (item.dataType === 'Internal') {\n          return React.createElement(FeedTileInternal, {\n            item: item,\n            key: index,\n            metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n            currentAddress: currentAddress,\n            name: name,\n            isEven: parseInt(index, 10) % 2 === 0,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          });\n        }\n\n        if (item.dataType === 'Token') {\n          return React.createElement(FeedTileToken, {\n            item: item,\n            key: index,\n            metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n            currentAddress: currentAddress,\n            name: name,\n            isEven: parseInt(index, 10) % 2 === 0,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56\n            },\n            __self: this\n          });\n        }\n\n        if (item.dataType === 'Txs') {\n          return React.createElement(FeedTileTXS, {\n            item: item,\n            key: index,\n            metaDataName: feedAddress.metaData && feedAddress.metaData.name,\n            currentAddress: currentAddress,\n            name: name,\n            isEven: parseInt(index, 10) % 2 === 0,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          });\n        }\n\n        if (item.dataType === 'Public') {\n          return React.createElement(FeedTileActivity, {\n            item: item,\n            key: index,\n            verifiedGithub: verifiedGithub,\n            verifiedTwitter: verifiedTwitter,\n            isEven: parseInt(index, 10) % 2 === 0,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          });\n        }\n\n        if (item.dataType === 'Private') {\n          return React.createElement(FeedTileActivity, {\n            item: item,\n            key: index,\n            isEven: parseInt(index, 10) % 2 === 0,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            },\n            __self: this\n          });\n        }\n      }();\n    }));\n  }) : !ifFetchingActivity && !publicProfileActivity.length && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"No activity at this address yet\")))), React.createElement(\"div\", {\n    className: \"feed__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"logo__icon--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"3\"))));\n};\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string\n};\nActivity.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {}\n};\n\nvar mapState = function mapState(state) {\n  return {\n    feedByAddress: state.threeBox.feedByAddress,\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    currentAddress: state.threeBox.currentAddress,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    name: state.threeBox.name,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(Activity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/Activity.jsx"],"names":["React","PropTypes","connect","FeedTileTXS","FeedTileToken","FeedTileInternal","FeedTileActivity","ActivityHeader","Activity","ifFetchingActivity","feedByAddress","verifiedGithub","verifiedTwitter","publicProfileActivity","currentAddress","name","Loading","length","map","feedAddress","i","Object","values","item","index","dataType","metaData","parseInt","propTypes","array","bool","string","publicProfileAddress","location","object","publicName","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport {\n  FeedTileTXS,\n  FeedTileToken,\n  FeedTileInternal,\n  FeedTileActivity,\n} from './FeedTile';\nimport ActivityHeader from './ActivityHeader';\nimport Loading from '../../assets/Loading.svg';\nimport '../styles/Feed.css';\nimport '../../views/styles/Profile.css';\nimport '../styles/NetworkArray.css';\n\nconst Activity = ({\n  ifFetchingActivity,\n  feedByAddress,\n  verifiedGithub,\n  verifiedTwitter,\n  publicProfileActivity,\n  currentAddress,\n  name,\n}) => (\n    <div id=\"feed\">\n      <div>\n        <p className=\"header\" id=\"feed__header\">Activity</p>\n        <div className=\"feed__activity__address\">\n          {(ifFetchingActivity)\n            && (\n              <div className=\"feed__activity__load\">\n                <img src={Loading} alt=\"loading\" id=\"activityLoad\" />\n              </div>\n            )}\n          {(feedByAddress.length > 0)\n            ? feedByAddress.map((feedAddress, i) => (\n              <div key={i} className=\"feed__activity__tile\">\n                <ActivityHeader feedAddress={feedAddress} />\n                {\n                  Object.values(feedAddress)[0].map((item, index) => (\n                    (() => {\n                      if (item.dataType === 'Internal') {\n                        return (\n                          <FeedTileInternal\n                            item={item}\n                            key={index}\n                            metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                            currentAddress={currentAddress}\n                            name={name}\n                            isEven={parseInt(index, 10) % 2 === 0} />\n                        );\n                      }\n                      if (item.dataType === 'Token') {\n                        return (\n                          <FeedTileToken\n                            item={item}\n                            key={index}\n                            metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                            currentAddress={currentAddress}\n                            name={name}\n                            isEven={parseInt(index, 10) % 2 === 0}\n                          />);\n                      }\n                      if (item.dataType === 'Txs') {\n                        return (\n                          <FeedTileTXS\n                            item={item}\n                            key={index}\n                            metaDataName={feedAddress.metaData && feedAddress.metaData.name}\n                            currentAddress={currentAddress}\n                            name={name}\n                            isEven={parseInt(index, 10) % 2 === 0}\n                          />);\n                      }\n                      if (item.dataType === 'Public') {\n                        return (\n                          <FeedTileActivity\n                            item={item}\n                            key={index}\n                            verifiedGithub={verifiedGithub}\n                            verifiedTwitter={verifiedTwitter}\n                            isEven={parseInt(index, 10) % 2 === 0}\n                          />);\n                      }\n                      if (item.dataType === 'Private') {\n                        return (\n                          <FeedTileActivity\n                            item={item}\n                            key={index}\n                            isEven={parseInt(index, 10) % 2 === 0}\n                          />);\n                      }\n                    })()\n                  ))\n                }\n              </div>\n            ))\n            : (!ifFetchingActivity && !publicProfileActivity.length)\n            && (\n              <div className=\"feed__activity__load\">\n                <p>No activity at this address yet</p>\n              </div>\n            )\n          }\n        </div>\n      </div>\n      <div className=\"feed__footer\">\n        <div className=\"logo__icon--footer\">\n          <h2>3</h2>\n        </div>\n      </div>\n    </div>\n  );\n\nActivity.propTypes = {\n  feedByAddress: PropTypes.array,\n  ifFetchingActivity: PropTypes.bool,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  currentAddress: PropTypes.string,\n  name: PropTypes.string,\n  publicProfileAddress: PropTypes.string,\n  publicProfileActivity: PropTypes.array,\n  location: PropTypes.object,\n  publicName: PropTypes.string,\n};\n\nActivity.defaultProps = {\n  feedByAddress: [],\n  name: '',\n  ifFetchingActivity: false,\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  publicProfileAddress: '',\n  currentAddress: '',\n  publicName: '',\n  publicProfileActivity: [],\n  location: {},\n};\n\nconst mapState = state => ({\n  feedByAddress: state.threeBox.feedByAddress,\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  verifiedGithub: state.threeBox.verifiedGithub,\n  verifiedTwitter: state.threeBox.verifiedTwitter,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  currentAddress: state.threeBox.currentAddress,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  name: state.threeBox.name,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(Activity);\n"]},"metadata":{},"sourceType":"module"}