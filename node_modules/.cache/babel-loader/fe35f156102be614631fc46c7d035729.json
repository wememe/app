{"ast":null,"code":"/* @flow */\n'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar pull = require('pull-stream');\n/* ::\nimport type {Key, Datastore, Batch, Query, QueryResult, Callback} from 'interface-datastore'\n*/\n\n/**\n * An object with a pair of functions for (invertibly) transforming keys\n */\n\n/* ::\ntype KeyTransform = {\n  convert: KeyMapping,\n  invert: KeyMapping\n}\n*/\n\n/**\n * Map one key onto another key.\n */\n\n/* ::\ntype KeyMapping = (Key) => Key\n*/\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\n\nvar KeyTransformDatastore\n/* :: <Value> */\n=\n/*#__PURE__*/\nfunction () {\n  /* :: child: Datastore<Value> */\n\n  /* :: transform: KeyTransform */\n  function KeyTransformDatastore(child\n  /* : Datastore<Value> */\n  , transform\n  /* : KeyTransform */\n  ) {\n    _classCallCheck(this, KeyTransformDatastore);\n\n    this.child = child;\n    this.transform = transform;\n  }\n\n  _createClass(KeyTransformDatastore, [{\n    key: \"open\",\n    value: function open(callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.open(callback);\n    }\n  }, {\n    key: \"put\",\n    value: function put(key\n    /* : Key */\n    , val\n    /* : Value */\n    , callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.put(this.transform.convert(key), val, callback);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key\n    /* : Key */\n    , callback\n    /* : Callback<Value> */\n    )\n    /* : void */\n    {\n      this.child.get(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key\n    /* : Key */\n    , callback\n    /* : Callback<bool> */\n    )\n    /* : void */\n    {\n      this.child.has(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key\n    /* : Key */\n    , callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.delete(this.transform.convert(key), callback);\n    }\n  }, {\n    key: \"batch\",\n    value: function batch()\n    /* : Batch<Value> */\n    {\n      var _this = this;\n\n      var b = this.child.batch();\n      return {\n        put: function put(key\n        /* : Key */\n        , value\n        /* : Value */\n        )\n        /* : void */\n        {\n          b.put(_this.transform.convert(key), value);\n        },\n        delete: function _delete(key\n        /* : Key */\n        )\n        /* : void */\n        {\n          b.delete(_this.transform.convert(key));\n        },\n        commit: function commit(callback\n        /* : Callback<void> */\n        )\n        /* : void */\n        {\n          b.commit(callback);\n        }\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q\n    /* : Query<Value> */\n    )\n    /* : QueryResult<Value> */\n    {\n      var _this2 = this;\n\n      return pull(this.child.query(q), pull.map(function (e) {\n        e.key = _this2.transform.invert(e.key);\n        return e;\n      }));\n    }\n  }, {\n    key: \"close\",\n    value: function close(callback\n    /* : Callback<void> */\n    )\n    /* : void */\n    {\n      this.child.close(callback);\n    }\n  }]);\n\n  return KeyTransformDatastore;\n}();\n\nmodule.exports = KeyTransformDatastore;","map":null,"metadata":{},"sourceType":"script"}