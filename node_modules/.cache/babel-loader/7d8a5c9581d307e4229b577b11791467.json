{"ast":null,"code":"'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar json_rpc_provider_1 = require(\"./json-rpc-provider\");\n\nvar properties_1 = require(\"../utils/properties\");\n\nvar errors = __importStar(require(\"../errors\"));\n/*\n@TODO\nutils.defineProperty(Web3Signer, 'onchange', {\n\n});\n\n*/\n\n\nvar Web3Provider =\n/** @class */\nfunction (_super) {\n  __extends(Web3Provider, _super);\n\n  function Web3Provider(web3Provider, network) {\n    var _this = // HTTP has a host; IPC has a path.\n    _super.call(this, web3Provider.host || web3Provider.path || '', network) || this;\n\n    errors.checkNew(_this, Web3Provider);\n\n    if (web3Provider) {\n      if (web3Provider.sendAsync) {\n        _this._sendAsync = web3Provider.sendAsync.bind(web3Provider);\n      } else if (web3Provider.send) {\n        _this._sendAsync = web3Provider.send.bind(web3Provider);\n      }\n    }\n\n    if (!web3Provider || !_this._sendAsync) {\n      errors.throwError('invalid web3Provider', errors.INVALID_ARGUMENT, {\n        arg: 'web3Provider',\n        value: web3Provider\n      });\n    }\n\n    properties_1.defineReadOnly(_this, '_web3Provider', web3Provider);\n    return _this;\n  }\n\n  Web3Provider.prototype.send = function (method, params) {\n    var _this = this; // Metamask complains about eth_sign (and on some versions hangs)\n\n\n    if (method == 'eth_sign' && this._web3Provider.isMetaMask) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = 'personal_sign';\n      params = [params[1], params[0]];\n    }\n\n    return new Promise(function (resolve, reject) {\n      var request = {\n        method: method,\n        params: params,\n        id: 42,\n        jsonrpc: \"2.0\"\n      };\n\n      _this._sendAsync(request, function (error, result) {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (result.error) {\n          // @TODO: not any\n          var error = new Error(result.error.message);\n          error.code = result.error.code;\n          error.data = result.error.data;\n          reject(error);\n          return;\n        }\n\n        resolve(result.result);\n      });\n    });\n  };\n\n  return Web3Provider;\n}(json_rpc_provider_1.JsonRpcProvider);\n\nexports.Web3Provider = Web3Provider;","map":null,"metadata":{},"sourceType":"script"}