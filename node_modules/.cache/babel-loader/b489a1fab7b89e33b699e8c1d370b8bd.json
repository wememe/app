{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\n\nvar OrbitdbKeyStore =\n/*#__PURE__*/\nfunction () {\n  function OrbitdbKeyStore(muport) {\n    (0, _classCallCheck2.default)(this, OrbitdbKeyStore);\n    this._muport = muport;\n  }\n\n  (0, _createClass2.default)(OrbitdbKeyStore, [{\n    key: \"createKey\",\n    value: function createKey() {\n      return this.getKey();\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      return ec.keyFromPrivate(this._muport.keyring.signingKey._hdkey._privateKey);\n    }\n  }, {\n    key: \"generateKey\",\n    value: function generateKey() {\n      return Promise.resolve(ec.genKeyPair());\n    }\n  }, {\n    key: \"exportPublicKey\",\n    value: function exportPublicKey(key) {\n      return Promise.resolve(key.getPublic('hex'));\n    }\n  }, {\n    key: \"exportPrivateKey\",\n    value: function exportPrivateKey(key) {\n      return Promise.resolve(key.getPrivate('hex'));\n    }\n  }, {\n    key: \"importPublicKey\",\n    value: function importPublicKey(key) {\n      return Promise.resolve(ec.keyFromPublic(key, 'hex'));\n    }\n  }, {\n    key: \"importPrivateKey\",\n    value: function importPrivateKey(key) {\n      return Promise.resolve(ec.keyFromPrivate(key, 'hex'));\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(key, data) {\n      var sig = ec.sign(data, key);\n      return Promise.resolve(sig.toDER('hex'));\n    }\n  }, {\n    key: \"verify\",\n    value: function verify(signature, key, data) {\n      var res = false;\n      res = ec.verify(data, signature, key);\n      return Promise.resolve(res);\n    }\n  }]);\n  return OrbitdbKeyStore;\n}();\n\nmodule.exports = OrbitdbKeyStore;","map":null,"metadata":{},"sourceType":"script"}