{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar CID = require('cids');\n\nvar log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nvar waterfall = require('async/waterfall');\n\nvar _require = require('./constants'),\n    MFS_ROOT_KEY = _require.MFS_ROOT_KEY;\n\nvar withMfsRoot = function withMfsRoot(ipfs, callback) {\n  var repo = ipfs._repo;\n  var datastore = repo && repo.datastore;\n\n  if (!repo || !datastore) {\n    return callback(new Error('Please run jsipfs init first'));\n  }\n\n  waterfall([// Open the repo if it's been closed\n  function (cb) {\n    return datastore.open(function (error) {\n      return cb(error);\n    });\n  }, function (cb) {\n    // Load the MFS root CID\n    datastore.get(MFS_ROOT_KEY, function (error, result) {\n      // Once datastore-level releases its error.code addition, we can remove error.notFound logic\n      if (error && (error.notFound || error.code === 'ERR_NOT_FOUND')) {\n        log('Creating new MFS root');\n        return waterfall([// Store an empty node as the root\n        function (next) {\n          return ipfs.files.add({\n            path: '/'\n          }, next);\n        }, // Turn the hash into a Buffer\n        function (_ref, next) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              hash = _ref2[0].hash;\n\n          return next(null, new CID(hash));\n        }, function (cid, next) {\n          return repo.closed ? datastore.open(function (error) {\n            return next(error, cid);\n          }) : next(null, cid);\n        }, // Store the Buffer in the datastore\n        function (cid, next) {\n          return datastore.put(MFS_ROOT_KEY, cid.buffer, function (error) {\n            return next(error, cid);\n          });\n        }], cb);\n      }\n\n      var cid = result ? new CID(result) : null;\n      cb(error, cid);\n    });\n  }, // Turn the Buffer into a CID\n  function (cid, cb) {\n    log(\"Fetched MFS root \".concat(cid.toBaseEncodedString()));\n    cb(null, cid);\n  } // Invoke the API function with the root CID\n  ], callback);\n};\n\nmodule.exports = withMfsRoot;","map":null,"metadata":{},"sourceType":"script"}