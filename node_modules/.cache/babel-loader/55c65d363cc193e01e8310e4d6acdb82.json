{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _inherits = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Connection = require('interface-connection').Connection;\n\nvar toPull = require('stream-to-pull-stream');\n\nvar pull = require('pull-stream');\n\nvar pullCatch = require('pull-catch');\n\nvar setImmediate = require('async/setImmediate');\n\nvar debug = require('debug');\n\nvar log = debug('mplex');\nlog.error = debug('mplex:error');\n\nvar MULTIPLEX_CODEC = require('./codec');\n\nfunction noop() {} // Catch error makes sure that even though we get the \"Channel destroyed\" error\n// from when closing streams, that it's not leaking through since it's not\n// really an error for us, channels shoul close cleanly.\n\n\nfunction catchError(stream) {\n  return {\n    source: pull(stream.source, pullCatch(function (err) {\n      if (err.message === 'Channel destroyed') {\n        return;\n      }\n\n      return false;\n    })),\n    sink: stream.sink\n  };\n}\n\nvar MultiplexMuxer =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  _inherits(MultiplexMuxer, _EventEmitter);\n\n  function MultiplexMuxer(conn, multiplex) {\n    var _this;\n\n    _classCallCheck(this, MultiplexMuxer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiplexMuxer).call(this));\n    _this.multiplex = multiplex;\n    _this.conn = conn;\n    _this.multicodec = MULTIPLEX_CODEC;\n    multiplex.on('close', function () {\n      return _this.emit('close');\n    });\n    multiplex.on('error', function (err) {\n      return _this.emit('error', err);\n    });\n    multiplex.on('stream', function (stream, id) {\n      var muxedConn = new Connection(catchError(toPull.duplex(stream)), _this.conn);\n\n      _this.emit('stream', muxedConn);\n    });\n    return _this;\n  }\n  /**\n   * Conditionally emit errors if we have listeners. All other\n   * events are sent to EventEmitter.emit\n   *\n   * @param {string} eventName\n   * @param  {...any} args\n   * @returns {void}\n   */\n\n\n  _createClass(MultiplexMuxer, [{\n    key: \"emit\",\n    value: function emit(eventName) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (eventName === 'error' && !this._events.error) {\n        log.error.apply(log, ['error'].concat(args));\n      } else {\n        var _get2;\n\n        (_get2 = _get(_getPrototypeOf(MultiplexMuxer.prototype), \"emit\", this)).call.apply(_get2, [this, eventName].concat(args));\n      }\n    } // method added to enable pure stream muxer feeling\n\n  }, {\n    key: \"newStream\",\n    value: function newStream(callback) {\n      callback = callback || noop;\n      var stream;\n\n      try {\n        stream = this.multiplex.createStream();\n      } catch (err) {\n        return setImmediate(function () {\n          return callback(err);\n        });\n      }\n\n      var conn = new Connection(catchError(toPull.duplex(stream)), this.conn);\n      setImmediate(function () {\n        return callback(null, conn);\n      });\n      return conn;\n    }\n    /**\n     * Destroys multiplex and ends all internal streams\n     *\n     * @param {Error} err Optional error to pass to end the muxer with\n     * @param {function()} callback Optional\n     * @returns {void}\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(err, callback) {\n      if (typeof err === 'function') {\n        callback = err;\n        err = null;\n      }\n\n      callback = callback || noop;\n      this.multiplex.destroy(err);\n      callback();\n    }\n  }]);\n\n  return MultiplexMuxer;\n}(EventEmitter);\n\nmodule.exports = MultiplexMuxer;","map":null,"metadata":{},"sourceType":"script"}