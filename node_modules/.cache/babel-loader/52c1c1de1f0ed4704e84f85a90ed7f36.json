{"ast":null,"code":"'use strict';\n\nvar util = require('./util');\n/**\n * @callback ResolveCallback\n * @param {?Error} error - Error if path can't be resolved\n * @param {Object} result - Result of the path it it was resolved successfully\n * @param {*} result.value - Value the path resolves to\n * @param {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving.\n */\n\n/**\n * Resolves a path in a Bitcoin block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a Bitcoin block\n * @param {string} [path='/'] - Path that should be resolved\n * @param {ResolveCallback} callback - Callback that handles the return value\n * @returns {void}\n */\n\n\nvar resolve = function resolve(binaryBlob, path, callback) {\n  if (typeof path === 'function') {\n    callback = path;\n    path = undefined;\n  }\n\n  util.deserialize(binaryBlob, function (err, dagNode) {\n    if (err) {\n      return callback(err);\n    } // Return the deserialized block if no path is given\n\n\n    if (!path) {\n      return callback(null, {\n        value: dagNode,\n        remainderPath: ''\n      });\n    }\n\n    var pathArray = path.split('/');\n    var value = resolveField(dagNode, pathArray[0]);\n\n    if (value === null) {\n      return callback(new Error('No such path'), null);\n    }\n\n    var remainderPath = pathArray.slice(1).join('/'); // It is a link, hence it may have a remainder\n\n    if (value['/'] !== undefined) {\n      return callback(null, {\n        value: value,\n        remainderPath: remainderPath\n      });\n    } else {\n      if (remainderPath.length > 0) {\n        return callback(new Error('No such path'), null);\n      } else {\n        return callback(null, {\n          value: value,\n          remainderPath: ''\n        });\n      }\n    }\n  });\n};\n/**\n * @callback TreeCallback\n * @param {?Error} error - Error if paths can't be retreived\n * @param {string[] | Object.<string, *>[]} result - The result depends on\n *   `options.values`, whether it returns only the paths, or the paths with\n *   the corresponding values\n */\n\n/**\n * Return all available paths of a block.\n *\n * @param {Buffer} binaryBlob - Binary representation of a Bitcoin block\n * @param {Object} [options] - Possible options\n * @param {boolean} [options.values=false] - Retun only the paths by default.\n *   If it is `true` also return the values\n * @param {TreeCallback} callback - Callback that handles the return value\n * @returns {void}\n */\n\n\nvar tree = function tree(binaryBlob, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  util.deserialize(binaryBlob, function (err, dagNode) {\n    if (err) {\n      return callback(err);\n    }\n\n    var paths = ['version', 'timestamp', 'difficulty', 'nonce', 'parent', 'tx'];\n\n    if (options.values === true) {\n      var pathValues = {};\n\n      for (var _i = 0; _i < paths.length; _i++) {\n        var path = paths[_i];\n        pathValues[path] = resolveField(dagNode, path);\n      }\n\n      return callback(null, pathValues);\n    } else {\n      return callback(null, paths);\n    }\n  });\n}; // Return top-level fields. Returns `null` if field doesn't exist\n\n\nvar resolveField = function resolveField(dagNode, field) {\n  switch (field) {\n    case 'version':\n      return dagNode.version;\n\n    case 'timestamp':\n      return dagNode.timestamp;\n\n    case 'difficulty':\n      return dagNode.bits;\n\n    case 'nonce':\n      return dagNode.nonce;\n\n    case 'parent':\n      return {\n        '/': util.hashToCid(dagNode.prevHash)\n      };\n\n    case 'tx':\n      return {\n        '/': util.hashToCid(dagNode.merkleRoot)\n      };\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports = {\n  multicodec: 'bitcoin-block',\n  defaultHashAlg: 'dbl-sha2-256',\n  resolve: resolve,\n  tree: tree\n};","map":null,"metadata":{},"sourceType":"script"}