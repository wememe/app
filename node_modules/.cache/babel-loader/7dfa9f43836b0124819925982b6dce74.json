{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _require = require('./index'),\n    fetchText = _require.fetchText;\n\nvar didJWT = require('did-jwt');\n\nrequire('https-did-resolver').default();\n\nrequire('muport-did-resolver')();\n\nmodule.exports = {\n  /**\n   * Verifies that the gist contains the given muportDID and returns the users github username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did                     The muport DID of the user\n   * @param     {Object}            gistUrl                 URL of the proof\n   * @return    {Object}                                    Object containing username, and proof\n   */\n  verifyGithub: function () {\n    var _verifyGithub = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee(did, gistUrl) {\n      var gistFileContent, username;\n      return _regenerator.default.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!gistUrl || gistUrl.trim() === '')) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('The proof of your Github is not available');\n\n            case 2:\n              _context.next = 4;\n              return fetchText(gistUrl);\n\n            case 4:\n              gistFileContent = _context.sent;\n\n              if (!(gistFileContent.indexOf(did) === -1)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Gist File provided does not contain the correct DID of the user');\n\n            case 7:\n              username = gistUrl.split('/')[3];\n              return _context.abrupt(\"return\", {\n                username: username,\n                proof: gistUrl\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function verifyGithub(_x, _x2) {\n      return _verifyGithub.apply(this, arguments);\n    };\n  }(),\n\n  /**\n   * Verifies that the tweet contains the given muportDID and returns the users twitter username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The muport DID of the user\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyTwitter: function () {\n    var _verifyTwitter = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee2(did, claim) {\n      var verified, claimData;\n      return _regenerator.default.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return didJWT.verifyJWT(claim);\n\n            case 2:\n              verified = _context2.sent;\n\n              if (!(verified.payload.sub !== did)) {\n                _context2.next = 5;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 5:\n              claimData = verified.payload.claim;\n\n              if (!(!claimData.twitter_handle || !claimData.twitter_proof)) {\n                _context2.next = 8;\n                break;\n              }\n\n              throw new Error('The claim for your twitter is not correct');\n\n            case 8:\n              return _context2.abrupt(\"return\", {\n                username: claimData.twitter_handle,\n                proof: claimData.twitter_proof,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function verifyTwitter(_x3, _x4) {\n      return _verifyTwitter.apply(this, arguments);\n    };\n  }(),\n\n  /**\n   * Verifies that the proof for a did is correct\n   *\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {String}                            The DID of the user\n   */\n  verifyDID: function () {\n    var _verifyDID = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regenerator.default.mark(function _callee3(claim) {\n      var verified;\n      return _regenerator.default.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return didJWT.verifyJWT(claim);\n\n            case 2:\n              verified = _context3.sent;\n              return _context3.abrupt(\"return\", verified.payload.iss);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function verifyDID(_x5) {\n      return _verifyDID.apply(this, arguments);\n    };\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}