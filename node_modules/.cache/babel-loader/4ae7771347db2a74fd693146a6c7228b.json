{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/3box-dapp/src/components/Profile/SideBar.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\nimport { address } from '../../utils/address';\nimport * as routes from '../../utils/routes';\nimport EthereumLogo from \"../../assets/EthereumIcon.svg\";\nimport '../../views/styles/Profile.css';\n\nvar ProfileCategories = function ProfileCategories(_ref) {\n  var name = _ref.name,\n      image = _ref.image,\n      coverPhoto = _ref.coverPhoto,\n      description = _ref.description,\n      emoji = _ref.emoji,\n      publicProfile = _ref.publicProfile,\n      location = _ref.location,\n      isPublicProfilePage = _ref.isPublicProfilePage,\n      show = _ref.show,\n      copyToClipBoard = _ref.copyToClipBoard;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, !isPublicProfilePage && (coverPhoto.length > 0 && coverPhoto[0].contentUrl ? React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(coverPhoto[0].contentUrl['/']),\n    className: \"profile__coverPhoto clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"profile__coverPhoto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })), isPublicProfilePage && publicProfile.coverPhoto && (publicProfile.coverPhoto.length > 0 && publicProfile.coverPhoto[0].contentUrl ? React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(publicProfile.coverPhoto[0].contentUrl['/']),\n    className: \"profile__coverPhoto clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"profile__coverPhoto\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    id: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"profile__fixed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"profile__user__info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, !isPublicProfilePage && (image.length > 0 && image[0].contentUrl ? React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(image[0].contentUrl['/']),\n    className: \"profile__user__picture clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"profile__user__picture\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), isPublicProfilePage && publicProfile.image && (publicProfile.image.length > 0 && publicProfile.image[0].contentUrl ? React.createElement(\"img\", {\n    src: \"https://ipfs.infura.io/ipfs/\".concat(publicProfile.image[0].contentUrl['/']),\n    className: \"profile__user__picture clearProfPic\",\n    alt: \"profile\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    className: \"profile__user__picture\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"profile__basic\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"profile__basic__wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, !isPublicProfilePage && (name ? React.createElement(\"h2\", {\n    id: \"profile__user__name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, name) : React.createElement(Link, {\n    to: routes.EDITPROFILE,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"profile__user__name__add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Add name\"))), isPublicProfilePage && publicProfile.name && (publicProfile.name ? React.createElement(\"h2\", {\n    id: \"profile__user__name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, publicProfile.name) : React.createElement(Link, {\n    to: routes.EDITPROFILE,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    id: \"profile__user__name__add\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Add name\"))), React.createElement(\"span\", {\n    className: \"profile__basic__emoji\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, !isPublicProfilePage && emoji.code ? emoji.code : emoji, isPublicProfilePage && publicProfile.emoji && publicProfile.emoji.code ? publicProfile.emoji.code : publicProfile.emoji)), React.createElement(\"div\", {\n    id: \"profile__network\",\n    title: \"Network\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    id: \"profile__network__networkLogo\",\n    src: EthereumLogo,\n    alt: \"Ethereum Logo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"profile__details__address\",\n    title: address,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, !isPublicProfilePage && address && address.substring(0, 8), isPublicProfilePage && location.pathname.split('/')[2].substring(0, 8), \"...\")), React.createElement(\"p\", {\n    className: \"profile__basic__description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, !isPublicProfilePage && description, isPublicProfilePage && publicProfile.description && publicProfile.description)), React.createElement(\"div\", {\n    className: \"profile__links\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, !isPublicProfilePage ? React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"\".concat(routes.PUBLIC_BASE, \"/\").concat(address).concat(routes.PUBLIC_ACTIVITY_ROUTE),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"View\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: copyToClipBoard,\n    className: \"profile__links__copy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Share\")) : address === location.pathname.split('/')[2] && React.createElement(Link, {\n    to: routes.PROFILE_ACTIVITY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Return\")), React.createElement(\"div\", {\n    className: \"profile__category\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"profile__category__sectionWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    exact: true,\n    to: isPublicProfilePage ? \"\".concat(routes.PUBLIC_BASE, \"/\").concat(location.pathname.split('/')[2]).concat(routes.PUBLIC_ACTIVITY_ROUTE) : routes.PROFILE_ACTIVITY,\n    className: \"profile__category__section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(NavLink, {\n    exact: true,\n    to: isPublicProfilePage ? \"\".concat(routes.PUBLIC_BASE, \"/\").concat(location.pathname.split('/')[2]).concat(routes.PUBLIC_DETAILS_ROUTE) : routes.PROFILE_ABOUT,\n    className: \"profile__category__section \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Details\")))), React.createElement(\"div\", {\n    id: \"profile__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"profile__footer__contents\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"3Box 2018\"), React.createElement(Link, {\n    to: routes.TERMS,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Terms\"), React.createElement(Link, {\n    to: routes.PRIVACY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Privacy\"))), React.createElement(\"div\", {\n    className: \"\".concat(show ? 'showModal' : '', \" modal__container--sync modal--effect\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"modal--sync \",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"COPIED PROFILE URL\")))))));\n};\n\nProfileCategories.propTypes = {\n  name: PropTypes.string,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  email: PropTypes.string,\n  website: PropTypes.string,\n  job: PropTypes.string,\n  school: PropTypes.string,\n  degree: PropTypes.string,\n  memberSince: PropTypes.string,\n  major: PropTypes.string,\n  year: PropTypes.string,\n  employer: PropTypes.string,\n  birthday: PropTypes.string,\n  emoji: PropTypes.string,\n  image: PropTypes.array,\n  coverPhoto: PropTypes.array,\n  description: PropTypes.string,\n  publicProfile: PropTypes.object,\n  location: PropTypes.object.isRequired,\n  isPublicProfilePage: PropTypes.bool.isRequired\n};\nProfileCategories.defaultProps = {\n  name: '',\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  email: '',\n  description: '',\n  image: [],\n  coverPhoto: [],\n  emoji: '',\n  memberSince: '',\n  website: '',\n  birthday: '',\n  job: '',\n  school: '',\n  degree: '',\n  major: '',\n  year: '',\n  employer: '',\n  publicProfile: {}\n};\n\nfunction mapState(state) {\n  return {\n    name: state.threeBox.name,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    image: state.threeBox.image,\n    coverPhoto: state.threeBox.coverPhoto,\n    emoji: state.threeBox.emoji,\n    email: state.threeBox.email,\n    description: state.threeBox.description,\n    website: state.threeBox.website,\n    birthday: state.threeBox.birthday,\n    memberSince: state.threeBox.memberSince,\n    job: state.threeBox.job,\n    school: state.threeBox.school,\n    degree: state.threeBox.degree,\n    major: state.threeBox.major,\n    year: state.threeBox.year,\n    employer: state.threeBox.employer,\n    publicProfile: state.threeBox.publicProfile\n  };\n}\n\nexport default withRouter(connect(mapState)(ProfileCategories));","map":{"version":3,"sources":["/Users/kenzo/Desktop/3box-dapp/src/components/Profile/SideBar.jsx"],"names":["React","PropTypes","connect","Link","NavLink","withRouter","address","routes","ProfileCategories","name","image","coverPhoto","description","emoji","publicProfile","location","isPublicProfilePage","show","copyToClipBoard","length","contentUrl","EDITPROFILE","code","EthereumLogo","substring","pathname","split","PUBLIC_BASE","PUBLIC_ACTIVITY_ROUTE","PROFILE_ACTIVITY","PUBLIC_DETAILS_ROUTE","PROFILE_ABOUT","TERMS","PRIVACY","propTypes","string","verifiedGithub","verifiedTwitter","email","website","job","school","degree","memberSince","major","year","employer","birthday","array","object","isRequired","bool","defaultProps","mapState","state","threeBox"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, NavLink, withRouter } from 'react-router-dom';\nimport { address } from '../../utils/address';\nimport * as routes from '../../utils/routes';\nimport EthereumLogo from '../../assets/EthereumIcon.svg';\n\nimport '../../views/styles/Profile.css';\n\nconst ProfileCategories = ({\n  name,\n  image,\n  coverPhoto,\n  description,\n  emoji,\n  publicProfile,\n  location,\n  isPublicProfilePage,\n  show,\n  copyToClipBoard,\n}) => (\n    <div>\n\n      {!isPublicProfilePage && (\n        coverPhoto.length > 0 && coverPhoto[0].contentUrl\n          ? <img src={`https://ipfs.infura.io/ipfs/${coverPhoto[0].contentUrl['/']}`} className=\"profile__coverPhoto clearProfPic\" alt=\"profile\" />\n          : <div className=\"profile__coverPhoto\" />)\n      }\n\n      {(isPublicProfilePage && publicProfile.coverPhoto) && (\n        publicProfile.coverPhoto.length > 0 && publicProfile.coverPhoto[0].contentUrl\n          ? <img src={`https://ipfs.infura.io/ipfs/${publicProfile.coverPhoto[0].contentUrl['/']}`} className=\"profile__coverPhoto clearProfPic\" alt=\"profile\" />\n          : <div className=\"profile__coverPhoto\" />)\n      }\n\n      <div id=\"profile\">\n        <div id=\"profile__fixed\">\n\n          <div id=\"profile__user__info\">\n\n            {!isPublicProfilePage && (\n              image.length > 0 && image[0].contentUrl\n                ? <img src={`https://ipfs.infura.io/ipfs/${image[0].contentUrl['/']}`} className=\"profile__user__picture clearProfPic\" alt=\"profile\" />\n                : <div className=\"profile__user__picture\" />)\n            }\n\n            {(isPublicProfilePage && publicProfile.image) && (\n              publicProfile.image.length > 0 && publicProfile.image[0].contentUrl\n                ? <img src={`https://ipfs.infura.io/ipfs/${publicProfile.image[0].contentUrl['/']}`} className=\"profile__user__picture clearProfPic\" alt=\"profile\" />\n                : <div className=\"profile__user__picture\" />)\n            }\n\n            <div className=\"profile__basic\">\n              <div className=\"profile__basic__wrapper\">\n                {!isPublicProfilePage && (name\n                  ? <h2 id=\"profile__user__name\">{name}</h2>\n                  : <Link to={routes.EDITPROFILE}><h2 id=\"profile__user__name__add\">Add name</h2></Link>)\n                }\n\n                {(isPublicProfilePage && publicProfile.name) && (publicProfile.name\n                  ? <h2 id=\"profile__user__name\">{publicProfile.name}</h2>\n                  : <Link to={routes.EDITPROFILE}><h2 id=\"profile__user__name__add\">Add name</h2></Link>)\n                }\n\n\n                <span className=\"profile__basic__emoji\">\n                  {!isPublicProfilePage && emoji.code ? emoji.code : emoji}\n                  {(isPublicProfilePage && publicProfile.emoji) && publicProfile.emoji.code ? publicProfile.emoji.code : publicProfile.emoji}\n                </span>\n              </div>\n\n              <div id=\"profile__network\" title=\"Network\">\n                <img id=\"profile__network__networkLogo\" src={EthereumLogo} alt=\"Ethereum Logo\" />\n                <p id=\"profile__details__address\" title={address}>\n                  {!isPublicProfilePage && address && address.substring(0, 8)}\n                  {isPublicProfilePage && location.pathname.split('/')[2].substring(0, 8)}\n                  ...\n                </p>\n              </div>\n\n              <p className=\"profile__basic__description\">\n                {!isPublicProfilePage && description}\n                {(isPublicProfilePage && publicProfile.description) && publicProfile.description}\n              </p>\n\n            </div>\n\n            <div className=\"profile__links\">\n              {/* If /profile show link to my profile */}\n              {!isPublicProfilePage\n                ? (\n                  <React.Fragment>\n                    <Link to={`${routes.PUBLIC_BASE}/${address}${routes.PUBLIC_ACTIVITY_ROUTE}`}>\n                      View\n                    </Link>\n                    <button type=\"button\" onClick={copyToClipBoard} className=\"profile__links__copy\">\n                      Share\n                    </button>\n                  </React.Fragment>\n                )\n                : address === location.pathname.split('/')[2] && (\n                  <Link to={routes.PROFILE_ACTIVITY}>\n                    Return\n                  </Link>\n                )\n              }\n            </div>\n\n            <div className=\"profile__category\">\n              <div className=\"profile__category__sectionWrapper\">\n                <NavLink exact to={isPublicProfilePage ? `${routes.PUBLIC_BASE}/${location.pathname.split('/')[2]}${routes.PUBLIC_ACTIVITY_ROUTE}` : routes.PROFILE_ACTIVITY} className=\"profile__category__section\">Activity</NavLink>\n                <NavLink exact to={isPublicProfilePage ? `${routes.PUBLIC_BASE}/${location.pathname.split('/')[2]}${routes.PUBLIC_DETAILS_ROUTE}` : routes.PROFILE_ABOUT} className=\"profile__category__section \">Details</NavLink>\n              </div>\n            </div>\n\n          </div>\n\n          <div id=\"profile__footer\">\n            <div id=\"profile__footer__contents\">\n              <p>3Box 2018</p>\n              <Link to={routes.TERMS}>Terms</Link>\n              <Link to={routes.PRIVACY}>Privacy</Link>\n            </div>\n          </div>\n\n          <div className={`${show ? 'showModal' : ''} modal__container--sync modal--effect`}>\n            <div className=\"modal--sync \">\n              <div>\n                <p>COPIED PROFILE URL</p>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n\nProfileCategories.propTypes = {\n  name: PropTypes.string,\n  verifiedGithub: PropTypes.string,\n  verifiedTwitter: PropTypes.string,\n  email: PropTypes.string,\n  website: PropTypes.string,\n  job: PropTypes.string,\n  school: PropTypes.string,\n  degree: PropTypes.string,\n  memberSince: PropTypes.string,\n  major: PropTypes.string,\n  year: PropTypes.string,\n  employer: PropTypes.string,\n  birthday: PropTypes.string,\n  emoji: PropTypes.string,\n  image: PropTypes.array,\n  coverPhoto: PropTypes.array,\n  description: PropTypes.string,\n  publicProfile: PropTypes.object,\n  location: PropTypes.object.isRequired,\n  isPublicProfilePage: PropTypes.bool.isRequired,\n};\n\nProfileCategories.defaultProps = {\n  name: '',\n  verifiedGithub: '',\n  verifiedTwitter: '',\n  email: '',\n  description: '',\n  image: [],\n  coverPhoto: [],\n  emoji: '',\n  memberSince: '',\n  website: '',\n  birthday: '',\n  job: '',\n  school: '',\n  degree: '',\n  major: '',\n  year: '',\n  employer: '',\n  publicProfile: {}\n};\n\nfunction mapState(state) {\n  return {\n    name: state.threeBox.name,\n    verifiedGithub: state.threeBox.verifiedGithub,\n    verifiedTwitter: state.threeBox.verifiedTwitter,\n    image: state.threeBox.image,\n    coverPhoto: state.threeBox.coverPhoto,\n    emoji: state.threeBox.emoji,\n    email: state.threeBox.email,\n    description: state.threeBox.description,\n    website: state.threeBox.website,\n    birthday: state.threeBox.birthday,\n    memberSince: state.threeBox.memberSince,\n    job: state.threeBox.job,\n    school: state.threeBox.school,\n    degree: state.threeBox.degree,\n    major: state.threeBox.major,\n    year: state.threeBox.year,\n    employer: state.threeBox.employer,\n    publicProfile: state.threeBox.publicProfile,\n  };\n}\n\nexport default withRouter(connect(mapState)(ProfileCategories));\n"]},"metadata":{},"sourceType":"module"}