{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar setImmediate = require('async/setImmediate');\n\nvar series = require('async/series');\n\nvar detect = require('async/detect');\n\nvar waterfall = require('async/waterfall');\n\nrequire('node-forge/lib/pkcs7');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar util = require('./util');\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\n\nvar CMS =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  function CMS(keychain) {\n    _classCallCheck(this, CMS);\n\n    if (!keychain) {\n      throw new Error('keychain is required');\n    }\n\n    this.keychain = keychain;\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @param {function(Error, Buffer)} callback\n   * @returns {undefined}\n   */\n\n\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function encrypt(name, plain, callback) {\n      var self = this;\n\n      var done = function done(err, result) {\n        return setImmediate(function () {\n          return callback(err, result);\n        });\n      };\n\n      if (!Buffer.isBuffer(plain)) {\n        return done(new Error('Plain data must be a Buffer'));\n      }\n\n      series([function (cb) {\n        return self.keychain.findKeyByName(name, cb);\n      }, function (cb) {\n        return self.keychain._getPrivateKey(name, cb);\n      }], function (err, results) {\n        if (err) return done(err);\n        var key = results[0];\n        var pem = results[1];\n\n        try {\n          var privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._());\n          util.certificateForKey(key, privateKey, function (err, certificate) {\n            if (err) return callback(err); // create a p7 enveloped message\n\n            var p7 = forge.pkcs7.createEnvelopedData();\n            p7.addRecipient(certificate);\n            p7.content = forge.util.createBuffer(plain);\n            p7.encrypt(); // convert message to DER\n\n            var der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n            done(null, Buffer.from(der, 'binary'));\n          });\n        } catch (err) {\n          done(err);\n        }\n      });\n    }\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     *\n     * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n     * @param {function(Error, Buffer)} callback\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(cmsData, callback) {\n      var done = function done(err, result) {\n        return setImmediate(function () {\n          return callback(err, result);\n        });\n      };\n\n      if (!Buffer.isBuffer(cmsData)) {\n        return done(new Error('CMS data is required'));\n      }\n\n      var self = this;\n      var cms;\n\n      try {\n        var buf = forge.util.createBuffer(cmsData.toString('binary'));\n        var obj = forge.asn1.fromDer(buf);\n        cms = forge.pkcs7.messageFromAsn1(obj);\n      } catch (err) {\n        return done(new Error('Invalid CMS: ' + err.message));\n      } // Find a recipient whose key we hold. We only deal with recipient certs\n      // issued by ipfs (O=ipfs).\n\n\n      var recipients = cms.recipients.filter(function (r) {\n        return r.issuer.find(function (a) {\n          return a.shortName === 'O' && a.value === 'ipfs';\n        });\n      }).filter(function (r) {\n        return r.issuer.find(function (a) {\n          return a.shortName === 'CN';\n        });\n      }).map(function (r) {\n        return {\n          recipient: r,\n          keyId: r.issuer.find(function (a) {\n            return a.shortName === 'CN';\n          }).value\n        };\n      });\n      detect(recipients, function (r, cb) {\n        return self.keychain.findKeyById(r.keyId, function (err, info) {\n          return cb(null, !err && info);\n        });\n      }, function (err, r) {\n        if (err) return done(err);\n\n        if (!r) {\n          var missingKeys = recipients.map(function (r) {\n            return r.keyId;\n          });\n          err = new Error('Decryption needs one of the key(s): ' + missingKeys.join(', '));\n          err.missingKeys = missingKeys;\n          return done(err);\n        }\n\n        waterfall([function (cb) {\n          return self.keychain.findKeyById(r.keyId, cb);\n        }, function (key, cb) {\n          return self.keychain._getPrivateKey(key.name, cb);\n        }], function (err, pem) {\n          if (err) return done(err);\n          var privateKey = forge.pki.decryptRsaPrivateKey(pem, self.keychain._());\n          cms.decrypt(r.recipient, privateKey);\n          done(null, Buffer.from(cms.content.getBytes(), 'binary'));\n        });\n      });\n    }\n  }]);\n\n  return CMS;\n}();\n\nmodule.exports = CMS;","map":null,"metadata":{},"sourceType":"script"}