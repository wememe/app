{"ast":null,"code":"var _jsxFileName = \"/Users/kenzo/Desktop/app/src/components/Profile/PublicProfile/PublicActivity.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PublicActivityHeader from './PublicActivityHeader';\nimport PublicActivityTiles from './PublicActivityTiles';\nimport Loading from \"../../../assets/Loading.svg\";\nimport '../../styles/Feed.css';\nimport '../../../views/styles/Profile.css';\nimport '../../styles/NetworkArray.css';\n\nvar PublicActivity = function PublicActivity(_ref) {\n  var ifFetchingActivity = _ref.ifFetchingActivity,\n      publicProfileActivity = _ref.publicProfileActivity;\n  return React.createElement(\"div\", {\n    id: \"feed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"header\",\n    id: \"feed__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Activity\"), React.createElement(\"div\", {\n    className: \"feed__activity__header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, ifFetchingActivity && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: Loading,\n    alt: \"loading\",\n    id: \"activityLoad\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })), publicProfileActivity.length > 0 ? publicProfileActivity.map(function (feedAddress, i) {\n    return React.createElement(\"div\", {\n      key: i,\n      className: \"feed__activity__tile\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(PublicActivityHeader, {\n      i: i,\n      feedAddress: feedAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(PublicActivityTiles, {\n      feedAddress: feedAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }));\n  }) : !ifFetchingActivity && publicProfileActivity.length === 0 && React.createElement(\"div\", {\n    className: \"feed__activity__load\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"No activity at this address yet\")))), React.createElement(\"div\", {\n    className: \"feed__footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"logo__icon--footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"3\"))));\n};\n\nPublicActivity.propTypes = {\n  ifFetchingActivity: PropTypes.bool,\n  publicProfileActivity: PropTypes.array\n};\nPublicActivity.defaultProps = {\n  ifFetchingActivity: false,\n  publicProfileActivity: []\n};\n\nvar mapState = function mapState(state) {\n  return {\n    ifFetchingActivity: state.threeBox.ifFetchingActivity,\n    publicProfileActivity: state.threeBox.publicProfileActivity,\n    publicProfileAddress: state.threeBox.publicProfileAddress,\n    publicName: state.threeBox.publicName\n  };\n};\n\nexport default connect(mapState)(PublicActivity);","map":{"version":3,"sources":["/Users/kenzo/Desktop/app/src/components/Profile/PublicProfile/PublicActivity.jsx"],"names":["React","PropTypes","connect","PublicActivityHeader","PublicActivityTiles","PublicActivity","ifFetchingActivity","publicProfileActivity","Loading","length","map","feedAddress","i","propTypes","bool","array","defaultProps","mapState","state","threeBox","publicProfileAddress","publicName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport PublicActivityHeader from './PublicActivityHeader';\nimport PublicActivityTiles from './PublicActivityTiles';\nimport Loading from '../../../assets/Loading.svg';\nimport '../../styles/Feed.css';\nimport '../../../views/styles/Profile.css';\nimport '../../styles/NetworkArray.css';\n\nconst PublicActivity = ({ ifFetchingActivity, publicProfileActivity }) => (\n  <div id=\"feed\">\n    <div>\n      <p className=\"header\" id=\"feed__header\">Activity</p>\n      <div className=\"feed__activity__header\">\n        {(ifFetchingActivity)\n          && (\n            <div className=\"feed__activity__load\">\n              <img src={Loading} alt=\"loading\" id=\"activityLoad\" />\n            </div>\n          )}\n        {publicProfileActivity.length > 0\n          ? publicProfileActivity.map((feedAddress, i) => (\n            <div key={i} className=\"feed__activity__tile\">\n              <PublicActivityHeader i={i} feedAddress={feedAddress} />\n              <PublicActivityTiles feedAddress={feedAddress} />\n            </div>\n          ))\n          : (!ifFetchingActivity && publicProfileActivity.length === 0)\n          && (\n            <div className=\"feed__activity__load\">\n              <p>No activity at this address yet</p>\n            </div>\n          )\n        }\n      </div>\n    </div>\n    <div className=\"feed__footer\">\n      <div className=\"logo__icon--footer\">\n        <h2>3</h2>\n      </div>\n    </div>\n  </div>\n);\n\nPublicActivity.propTypes = {\n  ifFetchingActivity: PropTypes.bool,\n  publicProfileActivity: PropTypes.array,\n};\n\nPublicActivity.defaultProps = {\n  ifFetchingActivity: false,\n  publicProfileActivity: [],\n};\n\nconst mapState = state => ({\n  ifFetchingActivity: state.threeBox.ifFetchingActivity,\n  publicProfileActivity: state.threeBox.publicProfileActivity,\n  publicProfileAddress: state.threeBox.publicProfileAddress,\n  publicName: state.threeBox.publicName,\n});\n\nexport default connect(mapState)(PublicActivity);\n"]},"metadata":{},"sourceType":"module"}