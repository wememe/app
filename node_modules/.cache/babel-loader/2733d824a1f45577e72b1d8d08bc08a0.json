{"ast":null,"code":"/* Copyright (c) 2013 Rod Vagg, MIT License */\nfunction AbstractChainedBatch(db) {\n  this._db = db;\n  this._operations = [];\n  this._written = false;\n}\n\nAbstractChainedBatch.prototype._checkWritten = function () {\n  if (this._written) throw new Error('write() already called on this batch');\n};\n\nAbstractChainedBatch.prototype.put = function (key, value) {\n  this._checkWritten();\n\n  var err = this._db._checkKey(key, 'key', this._db._isBuffer);\n\n  if (err) throw err;\n  if (!this._db._isBuffer(key)) key = String(key);\n  if (!this._db._isBuffer(value)) value = String(value);\n  if (typeof this._put == 'function') this._put(key, value);else this._operations.push({\n    type: 'put',\n    key: key,\n    value: value\n  });\n  return this;\n};\n\nAbstractChainedBatch.prototype.del = function (key) {\n  this._checkWritten();\n\n  var err = this._db._checkKey(key, 'key', this._db._isBuffer);\n\n  if (err) throw err;\n  if (!this._db._isBuffer(key)) key = String(key);\n  if (typeof this._del == 'function') this._del(key);else this._operations.push({\n    type: 'del',\n    key: key\n  });\n  return this;\n};\n\nAbstractChainedBatch.prototype.clear = function () {\n  this._checkWritten();\n\n  this._operations = [];\n  if (typeof this._clear == 'function') this._clear();\n  return this;\n};\n\nAbstractChainedBatch.prototype.write = function (options, callback) {\n  this._checkWritten();\n\n  if (typeof options == 'function') callback = options;\n  if (typeof callback != 'function') throw new Error('write() requires a callback argument');\n  if (typeof options != 'object') options = {};\n  this._written = true;\n  if (typeof this._write == 'function') return this._write(callback);\n  if (typeof this._db._batch == 'function') return this._db._batch(this._operations, options, callback);\n  process.nextTick(callback);\n};\n\nmodule.exports = AbstractChainedBatch;","map":null,"metadata":{},"sourceType":"script"}