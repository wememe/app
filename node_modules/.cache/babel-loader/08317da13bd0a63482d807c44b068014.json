{"ast":null,"code":"var bigNumberify = require('./bignumber.js').bigNumberify;\n\nvar throwError = require('./throw-error');\n\nvar zero = new bigNumberify(0);\nvar negative1 = new bigNumberify(-1);\nvar names = ['wei', 'kwei', 'Mwei', 'Gwei', 'szabo', 'finny', 'ether'];\n\nvar getUnitInfo = function () {\n  var unitInfos = {};\n\n  function getUnitInfo(value) {\n    return {\n      decimals: value.length - 1,\n      tenPower: bigNumberify(value)\n    };\n  } // Cache the common units\n\n\n  var value = '1';\n  names.forEach(function (name) {\n    var info = getUnitInfo(value);\n    unitInfos[name.toLowerCase()] = info;\n    unitInfos[String(info.decimals)] = info;\n    value += '000';\n  });\n  return function (name) {\n    // Try the cache\n    var info = unitInfos[String(name).toLowerCase()];\n\n    if (!info && typeof name === 'number' && parseInt(name) == name && name >= 0 && name <= 256) {\n      var value = '1';\n\n      for (var i = 0; i < name; i++) {\n        value += '0';\n      }\n\n      info = getUnitInfo(value);\n    } // Make sure we got something\n\n\n    if (!info) {\n      throwError('invalid unitType', {\n        unitType: name\n      });\n    }\n\n    return info;\n  };\n}();\n\nfunction formatUnits(value, unitType, options) {\n  if (typeof unitType === 'object' && !options) {\n    options = unitType;\n    unitType = undefined;\n  }\n\n  if (unitType == null) {\n    unitType = 18;\n  }\n\n  var unitInfo = getUnitInfo(unitType); // Make sure wei is a big number (convert as necessary)\n\n  value = bigNumberify(value);\n\n  if (!options) {\n    options = {};\n  }\n\n  var negative = value.lt(zero);\n\n  if (negative) {\n    value = value.mul(negative1);\n  }\n\n  var fraction = value.mod(unitInfo.tenPower).toString(10);\n\n  while (fraction.length < unitInfo.decimals) {\n    fraction = '0' + fraction;\n  } // Strip off trailing zeros (but keep one if would otherwise be bare decimal point)\n\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = value.div(unitInfo.tenPower).toString(10);\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  var value = whole + '.' + fraction;\n\n  if (negative) {\n    value = '-' + value;\n  }\n\n  return value;\n}\n\nfunction parseUnits(value, unitType) {\n  if (unitType == null) {\n    unitType = 18;\n  }\n\n  var unitInfo = getUnitInfo(unitType);\n\n  if (typeof value !== 'string' || !value.match(/^-?[0-9.,]+$/)) {\n    throwError('invalid value', {\n      input: value\n    });\n  } // Remove commas\n\n\n  var value = value.replace(/,/g, ''); // Is it negative?\n\n  var negative = value.substring(0, 1) === '-';\n\n  if (negative) {\n    value = value.substring(1);\n  }\n\n  if (value === '.') {\n    throwError('invalid value', {\n      input: value\n    });\n  } // Split it into a whole and fractional part\n\n\n  var comps = value.split('.');\n\n  if (comps.length > 2) {\n    throwError('too many decimal points', {\n      input: value\n    });\n  }\n\n  var whole = comps[0],\n      fraction = comps[1];\n\n  if (!whole) {\n    whole = '0';\n  }\n\n  if (!fraction) {\n    fraction = '0';\n  } // Prevent underflow\n\n\n  if (fraction.length > unitInfo.decimals) {\n    throwError('too many decimal places', {\n      input: value,\n      decimals: fraction.length\n    });\n  } // Fully pad the string with zeros to get to wei\n\n\n  while (fraction.length < unitInfo.decimals) {\n    fraction += '0';\n  }\n\n  whole = bigNumberify(whole);\n  fraction = bigNumberify(fraction);\n  var wei = whole.mul(unitInfo.tenPower).add(fraction);\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return wei;\n}\n\nfunction formatEther(wei, options) {\n  return formatUnits(wei, 18, options);\n}\n\nfunction parseEther(ether) {\n  return parseUnits(ether, 18);\n}\n\nmodule.exports = {\n  formatEther: formatEther,\n  parseEther: parseEther,\n  formatUnits: formatUnits,\n  parseUnits: parseUnits\n};","map":null,"metadata":{},"sourceType":"script"}