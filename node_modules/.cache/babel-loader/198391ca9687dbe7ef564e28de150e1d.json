{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream/pull');\n\nvar values = require('pull-stream/sources/values');\n\nvar collect = require('pull-stream/sinks/collect');\n\nvar pullLP = require('pull-length-prefixed');\n\nvar debug = require('debug');\n\nexports = module.exports;\n\nfunction randomId() {\n  return (~~(Math.random() * 1e9)).toString(36);\n} // prefixes a message with a varint\n// TODO this is a pull-stream 'creep' (pull stream to add a byte?')\n\n\nfunction encode(msg, callback) {\n  pull(values(Buffer.isBuffer(msg) ? [msg] : [Buffer.from(msg)]), pullLP.encode(), collect(function (err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, encoded[0]);\n  }));\n}\n\nexports.writeEncoded = function (writer, msg, callback) {\n  encode(msg, function (err, msg) {\n    if (err) {\n      return callback(err);\n    }\n\n    writer.write(msg);\n  });\n};\n\nfunction createLogger(type) {\n  var rId = randomId();\n\n  function printer(logger) {\n    return function (msg) {\n      if (Array.isArray(msg)) {\n        msg = msg.join(' ');\n      }\n\n      logger('(%s) %s', rId, msg);\n    };\n  }\n\n  var log = printer(debug('mss:' + type));\n  log.error = printer(debug('mss:' + type + ':error'));\n  return log;\n}\n\nexports.log = {};\n\nexports.log.dialer = function () {\n  return createLogger('dialer\\t');\n};\n\nexports.log.listener = function () {\n  return createLogger('listener\\t');\n};","map":null,"metadata":{},"sourceType":"script"}