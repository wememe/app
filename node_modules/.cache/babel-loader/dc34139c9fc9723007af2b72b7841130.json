{"ast":null,"code":"'use strict';\n\nvar core = require('datastore-core');\n\nvar ShardingStore = core.ShardingDatastore;\n\nvar Key = require('interface-datastore').Key;\n\nvar base32 = require('base32.js');\n\nvar Block = require('ipfs-block');\n\nvar setImmediate = require('async/setImmediate');\n\nvar reject = require('async/reject');\n\nvar CID = require('cids');\n\nvar pull = require('pull-stream');\n/**\n * Transform a raw buffer to a base32 encoded key.\n *\n * @param {Buffer} rawKey\n * @returns {Key}\n */\n\n\nvar keyFromBuffer = function keyFromBuffer(rawKey) {\n  var enc = new base32.Encoder();\n  return new Key('/' + enc.write(rawKey).finalize(), false);\n};\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\n\nvar cidToDsKey = function cidToDsKey(cid) {\n  return keyFromBuffer(cid.buffer);\n};\n\nmodule.exports = function (filestore, options, callback) {\n  maybeWithSharding(filestore, options, function (err, store) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, createBaseStore(store));\n  });\n};\n\nfunction maybeWithSharding(filestore, options, callback) {\n  if (options.sharding) {\n    var shard = new core.shard.NextToLast(2);\n    ShardingStore.createOrOpen(filestore, shard, callback);\n  } else {\n    setImmediate(function () {\n      return callback(null, filestore);\n    });\n  }\n}\n\nfunction createBaseStore(store) {\n  return {\n    /**\n     * Query the store.\n     *\n     * @param {object} query\n     * @param {function(Error, Array)} callback\n     * @return {void}\n     */\n    query: function query(_query, callback) {\n      pull(store.query(_query), pull.collect(callback));\n    },\n\n    /**\n     * Get a single block by CID.\n     *\n     * @param {CID} cid\n     * @param {function(Error, Block)} callback\n     * @returns {void}\n     */\n    get: function get(cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(function () {\n          callback(new Error('Not a valid cid'));\n        });\n      }\n\n      var k = cidToDsKey(cid);\n      store.get(k, function (err, blockData) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, new Block(blockData, cid));\n      });\n    },\n    put: function put(block, callback) {\n      if (!Block.isBlock(block)) {\n        return setImmediate(function () {\n          callback(new Error('invalid block'));\n        });\n      }\n\n      var k = cidToDsKey(block.cid);\n      store.has(k, function (err, exists) {\n        if (err) {\n          return callback(err);\n        }\n\n        if (exists) {\n          return callback();\n        }\n\n        store.put(k, block.data, callback);\n      });\n    },\n\n    /**\n     * Like put, but for more.\n     *\n     * @param {Array<Block>} blocks\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    putMany: function putMany(blocks, callback) {\n      var keys = blocks.map(function (b) {\n        return {\n          key: cidToDsKey(b.cid),\n          block: b\n        };\n      });\n      var batch = store.batch();\n      reject(keys, function (k, cb) {\n        return store.has(k.key, cb);\n      }, function (err, newKeys) {\n        if (err) {\n          return callback(err);\n        }\n\n        newKeys.forEach(function (k) {\n          batch.put(k.key, k.block.data);\n        });\n        batch.commit(callback);\n      });\n    },\n\n    /**\n     * Does the store contain block with this cid?\n     *\n     * @param {CID} cid\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    has: function has(cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(function () {\n          callback(new Error('Not a valid cid'));\n        });\n      }\n\n      store.has(cidToDsKey(cid), callback);\n    },\n\n    /**\n     * Delete a block from the store\n     *\n     * @param {CID} cid\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    delete: function _delete(cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(function () {\n          callback(new Error('Not a valid cid'));\n        });\n      }\n\n      store.delete(cidToDsKey(cid), callback);\n    },\n    close: function close(callback) {\n      store.close(callback);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}