{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream');\n\nvar handshake = require('pull-handshake');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nvar etm = require('../etm');\n\nvar crypto = require('./crypto'); // step 3. Finish\n// -- send expected message to verify encryption works (send local nonce)\n\n\nmodule.exports = function finish(state, callback) {\n  log('3. finish - start');\n  var proto = state.protocols;\n  var stream = state.shake.rest();\n  var shake = handshake({\n    timeout: state.timeout\n  }, function (err) {\n    if (err) {\n      throw err;\n    }\n  });\n  pull(stream, etm.createUnboxStream(proto.remote.cipher, proto.remote.mac), shake, etm.createBoxStream(proto.local.cipher, proto.local.mac), stream);\n  shake.handshake.write(state.proposal.in.rand);\n  shake.handshake.read(state.proposal.in.rand.length, function (err, nonceBack) {\n    var fail = function fail(err) {\n      log.error(err);\n      state.secure.resolve({\n        source: pull.error(err),\n        sink: function sink(read) {}\n      });\n      callback(err);\n    };\n\n    if (err) return fail(err);\n\n    try {\n      crypto.verifyNonce(state, nonceBack);\n    } catch (err) {\n      return fail(err);\n    }\n\n    log('3. finish - finish'); // Awesome that's all folks.\n\n    state.secure.resolve(shake.handshake.rest());\n    callback();\n  });\n};","map":null,"metadata":{},"sourceType":"script"}