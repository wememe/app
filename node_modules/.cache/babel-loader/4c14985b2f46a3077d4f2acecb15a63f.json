{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar repoVersion = require('ipfs-repo').repoVersion;\n\nmodule.exports = function repo(self) {\n  return {\n    init: function init(bits, empty, callback) {// 1. check if repo already exists\n    },\n\n    /**\n     * If the repo has been initialized, report the current version.\n     * Otherwise report the version that would be initialized.\n     *\n     * @param {function(Error, Number)} [callback]\n     * @returns {undefined}\n     */\n    version: promisify(function (callback) {\n      self._repo._isInitialized(function (err) {\n        if (err) {\n          // TODO: (dryajov) This is really hacky, there must be a better way\n          var match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(function (m) {\n            return m.test(err.message);\n          });\n\n          if (match) {\n            // this repo has not been initialized\n            return callback(null, repoVersion);\n          }\n\n          return callback(err);\n        }\n\n        self._repo.version.get(callback);\n      });\n    }),\n    gc: promisify(function (options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      callback(new Error('Not implemented'));\n    }),\n    stat: promisify(function (options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      self._repo.stat(options, function (err, stats) {\n        if (err) return callback(err);\n        callback(null, {\n          numObjects: stats.numObjects,\n          repoSize: stats.repoSize,\n          repoPath: stats.repoPath,\n          version: stats.version.toString(),\n          storageMax: stats.storageMax\n        });\n      });\n    }),\n    path: function path() {\n      return self._repo.path;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}