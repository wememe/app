{"ast":null,"code":"'use strict';\n\nvar pause = require('pull-pause');\n\nvar pull = require('pull-stream');\n\nvar writable = require('pull-write');\n\nvar pushable = require('pull-pushable');\n\nvar assert = require('assert');\n\nvar setImmediate = require('async/setImmediate');\n\nvar DAGBuilder = require('../builder');\n\nvar createTreeBuilder = require('./tree-builder');\n\nvar chunkers = require('../chunker');\n\nvar defaultOptions = {\n  chunker: 'fixed',\n  rawLeaves: false,\n  hashOnly: false,\n  cidVersion: 0,\n  hash: null,\n  leafType: 'file',\n  hashAlg: 'sha2-256'\n};\n\nmodule.exports = function (ipld, _options) {\n  var options = Object.assign({}, defaultOptions, _options);\n  options.cidVersion = options.cidVersion || 0;\n\n  if (options.cidVersion > 0 && _options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    options.rawLeaves = true;\n  }\n\n  if (_options && _options.hash !== undefined && _options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    options.rawLeaves = true;\n  }\n\n  var Chunker = chunkers[options.chunker];\n  assert(Chunker, 'Unknkown chunker named ' + options.chunker);\n  var pending = 0;\n  var waitingPending = [];\n  var entry = {\n    sink: writable(function (nodes, callback) {\n      pending += nodes.length;\n      nodes.forEach(function (node) {\n        return entry.source.push(node);\n      });\n      setImmediate(callback);\n    }, null, 1, function (err) {\n      return entry.source.end(err);\n    }),\n    source: pushable()\n  };\n  var dagStream = DAGBuilder(Chunker, ipld, options);\n  var treeBuilder = createTreeBuilder(ipld, options);\n  var treeBuilderStream = treeBuilder.stream();\n  var pausable = pause(function () {}); // TODO: transform this entry -> pausable -> <custom async transform> -> exit\n  // into a generic NPM package named something like pull-pause-and-drain\n\n  pull(entry, pausable, dagStream, pull.map(function (node) {\n    pending--;\n\n    if (!pending) {\n      process.nextTick(function () {\n        while (waitingPending.length) {\n          waitingPending.shift()();\n        }\n      });\n    }\n\n    return node;\n  }), treeBuilderStream);\n  return {\n    sink: entry.sink,\n    source: treeBuilderStream.source,\n    flush: flush\n  };\n\n  function flush(callback) {\n    pausable.pause(); // wait until all the files entered were\n    // transformed into DAG nodes\n\n    if (!pending) {\n      proceed();\n    } else {\n      waitingPending.push(proceed);\n    }\n\n    function proceed() {\n      treeBuilder.flush(function (err, hash) {\n        if (err) {\n          treeBuilderStream.source.end(err);\n          callback(err);\n          return;\n        }\n\n        pausable.resume();\n        callback(null, hash);\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}