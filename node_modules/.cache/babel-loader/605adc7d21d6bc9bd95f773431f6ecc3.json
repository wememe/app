{"ast":null,"code":"'use strict';\n\nvar pull = require('pull-stream');\n\nvar Connection = require('interface-connection').Connection;\n\nvar assert = require('assert');\n\nvar PeerInfo = require('peer-info');\n\nvar debug = require('debug');\n\nvar once = require('once');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nvar handshake = require('./handshake');\n\nvar State = require('./state');\n\nmodule.exports = {\n  tag: '/secio/1.0.0',\n  encrypt: function encrypt(localId, conn, remoteId, callback) {\n    assert(localId, 'no local private key provided');\n    assert(conn, 'no connection for the handshake  provided');\n\n    if (typeof remoteId === 'function') {\n      callback = remoteId;\n      remoteId = undefined;\n    }\n\n    callback = once(callback || function (err) {\n      if (err) {\n        log.error(err);\n      }\n    });\n    var timeout = 60 * 1000 * 5;\n    var state = new State(localId, remoteId, timeout, callback);\n\n    function finish(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      conn.getPeerInfo(function (err, peerInfo) {\n        encryptedConnection.setInnerConn(new Connection(state.secure, conn));\n\n        if (err) {\n          // no peerInfo yet, means I'm the receiver\n          encryptedConnection.setPeerInfo(new PeerInfo(state.id.remote));\n        }\n\n        callback();\n      });\n    }\n\n    var encryptedConnection = new Connection(undefined, conn);\n    pull(conn, handshake(state, finish), conn);\n    return encryptedConnection;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}