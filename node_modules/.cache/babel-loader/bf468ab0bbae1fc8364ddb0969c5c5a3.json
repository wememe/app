{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/kenzo/Desktop/3box-dapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debounce = require('lodash.debounce');\n\nvar Message = require('../types/message');\n\nvar logger = require('../utils').logger;\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function MsgQueue(selfPeerId, otherPeerId, network) {\n    _classCallCheck(this, MsgQueue);\n\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));\n    this.sendEntries = debounce(this._sendEntries.bind(this), 200);\n  }\n\n  _createClass(MsgQueue, [{\n    key: \"addMessage\",\n    value: function addMessage(msg) {\n      if (msg.empty) {\n        return;\n      }\n\n      this.send(msg);\n    }\n  }, {\n    key: \"addEntries\",\n    value: function addEntries(entries) {\n      this._entries = this._entries.concat(entries);\n      this.sendEntries();\n    }\n  }, {\n    key: \"_sendEntries\",\n    value: function _sendEntries() {\n      if (!this._entries.length) {\n        return;\n      }\n\n      var msg = new Message(false);\n\n      this._entries.forEach(function (entry) {\n        if (entry.cancel) {\n          msg.cancel(entry.cid);\n        } else {\n          msg.addEntry(entry.cid, entry.priority);\n        }\n      });\n\n      this._entries = [];\n      this.addMessage(msg);\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg) {\n      var _this = this;\n\n      this.network.connectTo(this.peerId, function (err) {\n        if (err) {\n          _this._log.error('cant connect to peer %s: %s', _this.peerId.toB58String(), err.message);\n\n          return;\n        }\n\n        _this._log('sending message');\n\n        _this.network.sendMessage(_this.peerId, msg, function (err) {\n          if (err) {\n            _this._log.error('send error: %s', err.message);\n          }\n        });\n      });\n    }\n  }]);\n\n  return MsgQueue;\n}();","map":null,"metadata":{},"sourceType":"script"}